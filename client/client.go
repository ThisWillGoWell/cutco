// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package client

import (
	"context"
	"net/http"
	"stock-simulator-serverless/src/graph/model"
	"time"

	"github.com/Yamashou/gqlgenc/client"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	Me        model.MeUser         "json:\"me\" graphql:\"me\""
	User      *model.User          "json:\"user\" graphql:\"user\""
	Users     []*model.User        "json:\"users\" graphql:\"users\""
	Company   *model.Company       "json:\"company\" graphql:\"company\""
	Companies []*model.Company     "json:\"companies\" graphql:\"companies\""
	Share     *model.Share         "json:\"share\" graphql:\"share\""
	Chat      []*model.ChatChannel "json:\"chat\" graphql:\"chat\""
}
type Mutation struct {
	Login    *model.AuthPayload     "json:\"login\" graphql:\"login\""
	Signup   *model.AuthPayload     "json:\"signup\" graphql:\"signup\""
	UpdateMe *model.ChangeMePayload "json:\"updateMe\" graphql:\"updateMe\""
	SendChat *model.ChatMessage     "json:\"sendChat\" graphql:\"sendChat\""
	Trade    *model.TradePayload    "json:\"trade\" graphql:\"trade\""
}
type Companines struct {
	Companies []*struct {
		ID   string "json:\"id\" graphql:\"id\""
		Name string "json:\"name\" graphql:\"name\""
	} "json:\"companies\" graphql:\"companies\""
}
type CompanyShares struct {
	Companies []*struct {
		ID     string "json:\"id\" graphql:\"id\""
		Name   string "json:\"name\" graphql:\"name\""
		Symbol string "json:\"symbol\" graphql:\"symbol\""
		Shares []*struct {
			Holder struct {
				ID   string "json:\"id\" graphql:\"id\""
				Name string "json:\"name\" graphql:\"name\""
			} "json:\"holder\" graphql:\"holder\""
			Count int64 "json:\"count\" graphql:\"count\""
		} "json:\"shares\" graphql:\"shares\""
	} "json:\"companies\" graphql:\"companies\""
}
type GetShare struct {
	Share *struct {
		Holder struct {
			ID   string "json:\"id\" graphql:\"id\""
			Name string "json:\"name\" graphql:\"name\""
		} "json:\"holder\" graphql:\"holder\""
		Company struct {
			ID     string "json:\"id\" graphql:\"id\""
			Symbol string "json:\"symbol\" graphql:\"symbol\""
			Name   string "json:\"name\" graphql:\"name\""
		} "json:\"company\" graphql:\"company\""
		Transactions []*struct {
			Time  time.Time "json:\"time\" graphql:\"time\""
			Count int64     "json:\"count\" graphql:\"count\""
			Value int64     "json:\"value\" graphql:\"value\""
		} "json:\"transactions\" graphql:\"transactions\""
	} "json:\"share\" graphql:\"share\""
}
type Trade struct {
	Trade *struct {
		Success *bool "json:\"Success\" graphql:\"Success\""
	} "json:\"trade\" graphql:\"trade\""
}
type Signup struct {
	Signup *struct {
		Token string "json:\"token\" graphql:\"token\""
	} "json:\"signup\" graphql:\"signup\""
}
type Login struct {
	Login *struct {
		Token string "json:\"token\" graphql:\"token\""
	} "json:\"login\" graphql:\"login\""
}
type Users struct {
	Users []*struct {
		Name string "json:\"name\" graphql:\"name\""
		ID   string "json:\"id\" graphql:\"id\""
	} "json:\"users\" graphql:\"users\""
}
type DeleteMe struct {
	UpdateMe *struct {
		Success bool "json:\"success\" graphql:\"success\""
	} "json:\"updateMe\" graphql:\"updateMe\""
}
type UpdateMe struct {
	UpdateMe *struct {
		Me *struct {
			User struct {
				ID string "json:\"id\" graphql:\"id\""
			} "json:\"user\" graphql:\"user\""
		} "json:\"me\" graphql:\"me\""
	} "json:\"updateMe\" graphql:\"updateMe\""
}
type SendMessage struct {
	SendChat *struct {
		Channel struct {
			ID string "json:\"id\" graphql:\"id\""
		} "json:\"channel\" graphql:\"channel\""
		Message   string    "json:\"message\" graphql:\"message\""
		CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
	} "json:\"sendChat\" graphql:\"sendChat\""
}
type ReadChat struct {
	Chat []*struct {
		ID      string "json:\"id\" graphql:\"id\""
		Members []*struct {
			ID string "json:\"id\" graphql:\"id\""
		} "json:\"members\" graphql:\"members\""
		CreatedAt *time.Time "json:\"createdAt\" graphql:\"createdAt\""
		Messages  []*struct {
			ID            string    "json:\"id\" graphql:\"id\""
			Message       string    "json:\"message\" graphql:\"message\""
			CreatedAt     time.Time "json:\"createdAt\" graphql:\"createdAt\""
			PaginationKey string    "json:\"paginationKey\" graphql:\"paginationKey\""
			User          struct {
				ID string "json:\"id\" graphql:\"id\""
			} "json:\"user\" graphql:\"user\""
		} "json:\"messages\" graphql:\"messages\""
	} "json:\"chat\" graphql:\"chat\""
}
type MyID struct {
	Me struct {
		User struct {
			ID string "json:\"id\" graphql:\"id\""
		} "json:\"user\" graphql:\"user\""
	} "json:\"me\" graphql:\"me\""
}
type FullProfile struct {
	Me struct {
		Email *string "json:\"email\" graphql:\"email\""
		Login string  "json:\"login\" graphql:\"login\""
		User  struct {
			ID           string    "json:\"id\" graphql:\"id\""
			Name         string    "json:\"name\" graphql:\"name\""
			InvestorType string    "json:\"investorType\" graphql:\"investorType\""
			CreatedAt    time.Time "json:\"createdAt\" graphql:\"createdAt\""
			Description  string    "json:\"description\" graphql:\"description\""
			Company      *struct {
				ID          string    "json:\"id\" graphql:\"id\""
				Value       int64     "json:\"value\" graphql:\"value\""
				CreatedAt   time.Time "json:\"createdAt\" graphql:\"createdAt\""
				OpenShares  *int64    "json:\"openShares\" graphql:\"openShares\""
				Description string    "json:\"description\" graphql:\"description\""
				Name        string    "json:\"name\" graphql:\"name\""
				Symbol      string    "json:\"symbol\" graphql:\"symbol\""
				Shares      []*struct {
					Holder struct {
						ID string "json:\"id\" graphql:\"id\""
					} "json:\"holder\" graphql:\"holder\""
					Count int64 "json:\"count\" graphql:\"count\""
				} "json:\"shares\" graphql:\"shares\""
			} "json:\"company\" graphql:\"company\""
			Shares []*struct {
				Company struct {
					ID string "json:\"id\" graphql:\"id\""
				} "json:\"company\" graphql:\"company\""
				Count int64 "json:\"count\" graphql:\"count\""
			} "json:\"shares\" graphql:\"shares\""
		} "json:\"user\" graphql:\"user\""
	} "json:\"me\" graphql:\"me\""
}

const CompaninesDocument = `query Companines ($input: GetCompanyInput) {
	companies(input: $input) {
		id
		name
	}
}
`

func (c *Client) Companines(ctx context.Context, input *model.GetCompanyInput, httpRequestOptions ...client.HTTPRequestOption) (*Companines, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res Companines
	if err := c.Client.Post(ctx, "Companines", CompaninesDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const CompanySharesDocument = `query CompanyShares ($input: GetCompanyInput) {
	companies(input: $input) {
		id
		name
		symbol
		shares {
			holder {
				id
				name
			}
			count
		}
	}
}
`

func (c *Client) CompanyShares(ctx context.Context, input *model.GetCompanyInput, httpRequestOptions ...client.HTTPRequestOption) (*CompanyShares, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res CompanyShares
	if err := c.Client.Post(ctx, "CompanyShares", CompanySharesDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetShareDocument = `query GetShare ($input: GetShareInput) {
	share(input: $input) {
		holder {
			id
			name
		}
		company {
			id
			symbol
			name
		}
		transactions {
			time
			count
			value
		}
	}
}
`

func (c *Client) GetShare(ctx context.Context, input *model.GetShareInput, httpRequestOptions ...client.HTTPRequestOption) (*GetShare, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res GetShare
	if err := c.Client.Post(ctx, "GetShare", GetShareDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const TradeDocument = `mutation Trade ($input: TradeInput!) {
	trade(input: $input) {
		Success
	}
}
`

func (c *Client) Trade(ctx context.Context, input model.TradeInput, httpRequestOptions ...client.HTTPRequestOption) (*Trade, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res Trade
	if err := c.Client.Post(ctx, "Trade", TradeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const SignupDocument = `mutation Signup ($input: SignupInput!) {
	signup(input: $input) {
		token
	}
}
`

func (c *Client) Signup(ctx context.Context, input model.SignupInput, httpRequestOptions ...client.HTTPRequestOption) (*Signup, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res Signup
	if err := c.Client.Post(ctx, "Signup", SignupDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const LoginDocument = `mutation Login ($input: LoginInput!) {
	login(input: $input) {
		token
	}
}
`

func (c *Client) Login(ctx context.Context, input model.LoginInput, httpRequestOptions ...client.HTTPRequestOption) (*Login, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res Login
	if err := c.Client.Post(ctx, "Login", LoginDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UsersDocument = `query Users ($input: GetUsersInput) {
	users(input: $input) {
		name
		id
	}
}
`

func (c *Client) Users(ctx context.Context, input *model.GetUsersInput, httpRequestOptions ...client.HTTPRequestOption) (*Users, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res Users
	if err := c.Client.Post(ctx, "Users", UsersDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const DeleteMeDocument = `mutation DeleteMe {
	updateMe(input: {delete:true}) {
		success
	}
}
`

func (c *Client) DeleteMe(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*DeleteMe, error) {
	vars := map[string]interface{}{}

	var res DeleteMe
	if err := c.Client.Post(ctx, "DeleteMe", DeleteMeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdateMeDocument = `mutation UpdateMe ($input: ChangeMeInput!) {
	updateMe(input: $input) {
		me {
			user {
				id
			}
		}
	}
}
`

func (c *Client) UpdateMe(ctx context.Context, input model.ChangeMeInput, httpRequestOptions ...client.HTTPRequestOption) (*UpdateMe, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res UpdateMe
	if err := c.Client.Post(ctx, "UpdateMe", UpdateMeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const SendMessageDocument = `mutation SendMessage ($input: SendChatInput!) {
	sendChat(input: $input) {
		channel {
			id
		}
		message
		createdAt
	}
}
`

func (c *Client) SendMessage(ctx context.Context, input model.SendChatInput, httpRequestOptions ...client.HTTPRequestOption) (*SendMessage, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res SendMessage
	if err := c.Client.Post(ctx, "SendMessage", SendMessageDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ReadChatDocument = `query ReadChat ($input: ReadChatMessagesInput) {
	chat(input: $input) {
		id
		members {
			id
		}
		createdAt
		messages {
			id
			message
			createdAt
			paginationKey
			user {
				id
			}
		}
	}
}
`

func (c *Client) ReadChat(ctx context.Context, input *model.ReadChatMessagesInput, httpRequestOptions ...client.HTTPRequestOption) (*ReadChat, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ReadChat
	if err := c.Client.Post(ctx, "ReadChat", ReadChatDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const MyIDDocument = `query MyID {
	me {
		user {
			id
		}
	}
}
`

func (c *Client) MyID(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*MyID, error) {
	vars := map[string]interface{}{}

	var res MyID
	if err := c.Client.Post(ctx, "MyID", MyIDDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const FullProfileDocument = `query FullProfile {
	me {
		email
		login
		user {
			id
			name
			investorType
			createdAt
			description
			company {
				id
				value
				createdAt
				openShares
				description
				name
				symbol
				shares {
					holder {
						id
					}
					count
				}
			}
			shares {
				company {
					id
				}
				count
			}
		}
	}
}
`

func (c *Client) FullProfile(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*FullProfile, error) {
	vars := map[string]interface{}{}

	var res FullProfile
	if err := c.Client.Post(ctx, "FullProfile", FullProfileDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
