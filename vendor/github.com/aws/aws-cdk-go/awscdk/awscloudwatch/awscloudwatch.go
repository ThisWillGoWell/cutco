package awscloudwatch

import (
	_init_ "github.com/aws/aws-cdk-go/awscdk/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk"
	"github.com/aws/aws-cdk-go/awscdk/awscloudwatch/internal"
	"github.com/aws/aws-cdk-go/awscdk/awsiam"
	"github.com/aws/constructs-go/constructs/v3"
)

// An alarm on a CloudWatch metric.
//
// Example:
//   import cloudwatch "github.com/aws/aws-cdk-go/awscdk"
//
//   var alias alias
//
//   // or add alarms to an existing group
//   var blueGreenAlias alias
//   alarm := cloudwatch.NewAlarm(this, jsii.String("Errors"), &alarmProps{
//   	comparisonOperator: cloudwatch.comparisonOperator_GREATER_THAN_THRESHOLD,
//   	threshold: jsii.Number(1),
//   	evaluationPeriods: jsii.Number(1),
//   	metric: alias.metricErrors(),
//   })
//   deploymentGroup := codedeploy.NewLambdaDeploymentGroup(this, jsii.String("BlueGreenDeployment"), &lambdaDeploymentGroupProps{
//   	alias: alias,
//   	deploymentConfig: codedeploy.lambdaDeploymentConfig_LINEAR_10PERCENT_EVERY_1MINUTE(),
//   	alarms: []iAlarm{
//   		alarm,
//   	},
//   })
//   deploymentGroup.addAlarm(cloudwatch.NewAlarm(this, jsii.String("BlueGreenErrors"), &alarmProps{
//   	comparisonOperator: cloudwatch.*comparisonOperator_GREATER_THAN_THRESHOLD,
//   	threshold: jsii.Number(1),
//   	evaluationPeriods: jsii.Number(1),
//   	metric: blueGreenAlias.metricErrors(),
//   }))
//
// Experimental.
type Alarm interface {
	AlarmBase
	// Experimental.
	AlarmActionArns() *[]*string
	// Experimental.
	SetAlarmActionArns(val *[]*string)
	// ARN of this alarm.
	// Experimental.
	AlarmArn() *string
	// Name of this alarm.
	// Experimental.
	AlarmName() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// Experimental.
	InsufficientDataActionArns() *[]*string
	// Experimental.
	SetInsufficientDataActionArns(val *[]*string)
	// The metric object this alarm was based on.
	// Experimental.
	Metric() IMetric
	// The construct tree node associated with this construct.
	// Experimental.
	Node() awscdk.ConstructNode
	// Experimental.
	OkActionArns() *[]*string
	// Experimental.
	SetOkActionArns(val *[]*string)
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Trigger this action if the alarm fires.
	//
	// Typically the ARN of an SNS topic or ARN of an AutoScaling policy.
	// Experimental.
	AddAlarmAction(actions ...IAlarmAction)
	// Trigger this action if there is insufficient data to evaluate the alarm.
	//
	// Typically the ARN of an SNS topic or ARN of an AutoScaling policy.
	// Experimental.
	AddInsufficientDataAction(actions ...IAlarmAction)
	// Trigger this action if the alarm returns from breaching state into ok state.
	//
	// Typically the ARN of an SNS topic or ARN of an AutoScaling policy.
	// Experimental.
	AddOkAction(actions ...IAlarmAction)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	OnValidate() *[]*string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	Prepare()
	// AlarmRule indicating ALARM state for Alarm.
	// Experimental.
	RenderAlarmRule() *string
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	Synthesize(session awscdk.ISynthesisSession)
	// Turn this alarm into a horizontal annotation.
	//
	// This is useful if you want to represent an Alarm in a non-AlarmWidget.
	// An `AlarmWidget` can directly show an alarm, but it can only show a
	// single alarm and no other metrics. Instead, you can convert the alarm to
	// a HorizontalAnnotation and add it as an annotation to another graph.
	//
	// This might be useful if:
	//
	// - You want to show multiple alarms inside a single graph, for example if
	//    you have both a "small margin/long period" alarm as well as a
	//    "large margin/short period" alarm.
	//
	// - You want to show an Alarm line in a graph with multiple metrics in it.
	// Experimental.
	ToAnnotation() *HorizontalAnnotation
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	Validate() *[]*string
}

// The jsii proxy struct for Alarm
type jsiiProxy_Alarm struct {
	jsiiProxy_AlarmBase
}

func (j *jsiiProxy_Alarm) AlarmActionArns() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"alarmActionArns",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alarm) AlarmArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alarmArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alarm) AlarmName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alarmName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alarm) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alarm) InsufficientDataActionArns() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"insufficientDataActionArns",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alarm) Metric() IMetric {
	var returns IMetric
	_jsii_.Get(
		j,
		"metric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alarm) Node() awscdk.ConstructNode {
	var returns awscdk.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alarm) OkActionArns() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"okActionArns",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alarm) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alarm) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Experimental.
func NewAlarm(scope constructs.Construct, id *string, props *AlarmProps) Alarm {
	_init_.Initialize()

	j := jsiiProxy_Alarm{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.Alarm",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewAlarm_Override(a Alarm, scope constructs.Construct, id *string, props *AlarmProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.Alarm",
		[]interface{}{scope, id, props},
		a,
	)
}

func (j *jsiiProxy_Alarm) SetAlarmActionArns(val *[]*string) {
	_jsii_.Set(
		j,
		"alarmActionArns",
		val,
	)
}

func (j *jsiiProxy_Alarm) SetInsufficientDataActionArns(val *[]*string) {
	_jsii_.Set(
		j,
		"insufficientDataActionArns",
		val,
	)
}

func (j *jsiiProxy_Alarm) SetOkActionArns(val *[]*string) {
	_jsii_.Set(
		j,
		"okActionArns",
		val,
	)
}

// Import an existing CloudWatch alarm provided an ARN.
// Experimental.
func Alarm_FromAlarmArn(scope constructs.Construct, id *string, alarmArn *string) IAlarm {
	_init_.Initialize()

	var returns IAlarm

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.Alarm",
		"fromAlarmArn",
		[]interface{}{scope, id, alarmArn},
		&returns,
	)

	return returns
}

// Return whether the given object is a Construct.
// Experimental.
func Alarm_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.Alarm",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func Alarm_IsResource(construct awscdk.IConstruct) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.Alarm",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alarm) AddAlarmAction(actions ...IAlarmAction) {
	args := []interface{}{}
	for _, a := range actions {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addAlarmAction",
		args,
	)
}

func (a *jsiiProxy_Alarm) AddInsufficientDataAction(actions ...IAlarmAction) {
	args := []interface{}{}
	for _, a := range actions {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addInsufficientDataAction",
		args,
	)
}

func (a *jsiiProxy_Alarm) AddOkAction(actions ...IAlarmAction) {
	args := []interface{}{}
	for _, a := range actions {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addOkAction",
		args,
	)
}

func (a *jsiiProxy_Alarm) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	_jsii_.InvokeVoid(
		a,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (a *jsiiProxy_Alarm) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alarm) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alarm) GetResourceNameAttribute(nameAttr *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alarm) OnPrepare() {
	_jsii_.InvokeVoid(
		a,
		"onPrepare",
		nil, // no parameters
	)
}

func (a *jsiiProxy_Alarm) OnSynthesize(session constructs.ISynthesisSession) {
	_jsii_.InvokeVoid(
		a,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (a *jsiiProxy_Alarm) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		a,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alarm) Prepare() {
	_jsii_.InvokeVoid(
		a,
		"prepare",
		nil, // no parameters
	)
}

func (a *jsiiProxy_Alarm) RenderAlarmRule() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"renderAlarmRule",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alarm) Synthesize(session awscdk.ISynthesisSession) {
	_jsii_.InvokeVoid(
		a,
		"synthesize",
		[]interface{}{session},
	)
}

func (a *jsiiProxy_Alarm) ToAnnotation() *HorizontalAnnotation {
	var returns *HorizontalAnnotation

	_jsii_.Invoke(
		a,
		"toAnnotation",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alarm) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alarm) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		a,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Properties for an alarm action.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   alarmActionConfig := &alarmActionConfig{
//   	alarmActionArn: jsii.String("alarmActionArn"),
//   }
//
// Experimental.
type AlarmActionConfig struct {
	// Return the ARN that should be used for a CloudWatch Alarm action.
	// Experimental.
	AlarmActionArn *string `json:"alarmActionArn" yaml:"alarmActionArn"`
}

// The base class for Alarm and CompositeAlarm resources.
// Experimental.
type AlarmBase interface {
	awscdk.Resource
	IAlarm
	// Experimental.
	AlarmActionArns() *[]*string
	// Experimental.
	SetAlarmActionArns(val *[]*string)
	// Alarm ARN (i.e. arn:aws:cloudwatch:<region>:<account-id>:alarm:Foo).
	// Experimental.
	AlarmArn() *string
	// Name of the alarm.
	// Experimental.
	AlarmName() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// Experimental.
	InsufficientDataActionArns() *[]*string
	// Experimental.
	SetInsufficientDataActionArns(val *[]*string)
	// The construct tree node associated with this construct.
	// Experimental.
	Node() awscdk.ConstructNode
	// Experimental.
	OkActionArns() *[]*string
	// Experimental.
	SetOkActionArns(val *[]*string)
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Trigger this action if the alarm fires.
	//
	// Typically the ARN of an SNS topic or ARN of an AutoScaling policy.
	// Experimental.
	AddAlarmAction(actions ...IAlarmAction)
	// Trigger this action if there is insufficient data to evaluate the alarm.
	//
	// Typically the ARN of an SNS topic or ARN of an AutoScaling policy.
	// Experimental.
	AddInsufficientDataAction(actions ...IAlarmAction)
	// Trigger this action if the alarm returns from breaching state into ok state.
	//
	// Typically the ARN of an SNS topic or ARN of an AutoScaling policy.
	// Experimental.
	AddOkAction(actions ...IAlarmAction)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	OnValidate() *[]*string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	Prepare()
	// AlarmRule indicating ALARM state for Alarm.
	// Experimental.
	RenderAlarmRule() *string
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	Synthesize(session awscdk.ISynthesisSession)
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	Validate() *[]*string
}

// The jsii proxy struct for AlarmBase
type jsiiProxy_AlarmBase struct {
	internal.Type__awscdkResource
	jsiiProxy_IAlarm
}

func (j *jsiiProxy_AlarmBase) AlarmActionArns() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"alarmActionArns",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmBase) AlarmArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alarmArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmBase) AlarmName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alarmName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmBase) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmBase) InsufficientDataActionArns() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"insufficientDataActionArns",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmBase) Node() awscdk.ConstructNode {
	var returns awscdk.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmBase) OkActionArns() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"okActionArns",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmBase) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmBase) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Experimental.
func NewAlarmBase_Override(a AlarmBase, scope constructs.Construct, id *string, props *awscdk.ResourceProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.AlarmBase",
		[]interface{}{scope, id, props},
		a,
	)
}

func (j *jsiiProxy_AlarmBase) SetAlarmActionArns(val *[]*string) {
	_jsii_.Set(
		j,
		"alarmActionArns",
		val,
	)
}

func (j *jsiiProxy_AlarmBase) SetInsufficientDataActionArns(val *[]*string) {
	_jsii_.Set(
		j,
		"insufficientDataActionArns",
		val,
	)
}

func (j *jsiiProxy_AlarmBase) SetOkActionArns(val *[]*string) {
	_jsii_.Set(
		j,
		"okActionArns",
		val,
	)
}

// Return whether the given object is a Construct.
// Experimental.
func AlarmBase_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.AlarmBase",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func AlarmBase_IsResource(construct awscdk.IConstruct) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.AlarmBase",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmBase) AddAlarmAction(actions ...IAlarmAction) {
	args := []interface{}{}
	for _, a := range actions {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addAlarmAction",
		args,
	)
}

func (a *jsiiProxy_AlarmBase) AddInsufficientDataAction(actions ...IAlarmAction) {
	args := []interface{}{}
	for _, a := range actions {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addInsufficientDataAction",
		args,
	)
}

func (a *jsiiProxy_AlarmBase) AddOkAction(actions ...IAlarmAction) {
	args := []interface{}{}
	for _, a := range actions {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addOkAction",
		args,
	)
}

func (a *jsiiProxy_AlarmBase) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	_jsii_.InvokeVoid(
		a,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (a *jsiiProxy_AlarmBase) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmBase) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmBase) GetResourceNameAttribute(nameAttr *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmBase) OnPrepare() {
	_jsii_.InvokeVoid(
		a,
		"onPrepare",
		nil, // no parameters
	)
}

func (a *jsiiProxy_AlarmBase) OnSynthesize(session constructs.ISynthesisSession) {
	_jsii_.InvokeVoid(
		a,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (a *jsiiProxy_AlarmBase) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		a,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmBase) Prepare() {
	_jsii_.InvokeVoid(
		a,
		"prepare",
		nil, // no parameters
	)
}

func (a *jsiiProxy_AlarmBase) RenderAlarmRule() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"renderAlarmRule",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmBase) Synthesize(session awscdk.ISynthesisSession) {
	_jsii_.InvokeVoid(
		a,
		"synthesize",
		[]interface{}{session},
	)
}

func (a *jsiiProxy_AlarmBase) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmBase) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		a,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Properties for Alarms.
//
// Example:
//   import cloudwatch "github.com/aws/aws-cdk-go/awscdk"
//
//   var alias alias
//
//   // or add alarms to an existing group
//   var blueGreenAlias alias
//   alarm := cloudwatch.NewAlarm(this, jsii.String("Errors"), &alarmProps{
//   	comparisonOperator: cloudwatch.comparisonOperator_GREATER_THAN_THRESHOLD,
//   	threshold: jsii.Number(1),
//   	evaluationPeriods: jsii.Number(1),
//   	metric: alias.metricErrors(),
//   })
//   deploymentGroup := codedeploy.NewLambdaDeploymentGroup(this, jsii.String("BlueGreenDeployment"), &lambdaDeploymentGroupProps{
//   	alias: alias,
//   	deploymentConfig: codedeploy.lambdaDeploymentConfig_LINEAR_10PERCENT_EVERY_1MINUTE(),
//   	alarms: []iAlarm{
//   		alarm,
//   	},
//   })
//   deploymentGroup.addAlarm(cloudwatch.NewAlarm(this, jsii.String("BlueGreenErrors"), &alarmProps{
//   	comparisonOperator: cloudwatch.*comparisonOperator_GREATER_THAN_THRESHOLD,
//   	threshold: jsii.Number(1),
//   	evaluationPeriods: jsii.Number(1),
//   	metric: blueGreenAlias.metricErrors(),
//   }))
//
// Experimental.
type AlarmProps struct {
	// The number of periods over which data is compared to the specified threshold.
	// Experimental.
	EvaluationPeriods *float64 `json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// The value against which the specified statistic is compared.
	// Experimental.
	Threshold *float64 `json:"threshold" yaml:"threshold"`
	// Whether the actions for this alarm are enabled.
	// Experimental.
	ActionsEnabled *bool `json:"actionsEnabled" yaml:"actionsEnabled"`
	// Description for the alarm.
	// Experimental.
	AlarmDescription *string `json:"alarmDescription" yaml:"alarmDescription"`
	// Name of the alarm.
	// Experimental.
	AlarmName *string `json:"alarmName" yaml:"alarmName"`
	// Comparison to use to check if metric is breaching.
	// Experimental.
	ComparisonOperator ComparisonOperator `json:"comparisonOperator" yaml:"comparisonOperator"`
	// The number of datapoints that must be breaching to trigger the alarm.
	//
	// This is used only if you are setting an "M
	// out of N" alarm. In that case, this value is the M. For more information, see Evaluating an Alarm in the Amazon
	// CloudWatch User Guide.
	// See: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation
	//
	// Experimental.
	DatapointsToAlarm *float64 `json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// Specifies whether to evaluate the data and potentially change the alarm state if there are too few data points to be statistically significant.
	//
	// Used only for alarms that are based on percentiles.
	// Experimental.
	EvaluateLowSampleCountPercentile *string `json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// The period over which the specified statistic is applied.
	//
	// Cannot be used with `MathExpression` objects.
	// Deprecated: Use `metric.with({ period: ... })` to encode the period into the Metric object
	Period awscdk.Duration `json:"period" yaml:"period"`
	// What function to use for aggregating.
	//
	// Can be one of the following:
	//
	// - "Minimum" | "min"
	// - "Maximum" | "max"
	// - "Average" | "avg"
	// - "Sum" | "sum"
	// - "SampleCount | "n"
	// - "pNN.NN"
	//
	// Cannot be used with `MathExpression` objects.
	// Deprecated: Use `metric.with({ statistic: ... })` to encode the period into the Metric object
	Statistic *string `json:"statistic" yaml:"statistic"`
	// Sets how this alarm is to handle missing data points.
	// Experimental.
	TreatMissingData TreatMissingData `json:"treatMissingData" yaml:"treatMissingData"`
	// The metric to add the alarm on.
	//
	// Metric objects can be obtained from most resources, or you can construct
	// custom Metric objects by instantiating one.
	// Experimental.
	Metric IMetric `json:"metric" yaml:"metric"`
}

// Class with static functions to build AlarmRule for Composite Alarms.
//
// Example:
//   var alarm1 alarm
//   var alarm2 alarm
//   var alarm3 alarm
//   var alarm4 alarm
//
//   alarmRule := cloudwatch.alarmRule.anyOf(cloudwatch.alarmRule.allOf(cloudwatch.alarmRule.anyOf(alarm1, cloudwatch.alarmRule.fromAlarm(alarm2, cloudwatch.alarmState_OK), alarm3), cloudwatch.alarmRule.not(cloudwatch.alarmRule.fromAlarm(alarm4, cloudwatch.alarmState_INSUFFICIENT_DATA))), cloudwatch.alarmRule.fromBoolean(jsii.Boolean(false)))
//
//   cloudwatch.NewCompositeAlarm(this, jsii.String("MyAwesomeCompositeAlarm"), &compositeAlarmProps{
//   	alarmRule: alarmRule,
//   })
//
// Experimental.
type AlarmRule interface {
}

// The jsii proxy struct for AlarmRule
type jsiiProxy_AlarmRule struct {
	_ byte // padding
}

// Experimental.
func NewAlarmRule() AlarmRule {
	_init_.Initialize()

	j := jsiiProxy_AlarmRule{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.AlarmRule",
		nil, // no parameters
		&j,
	)

	return &j
}

// Experimental.
func NewAlarmRule_Override(a AlarmRule) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.AlarmRule",
		nil, // no parameters
		a,
	)
}

// function to join all provided AlarmRules with AND operator.
// Experimental.
func AlarmRule_AllOf(operands ...IAlarmRule) IAlarmRule {
	_init_.Initialize()

	args := []interface{}{}
	for _, a := range operands {
		args = append(args, a)
	}

	var returns IAlarmRule

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.AlarmRule",
		"allOf",
		args,
		&returns,
	)

	return returns
}

// function to join all provided AlarmRules with OR operator.
// Experimental.
func AlarmRule_AnyOf(operands ...IAlarmRule) IAlarmRule {
	_init_.Initialize()

	args := []interface{}{}
	for _, a := range operands {
		args = append(args, a)
	}

	var returns IAlarmRule

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.AlarmRule",
		"anyOf",
		args,
		&returns,
	)

	return returns
}

// function to build Rule Expression for given IAlarm and AlarmState.
// Experimental.
func AlarmRule_FromAlarm(alarm IAlarm, alarmState AlarmState) IAlarmRule {
	_init_.Initialize()

	var returns IAlarmRule

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.AlarmRule",
		"fromAlarm",
		[]interface{}{alarm, alarmState},
		&returns,
	)

	return returns
}

// function to build TRUE/FALSE intent for Rule Expression.
// Experimental.
func AlarmRule_FromBoolean(value *bool) IAlarmRule {
	_init_.Initialize()

	var returns IAlarmRule

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.AlarmRule",
		"fromBoolean",
		[]interface{}{value},
		&returns,
	)

	return returns
}

// function to build Rule Expression for given Alarm Rule string.
// Experimental.
func AlarmRule_FromString(alarmRule *string) IAlarmRule {
	_init_.Initialize()

	var returns IAlarmRule

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.AlarmRule",
		"fromString",
		[]interface{}{alarmRule},
		&returns,
	)

	return returns
}

// function to wrap provided AlarmRule in NOT operator.
// Experimental.
func AlarmRule_Not(operand IAlarmRule) IAlarmRule {
	_init_.Initialize()

	var returns IAlarmRule

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.AlarmRule",
		"not",
		[]interface{}{operand},
		&returns,
	)

	return returns
}

// Enumeration indicates state of Alarm used in building Alarm Rule.
//
// Example:
//   var dashboard dashboard
//   var errorAlarm alarm
//
//   dashboard.addWidgets(cloudwatch.NewAlarmStatusWidget(&alarmStatusWidgetProps{
//   	title: jsii.String("Errors"),
//   	alarms: []iAlarm{
//   		errorAlarm,
//   	},
//   	sortBy: cloudwatch.alarmStatusWidgetSortBy_STATE_UPDATED_TIMESTAMP,
//   	states: []alarmState{
//   		cloudwatch.*alarmState_ALARM,
//   	},
//   }))
//
// Experimental.
type AlarmState string

const (
	// State indicates resource is in ALARM.
	// Experimental.
	AlarmState_ALARM AlarmState = "ALARM"
	// State indicates resource is not in ALARM.
	// Experimental.
	AlarmState_OK AlarmState = "OK"
	// State indicates there is not enough data to determine is resource is in ALARM.
	// Experimental.
	AlarmState_INSUFFICIENT_DATA AlarmState = "INSUFFICIENT_DATA"
)

// A dashboard widget that displays alarms in a grid view.
//
// Example:
//   var dashboard dashboard
//   var errorAlarm alarm
//
//   dashboard.addWidgets(
//   cloudwatch.NewAlarmStatusWidget(&alarmStatusWidgetProps{
//   	alarms: []iAlarm{
//   		errorAlarm,
//   	},
//   }))
//
// Experimental.
type AlarmStatusWidget interface {
	ConcreteWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// Any warnings that are produced as a result of putting together this widget.
	// Experimental.
	Warnings() *[]*string
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Copy the warnings from the given metric.
	// Experimental.
	CopyMetricWarnings(ms ...IMetric)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for AlarmStatusWidget
type jsiiProxy_AlarmStatusWidget struct {
	jsiiProxy_ConcreteWidget
}

func (j *jsiiProxy_AlarmStatusWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmStatusWidget) Warnings() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"warnings",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmStatusWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmStatusWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmStatusWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewAlarmStatusWidget(props *AlarmStatusWidgetProps) AlarmStatusWidget {
	_init_.Initialize()

	j := jsiiProxy_AlarmStatusWidget{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.AlarmStatusWidget",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewAlarmStatusWidget_Override(a AlarmStatusWidget, props *AlarmStatusWidgetProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.AlarmStatusWidget",
		[]interface{}{props},
		a,
	)
}

func (j *jsiiProxy_AlarmStatusWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_AlarmStatusWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (a *jsiiProxy_AlarmStatusWidget) CopyMetricWarnings(ms ...IMetric) {
	args := []interface{}{}
	for _, a := range ms {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"copyMetricWarnings",
		args,
	)
}

func (a *jsiiProxy_AlarmStatusWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		a,
		"position",
		[]interface{}{x, y},
	)
}

func (a *jsiiProxy_AlarmStatusWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		a,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Properties for an Alarm Status Widget.
//
// Example:
//   var dashboard dashboard
//   var errorAlarm alarm
//
//   dashboard.addWidgets(
//   cloudwatch.NewAlarmStatusWidget(&alarmStatusWidgetProps{
//   	alarms: []iAlarm{
//   		errorAlarm,
//   	},
//   }))
//
// Experimental.
type AlarmStatusWidgetProps struct {
	// CloudWatch Alarms to show in widget.
	// Experimental.
	Alarms *[]IAlarm `json:"alarms" yaml:"alarms"`
	// Height of the widget.
	// Experimental.
	Height *float64 `json:"height" yaml:"height"`
	// Specifies how to sort the alarms in the widget.
	// Experimental.
	SortBy AlarmStatusWidgetSortBy `json:"sortBy" yaml:"sortBy"`
	// Use this field to filter the list of alarms displayed in the widget to only those alarms currently in the specified states.
	//
	// You can specify one or more alarm states in the value for this field.
	// The alarm states that you can specify are ALARM, INSUFFICIENT_DATA, and OK.
	//
	// If you omit this field or specify an empty array, all the alarms specifed in alarms are displayed.
	// Experimental.
	States *[]AlarmState `json:"states" yaml:"states"`
	// The title of the widget.
	// Experimental.
	Title *string `json:"title" yaml:"title"`
	// Width of the widget, in a grid of 24 units wide.
	// Experimental.
	Width *float64 `json:"width" yaml:"width"`
}

// The sort possibilities for AlarmStatusWidgets.
//
// Example:
//   var dashboard dashboard
//   var errorAlarm alarm
//
//   dashboard.addWidgets(cloudwatch.NewAlarmStatusWidget(&alarmStatusWidgetProps{
//   	title: jsii.String("Errors"),
//   	alarms: []iAlarm{
//   		errorAlarm,
//   	},
//   	sortBy: cloudwatch.alarmStatusWidgetSortBy_STATE_UPDATED_TIMESTAMP,
//   	states: []alarmState{
//   		cloudwatch.*alarmState_ALARM,
//   	},
//   }))
//
// Experimental.
type AlarmStatusWidgetSortBy string

const (
	// Choose DEFAULT to sort them in alphabetical order by alarm name.
	// Experimental.
	AlarmStatusWidgetSortBy_DEFAULT AlarmStatusWidgetSortBy = "DEFAULT"
	// Choose STATE_UPDATED_TIMESTAMP to sort them first by alarm state, with alarms in ALARM state first, INSUFFICIENT_DATA alarms next, and OK alarms last.
	//
	// Within each group, the alarms are sorted by when they last changed state, with more recent state changes listed first.
	// Experimental.
	AlarmStatusWidgetSortBy_STATE_UPDATED_TIMESTAMP AlarmStatusWidgetSortBy = "STATE_UPDATED_TIMESTAMP"
	// Choose TIMESTAMP to sort them by the time when the alarms most recently changed state, no matter the current alarm state.
	//
	// The alarm that changed state most recently is listed first.
	// Experimental.
	AlarmStatusWidgetSortBy_TIMESTAMP AlarmStatusWidgetSortBy = "TIMESTAMP"
)

// Display the metric associated with an alarm, including the alarm line.
//
// Example:
//   var dashboard dashboard
//   var errorAlarm alarm
//
//   dashboard.addWidgets(cloudwatch.NewAlarmWidget(&alarmWidgetProps{
//   	title: jsii.String("Errors"),
//   	alarm: errorAlarm,
//   }))
//
// Experimental.
type AlarmWidget interface {
	ConcreteWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// Any warnings that are produced as a result of putting together this widget.
	// Experimental.
	Warnings() *[]*string
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Copy the warnings from the given metric.
	// Experimental.
	CopyMetricWarnings(ms ...IMetric)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for AlarmWidget
type jsiiProxy_AlarmWidget struct {
	jsiiProxy_ConcreteWidget
}

func (j *jsiiProxy_AlarmWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmWidget) Warnings() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"warnings",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewAlarmWidget(props *AlarmWidgetProps) AlarmWidget {
	_init_.Initialize()

	j := jsiiProxy_AlarmWidget{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.AlarmWidget",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewAlarmWidget_Override(a AlarmWidget, props *AlarmWidgetProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.AlarmWidget",
		[]interface{}{props},
		a,
	)
}

func (j *jsiiProxy_AlarmWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_AlarmWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (a *jsiiProxy_AlarmWidget) CopyMetricWarnings(ms ...IMetric) {
	args := []interface{}{}
	for _, a := range ms {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"copyMetricWarnings",
		args,
	)
}

func (a *jsiiProxy_AlarmWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		a,
		"position",
		[]interface{}{x, y},
	)
}

func (a *jsiiProxy_AlarmWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		a,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Properties for an AlarmWidget.
//
// Example:
//   var dashboard dashboard
//   var errorAlarm alarm
//
//   dashboard.addWidgets(cloudwatch.NewAlarmWidget(&alarmWidgetProps{
//   	title: jsii.String("Errors"),
//   	alarm: errorAlarm,
//   }))
//
// Experimental.
type AlarmWidgetProps struct {
	// Height of the widget.
	// Experimental.
	Height *float64 `json:"height" yaml:"height"`
	// The region the metrics of this graph should be taken from.
	// Experimental.
	Region *string `json:"region" yaml:"region"`
	// Title for the graph.
	// Experimental.
	Title *string `json:"title" yaml:"title"`
	// Width of the widget, in a grid of 24 units wide.
	// Experimental.
	Width *float64 `json:"width" yaml:"width"`
	// The alarm to show.
	// Experimental.
	Alarm IAlarm `json:"alarm" yaml:"alarm"`
	// Left Y axis.
	// Experimental.
	LeftYAxis *YAxisProps `json:"leftYAxis" yaml:"leftYAxis"`
}

// A CloudFormation `AWS::CloudWatch::Alarm`.
//
// The `AWS::CloudWatch::Alarm` type specifies an alarm and associates it with the specified metric or metric math expression.
//
// When this operation creates an alarm, the alarm state is immediately set to `INSUFFICIENT_DATA` . The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.
//
// When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   cfnAlarm := cloudwatch.NewCfnAlarm(this, jsii.String("MyCfnAlarm"), &cfnAlarmProps{
//   	comparisonOperator: jsii.String("comparisonOperator"),
//   	evaluationPeriods: jsii.Number(123),
//
//   	// the properties below are optional
//   	actionsEnabled: jsii.Boolean(false),
//   	alarmActions: []*string{
//   		jsii.String("alarmActions"),
//   	},
//   	alarmDescription: jsii.String("alarmDescription"),
//   	alarmName: jsii.String("alarmName"),
//   	datapointsToAlarm: jsii.Number(123),
//   	dimensions: []interface{}{
//   		&dimensionProperty{
//   			name: jsii.String("name"),
//   			value: jsii.String("value"),
//   		},
//   	},
//   	evaluateLowSampleCountPercentile: jsii.String("evaluateLowSampleCountPercentile"),
//   	extendedStatistic: jsii.String("extendedStatistic"),
//   	insufficientDataActions: []*string{
//   		jsii.String("insufficientDataActions"),
//   	},
//   	metricName: jsii.String("metricName"),
//   	metrics: []interface{}{
//   		&metricDataQueryProperty{
//   			id: jsii.String("id"),
//
//   			// the properties below are optional
//   			accountId: jsii.String("accountId"),
//   			expression: jsii.String("expression"),
//   			label: jsii.String("label"),
//   			metricStat: &metricStatProperty{
//   				metric: &metricProperty{
//   					dimensions: []interface{}{
//   						&dimensionProperty{
//   							name: jsii.String("name"),
//   							value: jsii.String("value"),
//   						},
//   					},
//   					metricName: jsii.String("metricName"),
//   					namespace: jsii.String("namespace"),
//   				},
//   				period: jsii.Number(123),
//   				stat: jsii.String("stat"),
//
//   				// the properties below are optional
//   				unit: jsii.String("unit"),
//   			},
//   			period: jsii.Number(123),
//   			returnData: jsii.Boolean(false),
//   		},
//   	},
//   	namespace: jsii.String("namespace"),
//   	okActions: []*string{
//   		jsii.String("okActions"),
//   	},
//   	period: jsii.Number(123),
//   	statistic: jsii.String("statistic"),
//   	threshold: jsii.Number(123),
//   	thresholdMetricId: jsii.String("thresholdMetricId"),
//   	treatMissingData: jsii.String("treatMissingData"),
//   	unit: jsii.String("unit"),
//   })
//
type CfnAlarm interface {
	awscdk.CfnResource
	awscdk.IInspectable
	// Indicates whether actions should be executed during any changes to the alarm state.
	//
	// The default is TRUE.
	ActionsEnabled() interface{}
	SetActionsEnabled(val interface{})
	// The list of actions to execute when this alarm transitions into an ALARM state from any other state.
	//
	// Specify each action as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutMetricAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html) in the *Amazon CloudWatch API Reference* .
	AlarmActions() *[]*string
	SetAlarmActions(val *[]*string)
	// The description of the alarm.
	AlarmDescription() *string
	SetAlarmDescription(val *string)
	// The name of the alarm.
	//
	// If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the alarm name.
	//
	// > If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
	AlarmName() *string
	SetAlarmName(val *string)
	// The ARN of the CloudWatch alarm, such as `arn:aws:cloudwatch:us-west-2:123456789012:alarm:myCloudWatchAlarm-CPUAlarm-UXMMZK36R55Z` .
	AttrArn() *string
	// Options for this resource, such as condition, update policy etc.
	// Experimental.
	CfnOptions() awscdk.ICfnResourceOptions
	CfnProperties() *map[string]interface{}
	// AWS resource type.
	// Experimental.
	CfnResourceType() *string
	// The arithmetic operation to use when comparing the specified statistic and threshold.
	//
	// The specified statistic value is used as the first operand.
	//
	// You can specify the following values: `GreaterThanThreshold` , `GreaterThanOrEqualToThreshold` , `LessThanThreshold` , or `LessThanOrEqualToThreshold` .
	ComparisonOperator() *string
	SetComparisonOperator(val *string)
	// Returns: the stack trace of the point where this Resource was created from, sourced
	// from the +metadata+ entry typed +aws:cdk:logicalId+, and with the bottom-most
	// node +internal+ entries filtered.
	// Experimental.
	CreationStack() *[]*string
	// The number of datapoints that must be breaching to trigger the alarm.
	//
	// This is used only if you are setting an "M out of N" alarm. In that case, this value is the M, and the value that you set for `EvaluationPeriods` is the N value. For more information, see [Evaluating an Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the *Amazon CloudWatch User Guide* .
	//
	// If you omit this parameter, CloudWatch uses the same value here that you set for `EvaluationPeriods` , and the alarm goes to alarm state if that many consecutive periods are breaching.
	DatapointsToAlarm() *float64
	SetDatapointsToAlarm(val *float64)
	// The dimensions for the metric associated with the alarm.
	//
	// For an alarm based on a math expression, you can't specify `Dimensions` . Instead, you use `Metrics` .
	Dimensions() interface{}
	SetDimensions(val interface{})
	// Used only for alarms based on percentiles.
	//
	// If `ignore` , the alarm state does not change during periods with too few data points to be statistically significant. If `evaluate` or this parameter is not used, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	EvaluateLowSampleCountPercentile() *string
	SetEvaluateLowSampleCountPercentile(val *string)
	// The number of periods over which data is compared to the specified threshold.
	//
	// If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an "M out of N" alarm, this value is the N, and `DatapointsToAlarm` is the M.
	//
	// For more information, see [Evaluating an Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the *Amazon CloudWatch User Guide* .
	EvaluationPeriods() *float64
	SetEvaluationPeriods(val *float64)
	// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
	//
	// For an alarm based on a metric, you must specify either `Statistic` or `ExtendedStatistic` but not both.
	//
	// For an alarm based on a math expression, you can't specify `ExtendedStatistic` . Instead, you use `Metrics` .
	ExtendedStatistic() *string
	SetExtendedStatistic(val *string)
	// The actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state.
	//
	// Each action is specified as an Amazon Resource Name (ARN).
	InsufficientDataActions() *[]*string
	SetInsufficientDataActions(val *[]*string)
	// The logical ID for this CloudFormation stack element.
	//
	// The logical ID of the element
	// is calculated from the path of the resource node in the construct tree.
	//
	// To override this value, use `overrideLogicalId(newLogicalId)`.
	//
	// Returns: the logical ID as a stringified token. This value will only get
	// resolved during synthesis.
	// Experimental.
	LogicalId() *string
	// The name of the metric associated with the alarm.
	//
	// This is required for an alarm based on a metric. For an alarm based on a math expression, you use `Metrics` instead and you can't specify `MetricName` .
	MetricName() *string
	SetMetricName(val *string)
	// An array that enables you to create an alarm based on the result of a metric math expression.
	//
	// Each item in the array either retrieves a metric or performs a math expression.
	//
	// If you specify the `Metrics` parameter, you cannot specify `MetricName` , `Dimensions` , `Period` , `Namespace` , `Statistic` , `ExtendedStatistic` , or `Unit` .
	Metrics() interface{}
	SetMetrics(val interface{})
	// The namespace of the metric associated with the alarm.
	//
	// This is required for an alarm based on a metric. For an alarm based on a math expression, you can't specify `Namespace` and you use `Metrics` instead.
	//
	// For a list of namespaces for metrics from AWS services, see [AWS Services That Publish CloudWatch Metrics.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html)
	Namespace() *string
	SetNamespace(val *string)
	// The construct tree node associated with this construct.
	// Experimental.
	Node() awscdk.ConstructNode
	// The actions to execute when this alarm transitions to the `OK` state from any other state.
	//
	// Each action is specified as an Amazon Resource Name (ARN).
	OkActions() *[]*string
	SetOkActions(val *[]*string)
	// The period, in seconds, over which the statistic is applied.
	//
	// This is required for an alarm based on a metric. Valid values are 10, 30, 60, and any multiple of 60.
	//
	// For an alarm based on a math expression, you can't specify `Period` , and instead you use the `Metrics` parameter.
	//
	// *Minimum:* 10.
	Period() *float64
	SetPeriod(val *float64)
	// Return a string that will be resolved to a CloudFormation `{ Ref }` for this element.
	//
	// If, by any chance, the intrinsic reference of a resource is not a string, you could
	// coerce it to an IResolvable through `Lazy.any({ produce: resource.ref })`.
	// Experimental.
	Ref() *string
	// The stack in which this element is defined.
	//
	// CfnElements must be defined within a stack scope (directly or indirectly).
	// Experimental.
	Stack() awscdk.Stack
	// The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use `ExtendedStatistic` .
	//
	// For an alarm based on a metric, you must specify either `Statistic` or `ExtendedStatistic` but not both.
	//
	// For an alarm based on a math expression, you can't specify `Statistic` . Instead, you use `Metrics` .
	Statistic() *string
	SetStatistic(val *string)
	// The value to compare with the specified statistic.
	Threshold() *float64
	SetThreshold(val *float64)
	// In an alarm based on an anomaly detection model, this is the ID of the `ANOMALY_DETECTION_BAND` function used as the threshold for the alarm.
	ThresholdMetricId() *string
	SetThresholdMetricId(val *string)
	// Sets how this alarm is to handle missing data points.
	//
	// Valid values are `breaching` , `notBreaching` , `ignore` , and `missing` . For more information, see [Configuring How CloudWatch Alarms Treat Missing Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data) in the *Amazon CloudWatch User Guide* .
	//
	// If you omit this parameter, the default behavior of `missing` is used.
	TreatMissingData() *string
	SetTreatMissingData(val *string)
	// The unit of the metric associated with the alarm.
	//
	// Specify this only if you are creating an alarm based on a single metric. Do not specify this if you are specifying a `Metrics` array.
	//
	// You can specify the following values: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.
	Unit() *string
	SetUnit(val *string)
	// Return properties modified after initiation.
	//
	// Resources that expose mutable properties should override this function to
	// collect and return the properties object for this resource.
	// Experimental.
	UpdatedProperites() *map[string]interface{}
	// Syntactic sugar for `addOverride(path, undefined)`.
	// Experimental.
	AddDeletionOverride(path *string)
	// Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.
	//
	// This can be used for resources across stacks (or nested stack) boundaries
	// and the dependency will automatically be transferred to the relevant scope.
	// Experimental.
	AddDependsOn(target awscdk.CfnResource)
	// Add a value to the CloudFormation Resource Metadata.
	// See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
	//
	// Note that this is a different set of metadata from CDK node metadata; this
	// metadata ends up in the stack template under the resource, whereas CDK
	// node metadata ends up in the Cloud Assembly.
	//
	// Experimental.
	AddMetadata(key *string, value interface{})
	// Adds an override to the synthesized CloudFormation resource.
	//
	// To add a
	// property override, either use `addPropertyOverride` or prefix `path` with
	// "Properties." (i.e. `Properties.TopicName`).
	//
	// If the override is nested, separate each nested level using a dot (.) in the path parameter.
	// If there is an array as part of the nesting, specify the index in the path.
	//
	// To include a literal `.` in the property name, prefix with a `\`. In most
	// programming languages you will need to write this as `"\\."` because the
	// `\` itself will need to be escaped.
	//
	// For example,
	// ```typescript
	// cfnResource.addOverride('Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes', ['myattribute']);
	// cfnResource.addOverride('Properties.GlobalSecondaryIndexes.1.ProjectionType', 'INCLUDE');
	// ```
	// would add the overrides
	// ```json
	// "Properties": {
	//    "GlobalSecondaryIndexes": [
	//      {
	//        "Projection": {
	//          "NonKeyAttributes": [ "myattribute" ]
	//          ...
	//        }
	//        ...
	//      },
	//      {
	//        "ProjectionType": "INCLUDE"
	//        ...
	//      },
	//    ]
	//    ...
	// }
	// ```
	//
	// The `value` argument to `addOverride` will not be processed or translated
	// in any way. Pass raw JSON values in here with the correct capitalization
	// for CloudFormation. If you pass CDK classes or structs, they will be
	// rendered with lowercased key names, and CloudFormation will reject the
	// template.
	// Experimental.
	AddOverride(path *string, value interface{})
	// Adds an override that deletes the value of a property from the resource definition.
	// Experimental.
	AddPropertyDeletionOverride(propertyPath *string)
	// Adds an override to a resource property.
	//
	// Syntactic sugar for `addOverride("Properties.<...>", value)`.
	// Experimental.
	AddPropertyOverride(propertyPath *string, value interface{})
	// Sets the deletion policy of the resource based on the removal policy specified.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy, options *awscdk.RemovalPolicyOptions)
	// Returns a token for an runtime attribute of this resource.
	//
	// Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility
	// in case there is no generated attribute.
	// Experimental.
	GetAtt(attributeName *string) awscdk.Reference
	// Retrieve a value value from the CloudFormation Resource Metadata.
	// See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
	//
	// Note that this is a different set of metadata from CDK node metadata; this
	// metadata ends up in the stack template under the resource, whereas CDK
	// node metadata ends up in the Cloud Assembly.
	//
	// Experimental.
	GetMetadata(key *string) interface{}
	// Examines the CloudFormation resource and discloses attributes.
	Inspect(inspector awscdk.TreeInspector)
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	OnValidate() *[]*string
	// Overrides the auto-generated logical ID with a specific ID.
	// Experimental.
	OverrideLogicalId(newLogicalId *string)
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	Prepare()
	RenderProperties(props *map[string]interface{}) *map[string]interface{}
	// Can be overridden by subclasses to determine if this resource will be rendered into the cloudformation template.
	//
	// Returns: `true` if the resource should be included or `false` is the resource
	// should be omitted.
	// Experimental.
	ShouldSynthesize() *bool
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	Synthesize(session awscdk.ISynthesisSession)
	// Returns a string representation of this construct.
	//
	// Returns: a string representation of this resource.
	// Experimental.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	Validate() *[]*string
	// Experimental.
	ValidateProperties(_properties interface{})
}

// The jsii proxy struct for CfnAlarm
type jsiiProxy_CfnAlarm struct {
	internal.Type__awscdkCfnResource
	internal.Type__awscdkIInspectable
}

func (j *jsiiProxy_CfnAlarm) ActionsEnabled() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"actionsEnabled",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) AlarmActions() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"alarmActions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) AlarmDescription() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alarmDescription",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) AlarmName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alarmName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) AttrArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"attrArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) CfnOptions() awscdk.ICfnResourceOptions {
	var returns awscdk.ICfnResourceOptions
	_jsii_.Get(
		j,
		"cfnOptions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) CfnProperties() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"cfnProperties",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) CfnResourceType() *string {
	var returns *string
	_jsii_.Get(
		j,
		"cfnResourceType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) ComparisonOperator() *string {
	var returns *string
	_jsii_.Get(
		j,
		"comparisonOperator",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) CreationStack() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"creationStack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) DatapointsToAlarm() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"datapointsToAlarm",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) Dimensions() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"dimensions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) EvaluateLowSampleCountPercentile() *string {
	var returns *string
	_jsii_.Get(
		j,
		"evaluateLowSampleCountPercentile",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) EvaluationPeriods() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"evaluationPeriods",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) ExtendedStatistic() *string {
	var returns *string
	_jsii_.Get(
		j,
		"extendedStatistic",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) InsufficientDataActions() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"insufficientDataActions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) LogicalId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"logicalId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) MetricName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"metricName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) Metrics() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"metrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) Namespace() *string {
	var returns *string
	_jsii_.Get(
		j,
		"namespace",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) Node() awscdk.ConstructNode {
	var returns awscdk.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) OkActions() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"okActions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) Period() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"period",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) Ref() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ref",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) Statistic() *string {
	var returns *string
	_jsii_.Get(
		j,
		"statistic",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) Threshold() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"threshold",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) ThresholdMetricId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"thresholdMetricId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) TreatMissingData() *string {
	var returns *string
	_jsii_.Get(
		j,
		"treatMissingData",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) Unit() *string {
	var returns *string
	_jsii_.Get(
		j,
		"unit",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAlarm) UpdatedProperites() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"updatedProperites",
		&returns,
	)
	return returns
}


// Create a new `AWS::CloudWatch::Alarm`.
func NewCfnAlarm(scope awscdk.Construct, id *string, props *CfnAlarmProps) CfnAlarm {
	_init_.Initialize()

	j := jsiiProxy_CfnAlarm{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.CfnAlarm",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Create a new `AWS::CloudWatch::Alarm`.
func NewCfnAlarm_Override(c CfnAlarm, scope awscdk.Construct, id *string, props *CfnAlarmProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.CfnAlarm",
		[]interface{}{scope, id, props},
		c,
	)
}

func (j *jsiiProxy_CfnAlarm) SetActionsEnabled(val interface{}) {
	_jsii_.Set(
		j,
		"actionsEnabled",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetAlarmActions(val *[]*string) {
	_jsii_.Set(
		j,
		"alarmActions",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetAlarmDescription(val *string) {
	_jsii_.Set(
		j,
		"alarmDescription",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetAlarmName(val *string) {
	_jsii_.Set(
		j,
		"alarmName",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetComparisonOperator(val *string) {
	_jsii_.Set(
		j,
		"comparisonOperator",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetDatapointsToAlarm(val *float64) {
	_jsii_.Set(
		j,
		"datapointsToAlarm",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetDimensions(val interface{}) {
	_jsii_.Set(
		j,
		"dimensions",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetEvaluateLowSampleCountPercentile(val *string) {
	_jsii_.Set(
		j,
		"evaluateLowSampleCountPercentile",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetEvaluationPeriods(val *float64) {
	_jsii_.Set(
		j,
		"evaluationPeriods",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetExtendedStatistic(val *string) {
	_jsii_.Set(
		j,
		"extendedStatistic",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetInsufficientDataActions(val *[]*string) {
	_jsii_.Set(
		j,
		"insufficientDataActions",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetMetricName(val *string) {
	_jsii_.Set(
		j,
		"metricName",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetMetrics(val interface{}) {
	_jsii_.Set(
		j,
		"metrics",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetNamespace(val *string) {
	_jsii_.Set(
		j,
		"namespace",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetOkActions(val *[]*string) {
	_jsii_.Set(
		j,
		"okActions",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetPeriod(val *float64) {
	_jsii_.Set(
		j,
		"period",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetStatistic(val *string) {
	_jsii_.Set(
		j,
		"statistic",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetThreshold(val *float64) {
	_jsii_.Set(
		j,
		"threshold",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetThresholdMetricId(val *string) {
	_jsii_.Set(
		j,
		"thresholdMetricId",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetTreatMissingData(val *string) {
	_jsii_.Set(
		j,
		"treatMissingData",
		val,
	)
}

func (j *jsiiProxy_CfnAlarm) SetUnit(val *string) {
	_jsii_.Set(
		j,
		"unit",
		val,
	)
}

// Returns `true` if a construct is a stack element (i.e. part of the synthesized cloudformation template).
//
// Uses duck-typing instead of `instanceof` to allow stack elements from different
// versions of this library to be included in the same stack.
//
// Returns: The construct as a stack element or undefined if it is not a stack element.
// Experimental.
func CfnAlarm_IsCfnElement(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnAlarm",
		"isCfnElement",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a CfnResource.
// Experimental.
func CfnAlarm_IsCfnResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnAlarm",
		"isCfnResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Return whether the given object is a Construct.
// Experimental.
func CfnAlarm_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnAlarm",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func CfnAlarm_CFN_RESOURCE_TYPE_NAME() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"monocdk.aws_cloudwatch.CfnAlarm",
		"CFN_RESOURCE_TYPE_NAME",
		&returns,
	)
	return returns
}

func (c *jsiiProxy_CfnAlarm) AddDeletionOverride(path *string) {
	_jsii_.InvokeVoid(
		c,
		"addDeletionOverride",
		[]interface{}{path},
	)
}

func (c *jsiiProxy_CfnAlarm) AddDependsOn(target awscdk.CfnResource) {
	_jsii_.InvokeVoid(
		c,
		"addDependsOn",
		[]interface{}{target},
	)
}

func (c *jsiiProxy_CfnAlarm) AddMetadata(key *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addMetadata",
		[]interface{}{key, value},
	)
}

func (c *jsiiProxy_CfnAlarm) AddOverride(path *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addOverride",
		[]interface{}{path, value},
	)
}

func (c *jsiiProxy_CfnAlarm) AddPropertyDeletionOverride(propertyPath *string) {
	_jsii_.InvokeVoid(
		c,
		"addPropertyDeletionOverride",
		[]interface{}{propertyPath},
	)
}

func (c *jsiiProxy_CfnAlarm) AddPropertyOverride(propertyPath *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addPropertyOverride",
		[]interface{}{propertyPath, value},
	)
}

func (c *jsiiProxy_CfnAlarm) ApplyRemovalPolicy(policy awscdk.RemovalPolicy, options *awscdk.RemovalPolicyOptions) {
	_jsii_.InvokeVoid(
		c,
		"applyRemovalPolicy",
		[]interface{}{policy, options},
	)
}

func (c *jsiiProxy_CfnAlarm) GetAtt(attributeName *string) awscdk.Reference {
	var returns awscdk.Reference

	_jsii_.Invoke(
		c,
		"getAtt",
		[]interface{}{attributeName},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnAlarm) GetMetadata(key *string) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"getMetadata",
		[]interface{}{key},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnAlarm) Inspect(inspector awscdk.TreeInspector) {
	_jsii_.InvokeVoid(
		c,
		"inspect",
		[]interface{}{inspector},
	)
}

func (c *jsiiProxy_CfnAlarm) OnPrepare() {
	_jsii_.InvokeVoid(
		c,
		"onPrepare",
		nil, // no parameters
	)
}

func (c *jsiiProxy_CfnAlarm) OnSynthesize(session constructs.ISynthesisSession) {
	_jsii_.InvokeVoid(
		c,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (c *jsiiProxy_CfnAlarm) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		c,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnAlarm) OverrideLogicalId(newLogicalId *string) {
	_jsii_.InvokeVoid(
		c,
		"overrideLogicalId",
		[]interface{}{newLogicalId},
	)
}

func (c *jsiiProxy_CfnAlarm) Prepare() {
	_jsii_.InvokeVoid(
		c,
		"prepare",
		nil, // no parameters
	)
}

func (c *jsiiProxy_CfnAlarm) RenderProperties(props *map[string]interface{}) *map[string]interface{} {
	var returns *map[string]interface{}

	_jsii_.Invoke(
		c,
		"renderProperties",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnAlarm) ShouldSynthesize() *bool {
	var returns *bool

	_jsii_.Invoke(
		c,
		"shouldSynthesize",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnAlarm) Synthesize(session awscdk.ISynthesisSession) {
	_jsii_.InvokeVoid(
		c,
		"synthesize",
		[]interface{}{session},
	)
}

func (c *jsiiProxy_CfnAlarm) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnAlarm) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		c,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnAlarm) ValidateProperties(_properties interface{}) {
	_jsii_.InvokeVoid(
		c,
		"validateProperties",
		[]interface{}{_properties},
	)
}

// Dimension is an embedded property of the `AWS::CloudWatch::Alarm` type.
//
// Dimensions are name/value pairs that can be associated with a CloudWatch metric. You can specify a maximum of 10 dimensions for a given metric.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   dimensionProperty := &dimensionProperty{
//   	name: jsii.String("name"),
//   	value: jsii.String("value"),
//   }
//
type CfnAlarm_DimensionProperty struct {
	// The name of the dimension, from 1–255 characters in length.
	//
	// This dimension name must have been included when the metric was published.
	Name *string `json:"name" yaml:"name"`
	// The value for the dimension, from 1–255 characters in length.
	Value *string `json:"value" yaml:"value"`
}

// The `MetricDataQuery` property type specifies the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a math expression on metric data.
//
// Any expression used must return a single time series. For more information, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *Amazon CloudWatch User Guide* .
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   metricDataQueryProperty := &metricDataQueryProperty{
//   	id: jsii.String("id"),
//
//   	// the properties below are optional
//   	accountId: jsii.String("accountId"),
//   	expression: jsii.String("expression"),
//   	label: jsii.String("label"),
//   	metricStat: &metricStatProperty{
//   		metric: &metricProperty{
//   			dimensions: []interface{}{
//   				&dimensionProperty{
//   					name: jsii.String("name"),
//   					value: jsii.String("value"),
//   				},
//   			},
//   			metricName: jsii.String("metricName"),
//   			namespace: jsii.String("namespace"),
//   		},
//   		period: jsii.Number(123),
//   		stat: jsii.String("stat"),
//
//   		// the properties below are optional
//   		unit: jsii.String("unit"),
//   	},
//   	period: jsii.Number(123),
//   	returnData: jsii.Boolean(false),
//   }
//
type CfnAlarm_MetricDataQueryProperty struct {
	// A short name used to tie this object to the results in the response.
	//
	// This name must be unique within a single call to `GetMetricData` . If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
	Id *string `json:"id" yaml:"id"`
	// The ID of the account where the metrics are located, if this is a cross-account alarm.
	AccountId *string `json:"accountId" yaml:"accountId"`
	// The math expression to be performed on the returned data, if this object is performing a math expression.
	//
	// This expression can use the `Id` of the other metrics to refer to those metrics, and can also use the `Id` of other expressions to use the result of those expressions. For more information about metric math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *Amazon CloudWatch User Guide* .
	//
	// Within each MetricDataQuery object, you must specify either `Expression` or `MetricStat` but not both.
	Expression *string `json:"expression" yaml:"expression"`
	// A human-readable label for this metric or expression.
	//
	// This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CloudWatch dashboard widget, the label is shown. If `Label` is omitted, CloudWatch generates a default.
	Label *string `json:"label" yaml:"label"`
	// The metric to be returned, along with statistics, period, and units.
	//
	// Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
	//
	// Within one MetricDataQuery object, you must specify either `Expression` or `MetricStat` but not both.
	MetricStat interface{} `json:"metricStat" yaml:"metricStat"`
	// The granularity, in seconds, of the returned data points.
	//
	// For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a `PutMetricData` operation that includes a `StorageResolution of 1 second` .
	Period *float64 `json:"period" yaml:"period"`
	// This option indicates whether to return the timestamps and raw data values of this metric.
	//
	// When you create an alarm based on a metric math expression, specify `True` for this value for only the one math expression that the alarm is based on. You must specify `False` for `ReturnData` for all the other metrics and expressions used in the alarm.
	//
	// This field is required.
	ReturnData interface{} `json:"returnData" yaml:"returnData"`
}

// The `Metric` property type represents a specific metric.
//
// `Metric` is a property of the [MetricStat](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html) property type.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   metricProperty := &metricProperty{
//   	dimensions: []interface{}{
//   		&dimensionProperty{
//   			name: jsii.String("name"),
//   			value: jsii.String("value"),
//   		},
//   	},
//   	metricName: jsii.String("metricName"),
//   	namespace: jsii.String("namespace"),
//   }
//
type CfnAlarm_MetricProperty struct {
	// The metric dimensions that you want to be used for the metric that the alarm will watch..
	Dimensions interface{} `json:"dimensions" yaml:"dimensions"`
	// The name of the metric that you want the alarm to watch.
	//
	// This is a required field.
	MetricName *string `json:"metricName" yaml:"metricName"`
	// The namespace of the metric that the alarm will watch.
	Namespace *string `json:"namespace" yaml:"namespace"`
}

// This structure defines the metric to be returned, along with the statistics, period, and units.
//
// `MetricStat` is a property of the [MetricDataQuery](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html) property type.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   metricStatProperty := &metricStatProperty{
//   	metric: &metricProperty{
//   		dimensions: []interface{}{
//   			&dimensionProperty{
//   				name: jsii.String("name"),
//   				value: jsii.String("value"),
//   			},
//   		},
//   		metricName: jsii.String("metricName"),
//   		namespace: jsii.String("namespace"),
//   	},
//   	period: jsii.Number(123),
//   	stat: jsii.String("stat"),
//
//   	// the properties below are optional
//   	unit: jsii.String("unit"),
//   }
//
type CfnAlarm_MetricStatProperty struct {
	// The metric to return, including the metric name, namespace, and dimensions.
	Metric interface{} `json:"metric" yaml:"metric"`
	// The granularity, in seconds, of the returned data points.
	//
	// For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a `PutMetricData` call that includes a `StorageResolution` of 1 second.
	//
	// If the `StartTime` parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:
	//
	// - Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).
	// - Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).
	// - Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).
	Period *float64 `json:"period" yaml:"period"`
	// The statistic to return.
	//
	// It can include any CloudWatch statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the *Amazon CloudWatch User Guide* .
	Stat *string `json:"stat" yaml:"stat"`
	// The unit to use for the returned data points.
	//
	// Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.
	Unit *string `json:"unit" yaml:"unit"`
}

// Properties for defining a `CfnAlarm`.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   cfnAlarmProps := &cfnAlarmProps{
//   	comparisonOperator: jsii.String("comparisonOperator"),
//   	evaluationPeriods: jsii.Number(123),
//
//   	// the properties below are optional
//   	actionsEnabled: jsii.Boolean(false),
//   	alarmActions: []*string{
//   		jsii.String("alarmActions"),
//   	},
//   	alarmDescription: jsii.String("alarmDescription"),
//   	alarmName: jsii.String("alarmName"),
//   	datapointsToAlarm: jsii.Number(123),
//   	dimensions: []interface{}{
//   		&dimensionProperty{
//   			name: jsii.String("name"),
//   			value: jsii.String("value"),
//   		},
//   	},
//   	evaluateLowSampleCountPercentile: jsii.String("evaluateLowSampleCountPercentile"),
//   	extendedStatistic: jsii.String("extendedStatistic"),
//   	insufficientDataActions: []*string{
//   		jsii.String("insufficientDataActions"),
//   	},
//   	metricName: jsii.String("metricName"),
//   	metrics: []interface{}{
//   		&metricDataQueryProperty{
//   			id: jsii.String("id"),
//
//   			// the properties below are optional
//   			accountId: jsii.String("accountId"),
//   			expression: jsii.String("expression"),
//   			label: jsii.String("label"),
//   			metricStat: &metricStatProperty{
//   				metric: &metricProperty{
//   					dimensions: []interface{}{
//   						&dimensionProperty{
//   							name: jsii.String("name"),
//   							value: jsii.String("value"),
//   						},
//   					},
//   					metricName: jsii.String("metricName"),
//   					namespace: jsii.String("namespace"),
//   				},
//   				period: jsii.Number(123),
//   				stat: jsii.String("stat"),
//
//   				// the properties below are optional
//   				unit: jsii.String("unit"),
//   			},
//   			period: jsii.Number(123),
//   			returnData: jsii.Boolean(false),
//   		},
//   	},
//   	namespace: jsii.String("namespace"),
//   	okActions: []*string{
//   		jsii.String("okActions"),
//   	},
//   	period: jsii.Number(123),
//   	statistic: jsii.String("statistic"),
//   	threshold: jsii.Number(123),
//   	thresholdMetricId: jsii.String("thresholdMetricId"),
//   	treatMissingData: jsii.String("treatMissingData"),
//   	unit: jsii.String("unit"),
//   }
//
type CfnAlarmProps struct {
	// The arithmetic operation to use when comparing the specified statistic and threshold.
	//
	// The specified statistic value is used as the first operand.
	//
	// You can specify the following values: `GreaterThanThreshold` , `GreaterThanOrEqualToThreshold` , `LessThanThreshold` , or `LessThanOrEqualToThreshold` .
	ComparisonOperator *string `json:"comparisonOperator" yaml:"comparisonOperator"`
	// The number of periods over which data is compared to the specified threshold.
	//
	// If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an "M out of N" alarm, this value is the N, and `DatapointsToAlarm` is the M.
	//
	// For more information, see [Evaluating an Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the *Amazon CloudWatch User Guide* .
	EvaluationPeriods *float64 `json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether actions should be executed during any changes to the alarm state.
	//
	// The default is TRUE.
	ActionsEnabled interface{} `json:"actionsEnabled" yaml:"actionsEnabled"`
	// The list of actions to execute when this alarm transitions into an ALARM state from any other state.
	//
	// Specify each action as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutMetricAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html) in the *Amazon CloudWatch API Reference* .
	AlarmActions *[]*string `json:"alarmActions" yaml:"alarmActions"`
	// The description of the alarm.
	AlarmDescription *string `json:"alarmDescription" yaml:"alarmDescription"`
	// The name of the alarm.
	//
	// If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the alarm name.
	//
	// > If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
	AlarmName *string `json:"alarmName" yaml:"alarmName"`
	// The number of datapoints that must be breaching to trigger the alarm.
	//
	// This is used only if you are setting an "M out of N" alarm. In that case, this value is the M, and the value that you set for `EvaluationPeriods` is the N value. For more information, see [Evaluating an Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the *Amazon CloudWatch User Guide* .
	//
	// If you omit this parameter, CloudWatch uses the same value here that you set for `EvaluationPeriods` , and the alarm goes to alarm state if that many consecutive periods are breaching.
	DatapointsToAlarm *float64 `json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// The dimensions for the metric associated with the alarm.
	//
	// For an alarm based on a math expression, you can't specify `Dimensions` . Instead, you use `Metrics` .
	Dimensions interface{} `json:"dimensions" yaml:"dimensions"`
	// Used only for alarms based on percentiles.
	//
	// If `ignore` , the alarm state does not change during periods with too few data points to be statistically significant. If `evaluate` or this parameter is not used, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	EvaluateLowSampleCountPercentile *string `json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
	//
	// For an alarm based on a metric, you must specify either `Statistic` or `ExtendedStatistic` but not both.
	//
	// For an alarm based on a math expression, you can't specify `ExtendedStatistic` . Instead, you use `Metrics` .
	ExtendedStatistic *string `json:"extendedStatistic" yaml:"extendedStatistic"`
	// The actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state.
	//
	// Each action is specified as an Amazon Resource Name (ARN).
	InsufficientDataActions *[]*string `json:"insufficientDataActions" yaml:"insufficientDataActions"`
	// The name of the metric associated with the alarm.
	//
	// This is required for an alarm based on a metric. For an alarm based on a math expression, you use `Metrics` instead and you can't specify `MetricName` .
	MetricName *string `json:"metricName" yaml:"metricName"`
	// An array that enables you to create an alarm based on the result of a metric math expression.
	//
	// Each item in the array either retrieves a metric or performs a math expression.
	//
	// If you specify the `Metrics` parameter, you cannot specify `MetricName` , `Dimensions` , `Period` , `Namespace` , `Statistic` , `ExtendedStatistic` , or `Unit` .
	Metrics interface{} `json:"metrics" yaml:"metrics"`
	// The namespace of the metric associated with the alarm.
	//
	// This is required for an alarm based on a metric. For an alarm based on a math expression, you can't specify `Namespace` and you use `Metrics` instead.
	//
	// For a list of namespaces for metrics from AWS services, see [AWS Services That Publish CloudWatch Metrics.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html)
	Namespace *string `json:"namespace" yaml:"namespace"`
	// The actions to execute when this alarm transitions to the `OK` state from any other state.
	//
	// Each action is specified as an Amazon Resource Name (ARN).
	OkActions *[]*string `json:"okActions" yaml:"okActions"`
	// The period, in seconds, over which the statistic is applied.
	//
	// This is required for an alarm based on a metric. Valid values are 10, 30, 60, and any multiple of 60.
	//
	// For an alarm based on a math expression, you can't specify `Period` , and instead you use the `Metrics` parameter.
	//
	// *Minimum:* 10.
	Period *float64 `json:"period" yaml:"period"`
	// The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use `ExtendedStatistic` .
	//
	// For an alarm based on a metric, you must specify either `Statistic` or `ExtendedStatistic` but not both.
	//
	// For an alarm based on a math expression, you can't specify `Statistic` . Instead, you use `Metrics` .
	Statistic *string `json:"statistic" yaml:"statistic"`
	// The value to compare with the specified statistic.
	Threshold *float64 `json:"threshold" yaml:"threshold"`
	// In an alarm based on an anomaly detection model, this is the ID of the `ANOMALY_DETECTION_BAND` function used as the threshold for the alarm.
	ThresholdMetricId *string `json:"thresholdMetricId" yaml:"thresholdMetricId"`
	// Sets how this alarm is to handle missing data points.
	//
	// Valid values are `breaching` , `notBreaching` , `ignore` , and `missing` . For more information, see [Configuring How CloudWatch Alarms Treat Missing Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data) in the *Amazon CloudWatch User Guide* .
	//
	// If you omit this parameter, the default behavior of `missing` is used.
	TreatMissingData *string `json:"treatMissingData" yaml:"treatMissingData"`
	// The unit of the metric associated with the alarm.
	//
	// Specify this only if you are creating an alarm based on a single metric. Do not specify this if you are specifying a `Metrics` array.
	//
	// You can specify the following values: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.
	Unit *string `json:"unit" yaml:"unit"`
}

// A CloudFormation `AWS::CloudWatch::AnomalyDetector`.
//
// The `AWS::CloudWatch::AnomalyDetector` type specifies an anomaly detection band for a certain metric and statistic. The band represents the expected "normal" range for the metric values. Anomaly detection bands can be used for visualization of a metric's expected values, and for alarms.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   cfnAnomalyDetector := cloudwatch.NewCfnAnomalyDetector(this, jsii.String("MyCfnAnomalyDetector"), &cfnAnomalyDetectorProps{
//   	configuration: &configurationProperty{
//   		excludedTimeRanges: []interface{}{
//   			&rangeProperty{
//   				endTime: jsii.String("endTime"),
//   				startTime: jsii.String("startTime"),
//   			},
//   		},
//   		metricTimeZone: jsii.String("metricTimeZone"),
//   	},
//   	dimensions: []interface{}{
//   		&dimensionProperty{
//   			name: jsii.String("name"),
//   			value: jsii.String("value"),
//   		},
//   	},
//   	metricMathAnomalyDetector: &metricMathAnomalyDetectorProperty{
//   		metricDataQueries: []interface{}{
//   			&metricDataQueryProperty{
//   				id: jsii.String("id"),
//
//   				// the properties below are optional
//   				accountId: jsii.String("accountId"),
//   				expression: jsii.String("expression"),
//   				label: jsii.String("label"),
//   				metricStat: &metricStatProperty{
//   					metric: &metricProperty{
//   						metricName: jsii.String("metricName"),
//   						namespace: jsii.String("namespace"),
//
//   						// the properties below are optional
//   						dimensions: []interface{}{
//   							&dimensionProperty{
//   								name: jsii.String("name"),
//   								value: jsii.String("value"),
//   							},
//   						},
//   					},
//   					period: jsii.Number(123),
//   					stat: jsii.String("stat"),
//
//   					// the properties below are optional
//   					unit: jsii.String("unit"),
//   				},
//   				period: jsii.Number(123),
//   				returnData: jsii.Boolean(false),
//   			},
//   		},
//   	},
//   	metricName: jsii.String("metricName"),
//   	namespace: jsii.String("namespace"),
//   	singleMetricAnomalyDetector: &singleMetricAnomalyDetectorProperty{
//   		dimensions: []interface{}{
//   			&dimensionProperty{
//   				name: jsii.String("name"),
//   				value: jsii.String("value"),
//   			},
//   		},
//   		metricName: jsii.String("metricName"),
//   		namespace: jsii.String("namespace"),
//   		stat: jsii.String("stat"),
//   	},
//   	stat: jsii.String("stat"),
//   })
//
type CfnAnomalyDetector interface {
	awscdk.CfnResource
	awscdk.IInspectable
	// Options for this resource, such as condition, update policy etc.
	// Experimental.
	CfnOptions() awscdk.ICfnResourceOptions
	CfnProperties() *map[string]interface{}
	// AWS resource type.
	// Experimental.
	CfnResourceType() *string
	// Specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model.
	//
	// The configuration can also include the time zone to use for the metric.
	Configuration() interface{}
	SetConfiguration(val interface{})
	// Returns: the stack trace of the point where this Resource was created from, sourced
	// from the +metadata+ entry typed +aws:cdk:logicalId+, and with the bottom-most
	// node +internal+ entries filtered.
	// Experimental.
	CreationStack() *[]*string
	// The dimensions of the metric associated with the anomaly detection band.
	Dimensions() interface{}
	SetDimensions(val interface{})
	// The logical ID for this CloudFormation stack element.
	//
	// The logical ID of the element
	// is calculated from the path of the resource node in the construct tree.
	//
	// To override this value, use `overrideLogicalId(newLogicalId)`.
	//
	// Returns: the logical ID as a stringified token. This value will only get
	// resolved during synthesis.
	// Experimental.
	LogicalId() *string
	// The CloudWatch metric math expression for this anomaly detector.
	MetricMathAnomalyDetector() interface{}
	SetMetricMathAnomalyDetector(val interface{})
	// The name of the metric associated with the anomaly detection band.
	MetricName() *string
	SetMetricName(val *string)
	// The namespace of the metric associated with the anomaly detection band.
	Namespace() *string
	SetNamespace(val *string)
	// The construct tree node associated with this construct.
	// Experimental.
	Node() awscdk.ConstructNode
	// Return a string that will be resolved to a CloudFormation `{ Ref }` for this element.
	//
	// If, by any chance, the intrinsic reference of a resource is not a string, you could
	// coerce it to an IResolvable through `Lazy.any({ produce: resource.ref })`.
	// Experimental.
	Ref() *string
	// The CloudWatch metric and statistic for this anomaly detector.
	SingleMetricAnomalyDetector() interface{}
	SetSingleMetricAnomalyDetector(val interface{})
	// The stack in which this element is defined.
	//
	// CfnElements must be defined within a stack scope (directly or indirectly).
	// Experimental.
	Stack() awscdk.Stack
	// The statistic of the metric associated with the anomaly detection band.
	Stat() *string
	SetStat(val *string)
	// Return properties modified after initiation.
	//
	// Resources that expose mutable properties should override this function to
	// collect and return the properties object for this resource.
	// Experimental.
	UpdatedProperites() *map[string]interface{}
	// Syntactic sugar for `addOverride(path, undefined)`.
	// Experimental.
	AddDeletionOverride(path *string)
	// Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.
	//
	// This can be used for resources across stacks (or nested stack) boundaries
	// and the dependency will automatically be transferred to the relevant scope.
	// Experimental.
	AddDependsOn(target awscdk.CfnResource)
	// Add a value to the CloudFormation Resource Metadata.
	// See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
	//
	// Note that this is a different set of metadata from CDK node metadata; this
	// metadata ends up in the stack template under the resource, whereas CDK
	// node metadata ends up in the Cloud Assembly.
	//
	// Experimental.
	AddMetadata(key *string, value interface{})
	// Adds an override to the synthesized CloudFormation resource.
	//
	// To add a
	// property override, either use `addPropertyOverride` or prefix `path` with
	// "Properties." (i.e. `Properties.TopicName`).
	//
	// If the override is nested, separate each nested level using a dot (.) in the path parameter.
	// If there is an array as part of the nesting, specify the index in the path.
	//
	// To include a literal `.` in the property name, prefix with a `\`. In most
	// programming languages you will need to write this as `"\\."` because the
	// `\` itself will need to be escaped.
	//
	// For example,
	// ```typescript
	// cfnResource.addOverride('Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes', ['myattribute']);
	// cfnResource.addOverride('Properties.GlobalSecondaryIndexes.1.ProjectionType', 'INCLUDE');
	// ```
	// would add the overrides
	// ```json
	// "Properties": {
	//    "GlobalSecondaryIndexes": [
	//      {
	//        "Projection": {
	//          "NonKeyAttributes": [ "myattribute" ]
	//          ...
	//        }
	//        ...
	//      },
	//      {
	//        "ProjectionType": "INCLUDE"
	//        ...
	//      },
	//    ]
	//    ...
	// }
	// ```
	//
	// The `value` argument to `addOverride` will not be processed or translated
	// in any way. Pass raw JSON values in here with the correct capitalization
	// for CloudFormation. If you pass CDK classes or structs, they will be
	// rendered with lowercased key names, and CloudFormation will reject the
	// template.
	// Experimental.
	AddOverride(path *string, value interface{})
	// Adds an override that deletes the value of a property from the resource definition.
	// Experimental.
	AddPropertyDeletionOverride(propertyPath *string)
	// Adds an override to a resource property.
	//
	// Syntactic sugar for `addOverride("Properties.<...>", value)`.
	// Experimental.
	AddPropertyOverride(propertyPath *string, value interface{})
	// Sets the deletion policy of the resource based on the removal policy specified.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy, options *awscdk.RemovalPolicyOptions)
	// Returns a token for an runtime attribute of this resource.
	//
	// Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility
	// in case there is no generated attribute.
	// Experimental.
	GetAtt(attributeName *string) awscdk.Reference
	// Retrieve a value value from the CloudFormation Resource Metadata.
	// See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
	//
	// Note that this is a different set of metadata from CDK node metadata; this
	// metadata ends up in the stack template under the resource, whereas CDK
	// node metadata ends up in the Cloud Assembly.
	//
	// Experimental.
	GetMetadata(key *string) interface{}
	// Examines the CloudFormation resource and discloses attributes.
	Inspect(inspector awscdk.TreeInspector)
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	OnValidate() *[]*string
	// Overrides the auto-generated logical ID with a specific ID.
	// Experimental.
	OverrideLogicalId(newLogicalId *string)
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	Prepare()
	RenderProperties(props *map[string]interface{}) *map[string]interface{}
	// Can be overridden by subclasses to determine if this resource will be rendered into the cloudformation template.
	//
	// Returns: `true` if the resource should be included or `false` is the resource
	// should be omitted.
	// Experimental.
	ShouldSynthesize() *bool
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	Synthesize(session awscdk.ISynthesisSession)
	// Returns a string representation of this construct.
	//
	// Returns: a string representation of this resource.
	// Experimental.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	Validate() *[]*string
	// Experimental.
	ValidateProperties(_properties interface{})
}

// The jsii proxy struct for CfnAnomalyDetector
type jsiiProxy_CfnAnomalyDetector struct {
	internal.Type__awscdkCfnResource
	internal.Type__awscdkIInspectable
}

func (j *jsiiProxy_CfnAnomalyDetector) CfnOptions() awscdk.ICfnResourceOptions {
	var returns awscdk.ICfnResourceOptions
	_jsii_.Get(
		j,
		"cfnOptions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) CfnProperties() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"cfnProperties",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) CfnResourceType() *string {
	var returns *string
	_jsii_.Get(
		j,
		"cfnResourceType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) Configuration() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"configuration",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) CreationStack() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"creationStack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) Dimensions() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"dimensions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) LogicalId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"logicalId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) MetricMathAnomalyDetector() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"metricMathAnomalyDetector",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) MetricName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"metricName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) Namespace() *string {
	var returns *string
	_jsii_.Get(
		j,
		"namespace",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) Node() awscdk.ConstructNode {
	var returns awscdk.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) Ref() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ref",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) SingleMetricAnomalyDetector() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"singleMetricAnomalyDetector",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) Stat() *string {
	var returns *string
	_jsii_.Get(
		j,
		"stat",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnAnomalyDetector) UpdatedProperites() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"updatedProperites",
		&returns,
	)
	return returns
}


// Create a new `AWS::CloudWatch::AnomalyDetector`.
func NewCfnAnomalyDetector(scope awscdk.Construct, id *string, props *CfnAnomalyDetectorProps) CfnAnomalyDetector {
	_init_.Initialize()

	j := jsiiProxy_CfnAnomalyDetector{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.CfnAnomalyDetector",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Create a new `AWS::CloudWatch::AnomalyDetector`.
func NewCfnAnomalyDetector_Override(c CfnAnomalyDetector, scope awscdk.Construct, id *string, props *CfnAnomalyDetectorProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.CfnAnomalyDetector",
		[]interface{}{scope, id, props},
		c,
	)
}

func (j *jsiiProxy_CfnAnomalyDetector) SetConfiguration(val interface{}) {
	_jsii_.Set(
		j,
		"configuration",
		val,
	)
}

func (j *jsiiProxy_CfnAnomalyDetector) SetDimensions(val interface{}) {
	_jsii_.Set(
		j,
		"dimensions",
		val,
	)
}

func (j *jsiiProxy_CfnAnomalyDetector) SetMetricMathAnomalyDetector(val interface{}) {
	_jsii_.Set(
		j,
		"metricMathAnomalyDetector",
		val,
	)
}

func (j *jsiiProxy_CfnAnomalyDetector) SetMetricName(val *string) {
	_jsii_.Set(
		j,
		"metricName",
		val,
	)
}

func (j *jsiiProxy_CfnAnomalyDetector) SetNamespace(val *string) {
	_jsii_.Set(
		j,
		"namespace",
		val,
	)
}

func (j *jsiiProxy_CfnAnomalyDetector) SetSingleMetricAnomalyDetector(val interface{}) {
	_jsii_.Set(
		j,
		"singleMetricAnomalyDetector",
		val,
	)
}

func (j *jsiiProxy_CfnAnomalyDetector) SetStat(val *string) {
	_jsii_.Set(
		j,
		"stat",
		val,
	)
}

// Returns `true` if a construct is a stack element (i.e. part of the synthesized cloudformation template).
//
// Uses duck-typing instead of `instanceof` to allow stack elements from different
// versions of this library to be included in the same stack.
//
// Returns: The construct as a stack element or undefined if it is not a stack element.
// Experimental.
func CfnAnomalyDetector_IsCfnElement(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnAnomalyDetector",
		"isCfnElement",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a CfnResource.
// Experimental.
func CfnAnomalyDetector_IsCfnResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnAnomalyDetector",
		"isCfnResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Return whether the given object is a Construct.
// Experimental.
func CfnAnomalyDetector_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnAnomalyDetector",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func CfnAnomalyDetector_CFN_RESOURCE_TYPE_NAME() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"monocdk.aws_cloudwatch.CfnAnomalyDetector",
		"CFN_RESOURCE_TYPE_NAME",
		&returns,
	)
	return returns
}

func (c *jsiiProxy_CfnAnomalyDetector) AddDeletionOverride(path *string) {
	_jsii_.InvokeVoid(
		c,
		"addDeletionOverride",
		[]interface{}{path},
	)
}

func (c *jsiiProxy_CfnAnomalyDetector) AddDependsOn(target awscdk.CfnResource) {
	_jsii_.InvokeVoid(
		c,
		"addDependsOn",
		[]interface{}{target},
	)
}

func (c *jsiiProxy_CfnAnomalyDetector) AddMetadata(key *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addMetadata",
		[]interface{}{key, value},
	)
}

func (c *jsiiProxy_CfnAnomalyDetector) AddOverride(path *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addOverride",
		[]interface{}{path, value},
	)
}

func (c *jsiiProxy_CfnAnomalyDetector) AddPropertyDeletionOverride(propertyPath *string) {
	_jsii_.InvokeVoid(
		c,
		"addPropertyDeletionOverride",
		[]interface{}{propertyPath},
	)
}

func (c *jsiiProxy_CfnAnomalyDetector) AddPropertyOverride(propertyPath *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addPropertyOverride",
		[]interface{}{propertyPath, value},
	)
}

func (c *jsiiProxy_CfnAnomalyDetector) ApplyRemovalPolicy(policy awscdk.RemovalPolicy, options *awscdk.RemovalPolicyOptions) {
	_jsii_.InvokeVoid(
		c,
		"applyRemovalPolicy",
		[]interface{}{policy, options},
	)
}

func (c *jsiiProxy_CfnAnomalyDetector) GetAtt(attributeName *string) awscdk.Reference {
	var returns awscdk.Reference

	_jsii_.Invoke(
		c,
		"getAtt",
		[]interface{}{attributeName},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnAnomalyDetector) GetMetadata(key *string) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"getMetadata",
		[]interface{}{key},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnAnomalyDetector) Inspect(inspector awscdk.TreeInspector) {
	_jsii_.InvokeVoid(
		c,
		"inspect",
		[]interface{}{inspector},
	)
}

func (c *jsiiProxy_CfnAnomalyDetector) OnPrepare() {
	_jsii_.InvokeVoid(
		c,
		"onPrepare",
		nil, // no parameters
	)
}

func (c *jsiiProxy_CfnAnomalyDetector) OnSynthesize(session constructs.ISynthesisSession) {
	_jsii_.InvokeVoid(
		c,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (c *jsiiProxy_CfnAnomalyDetector) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		c,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnAnomalyDetector) OverrideLogicalId(newLogicalId *string) {
	_jsii_.InvokeVoid(
		c,
		"overrideLogicalId",
		[]interface{}{newLogicalId},
	)
}

func (c *jsiiProxy_CfnAnomalyDetector) Prepare() {
	_jsii_.InvokeVoid(
		c,
		"prepare",
		nil, // no parameters
	)
}

func (c *jsiiProxy_CfnAnomalyDetector) RenderProperties(props *map[string]interface{}) *map[string]interface{} {
	var returns *map[string]interface{}

	_jsii_.Invoke(
		c,
		"renderProperties",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnAnomalyDetector) ShouldSynthesize() *bool {
	var returns *bool

	_jsii_.Invoke(
		c,
		"shouldSynthesize",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnAnomalyDetector) Synthesize(session awscdk.ISynthesisSession) {
	_jsii_.InvokeVoid(
		c,
		"synthesize",
		[]interface{}{session},
	)
}

func (c *jsiiProxy_CfnAnomalyDetector) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnAnomalyDetector) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		c,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnAnomalyDetector) ValidateProperties(_properties interface{}) {
	_jsii_.InvokeVoid(
		c,
		"validateProperties",
		[]interface{}{_properties},
	)
}

// Specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model.
//
// The configuration can also include the time zone to use for the metric.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   configurationProperty := &configurationProperty{
//   	excludedTimeRanges: []interface{}{
//   		&rangeProperty{
//   			endTime: jsii.String("endTime"),
//   			startTime: jsii.String("startTime"),
//   		},
//   	},
//   	metricTimeZone: jsii.String("metricTimeZone"),
//   }
//
type CfnAnomalyDetector_ConfigurationProperty struct {
	// Specifies an array of time ranges to exclude from use when the anomaly detection model is trained and updated.
	//
	// Use this to make sure that events that could cause unusual values for the metric, such as deployments, aren't used when CloudWatch creates or updates the model.
	ExcludedTimeRanges interface{} `json:"excludedTimeRanges" yaml:"excludedTimeRanges"`
	// The time zone to use for the metric.
	//
	// This is useful to enable the model to automatically account for daylight savings time changes if the metric is sensitive to such time changes.
	//
	// To specify a time zone, use the name of the time zone as specified in the standard tz database. For more information, see [tz database](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Tz_database) .
	MetricTimeZone *string `json:"metricTimeZone" yaml:"metricTimeZone"`
}

// A dimension is a name/value pair that is part of the identity of a metric.
//
// Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric. For example, many Amazon EC2 metrics publish `InstanceId` as a dimension name, and the actual instance ID as the value for that dimension.
//
// You can assign up to 10 dimensions to a metric.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   dimensionProperty := &dimensionProperty{
//   	name: jsii.String("name"),
//   	value: jsii.String("value"),
//   }
//
type CfnAnomalyDetector_DimensionProperty struct {
	// The name of the dimension.
	Name *string `json:"name" yaml:"name"`
	// The value of the dimension.
	//
	// Dimension values must contain only ASCII characters and must include at least one non-whitespace character.
	Value *string `json:"value" yaml:"value"`
}

// This structure is used in both `GetMetricData` and `PutMetricAlarm` .
//
// The supported use of this structure is different for those two operations.
//
// When used in `GetMetricData` , it indicates the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a Metrics Insights query or a math expression. A single `GetMetricData` call can include up to 500 `MetricDataQuery` structures.
//
// When used in `PutMetricAlarm` , it enables you to create an alarm based on a metric math expression. Each `MetricDataQuery` in the array specifies either a metric to retrieve, or a math expression to be performed on retrieved metrics. A single `PutMetricAlarm` call can include up to 20 `MetricDataQuery` structures in the array. The 20 structures can include as many as 10 structures that contain a `MetricStat` parameter to retrieve a metric, and as many as 10 structures that contain the `Expression` parameter to perform a math expression. Of those `Expression` structures, one must have `True` as the value for `ReturnData` . The result of this expression is the value the alarm watches.
//
// Any expression used in a `PutMetricAlarm` operation must return a single time series. For more information, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *Amazon CloudWatch User Guide* .
//
// Some of the parameters of this structure also have different uses whether you are using this structure in a `GetMetricData` operation or a `PutMetricAlarm` operation. These differences are explained in the following parameter list.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   metricDataQueryProperty := &metricDataQueryProperty{
//   	id: jsii.String("id"),
//
//   	// the properties below are optional
//   	accountId: jsii.String("accountId"),
//   	expression: jsii.String("expression"),
//   	label: jsii.String("label"),
//   	metricStat: &metricStatProperty{
//   		metric: &metricProperty{
//   			metricName: jsii.String("metricName"),
//   			namespace: jsii.String("namespace"),
//
//   			// the properties below are optional
//   			dimensions: []interface{}{
//   				&dimensionProperty{
//   					name: jsii.String("name"),
//   					value: jsii.String("value"),
//   				},
//   			},
//   		},
//   		period: jsii.Number(123),
//   		stat: jsii.String("stat"),
//
//   		// the properties below are optional
//   		unit: jsii.String("unit"),
//   	},
//   	period: jsii.Number(123),
//   	returnData: jsii.Boolean(false),
//   }
//
type CfnAnomalyDetector_MetricDataQueryProperty struct {
	// A short name used to tie this object to the results in the response.
	//
	// This name must be unique within a single call to `GetMetricData` . If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
	Id *string `json:"id" yaml:"id"`
	// The ID of the account where the metrics are located, if this is a cross-account alarm.
	//
	// Use this field only for `PutMetricAlarm` operations. It is not used in `GetMetricData` operations.
	AccountId *string `json:"accountId" yaml:"accountId"`
	// This field can contain either a Metrics Insights query, or a metric math expression to be performed on the returned data.
	//
	// For more information about Metrics Insights queries, see [Metrics Insights query components and syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-metrics-insights-querylanguage) in the *Amazon CloudWatch User Guide* .
	//
	// A math expression can use the `Id` of the other metrics or queries to refer to those metrics, and can also use the `Id` of other expressions to use the result of those expressions. For more information about metric math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *Amazon CloudWatch User Guide* .
	//
	// Within each MetricDataQuery object, you must specify either `Expression` or `MetricStat` but not both.
	Expression *string `json:"expression" yaml:"expression"`
	// A human-readable label for this metric or expression.
	//
	// This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CloudWatch dashboard widget, the label is shown. If Label is omitted, CloudWatch generates a default.
	//
	// You can put dynamic expressions into a label, so that it is more descriptive. For more information, see [Using Dynamic Labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html) .
	Label *string `json:"label" yaml:"label"`
	// The metric to be returned, along with statistics, period, and units.
	//
	// Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
	//
	// Within one MetricDataQuery object, you must specify either `Expression` or `MetricStat` but not both.
	MetricStat interface{} `json:"metricStat" yaml:"metricStat"`
	// The granularity, in seconds, of the returned data points.
	//
	// For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a `PutMetricData` operation that includes a `StorageResolution of 1 second` .
	Period *float64 `json:"period" yaml:"period"`
	// When used in `GetMetricData` , this option indicates whether to return the timestamps and raw data values of this metric.
	//
	// If you are performing this call just to do math expressions and do not also need the raw data returned, you can specify `False` . If you omit this, the default of `True` is used.
	//
	// When used in `PutMetricAlarm` , specify `True` for the one expression result to use as the alarm. For all other metrics and expressions in the same `PutMetricAlarm` operation, specify `ReturnData` as False.
	ReturnData interface{} `json:"returnData" yaml:"returnData"`
}

// Indicates the CloudWatch math expression that provides the time series the anomaly detector uses as input.
//
// The designated math expression must return a single time series.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   metricMathAnomalyDetectorProperty := &metricMathAnomalyDetectorProperty{
//   	metricDataQueries: []interface{}{
//   		&metricDataQueryProperty{
//   			id: jsii.String("id"),
//
//   			// the properties below are optional
//   			accountId: jsii.String("accountId"),
//   			expression: jsii.String("expression"),
//   			label: jsii.String("label"),
//   			metricStat: &metricStatProperty{
//   				metric: &metricProperty{
//   					metricName: jsii.String("metricName"),
//   					namespace: jsii.String("namespace"),
//
//   					// the properties below are optional
//   					dimensions: []interface{}{
//   						&dimensionProperty{
//   							name: jsii.String("name"),
//   							value: jsii.String("value"),
//   						},
//   					},
//   				},
//   				period: jsii.Number(123),
//   				stat: jsii.String("stat"),
//
//   				// the properties below are optional
//   				unit: jsii.String("unit"),
//   			},
//   			period: jsii.Number(123),
//   			returnData: jsii.Boolean(false),
//   		},
//   	},
//   }
//
type CfnAnomalyDetector_MetricMathAnomalyDetectorProperty struct {
	// An array of metric data query structures that enables you to create an anomaly detector based on the result of a metric math expression.
	//
	// Each item in `MetricDataQueries` gets a metric or performs a math expression. One item in `MetricDataQueries` is the expression that provides the time series that the anomaly detector uses as input. Designate the expression by setting `ReturnData` to `True` for this object in the array. For all other expressions and metrics, set `ReturnData` to `False` . The designated expression must return a single time series.
	MetricDataQueries interface{} `json:"metricDataQueries" yaml:"metricDataQueries"`
}

// Represents a specific metric.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   metricProperty := &metricProperty{
//   	metricName: jsii.String("metricName"),
//   	namespace: jsii.String("namespace"),
//
//   	// the properties below are optional
//   	dimensions: []interface{}{
//   		&dimensionProperty{
//   			name: jsii.String("name"),
//   			value: jsii.String("value"),
//   		},
//   	},
//   }
//
type CfnAnomalyDetector_MetricProperty struct {
	// The name of the metric.
	//
	// This is a required field.
	MetricName *string `json:"metricName" yaml:"metricName"`
	// The namespace of the metric.
	Namespace *string `json:"namespace" yaml:"namespace"`
	// The dimensions for the metric.
	Dimensions interface{} `json:"dimensions" yaml:"dimensions"`
}

// This structure defines the metric to be returned, along with the statistics, period, and units.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   metricStatProperty := &metricStatProperty{
//   	metric: &metricProperty{
//   		metricName: jsii.String("metricName"),
//   		namespace: jsii.String("namespace"),
//
//   		// the properties below are optional
//   		dimensions: []interface{}{
//   			&dimensionProperty{
//   				name: jsii.String("name"),
//   				value: jsii.String("value"),
//   			},
//   		},
//   	},
//   	period: jsii.Number(123),
//   	stat: jsii.String("stat"),
//
//   	// the properties below are optional
//   	unit: jsii.String("unit"),
//   }
//
type CfnAnomalyDetector_MetricStatProperty struct {
	// The metric to return, including the metric name, namespace, and dimensions.
	Metric interface{} `json:"metric" yaml:"metric"`
	// The granularity, in seconds, of the returned data points.
	//
	// For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a `PutMetricData` call that includes a `StorageResolution` of 1 second.
	//
	// If the `StartTime` parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:
	//
	// - Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).
	// - Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).
	// - Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).
	Period *float64 `json:"period" yaml:"period"`
	// The statistic to return.
	//
	// It can include any CloudWatch statistic or extended statistic.
	Stat *string `json:"stat" yaml:"stat"`
	// When you are using a `Put` operation, this defines what unit you want to use when storing the metric.
	//
	// In a `Get` operation, if you omit `Unit` then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.
	Unit *string `json:"unit" yaml:"unit"`
}

// Each `Range` specifies one range of days or times to exclude from use for training or updating an anomaly detection model.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   rangeProperty := &rangeProperty{
//   	endTime: jsii.String("endTime"),
//   	startTime: jsii.String("startTime"),
//   }
//
type CfnAnomalyDetector_RangeProperty struct {
	// The end time of the range to exclude.
	//
	// The format is `yyyy-MM-dd'T'HH:mm:ss` . For example, `2019-07-01T23:59:59` .
	EndTime *string `json:"endTime" yaml:"endTime"`
	// The start time of the range to exclude.
	//
	// The format is `yyyy-MM-dd'T'HH:mm:ss` . For example, `2019-07-01T23:59:59` .
	StartTime *string `json:"startTime" yaml:"startTime"`
}

// Designates the CloudWatch metric and statistic that provides the time series the anomaly detector uses as input.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   singleMetricAnomalyDetectorProperty := &singleMetricAnomalyDetectorProperty{
//   	dimensions: []interface{}{
//   		&dimensionProperty{
//   			name: jsii.String("name"),
//   			value: jsii.String("value"),
//   		},
//   	},
//   	metricName: jsii.String("metricName"),
//   	namespace: jsii.String("namespace"),
//   	stat: jsii.String("stat"),
//   }
//
type CfnAnomalyDetector_SingleMetricAnomalyDetectorProperty struct {
	// The metric dimensions to create the anomaly detection model for.
	Dimensions interface{} `json:"dimensions" yaml:"dimensions"`
	// The name of the metric to create the anomaly detection model for.
	MetricName *string `json:"metricName" yaml:"metricName"`
	// The namespace of the metric to create the anomaly detection model for.
	Namespace *string `json:"namespace" yaml:"namespace"`
	// The statistic to use for the metric and anomaly detection model.
	Stat *string `json:"stat" yaml:"stat"`
}

// Properties for defining a `CfnAnomalyDetector`.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   cfnAnomalyDetectorProps := &cfnAnomalyDetectorProps{
//   	configuration: &configurationProperty{
//   		excludedTimeRanges: []interface{}{
//   			&rangeProperty{
//   				endTime: jsii.String("endTime"),
//   				startTime: jsii.String("startTime"),
//   			},
//   		},
//   		metricTimeZone: jsii.String("metricTimeZone"),
//   	},
//   	dimensions: []interface{}{
//   		&dimensionProperty{
//   			name: jsii.String("name"),
//   			value: jsii.String("value"),
//   		},
//   	},
//   	metricMathAnomalyDetector: &metricMathAnomalyDetectorProperty{
//   		metricDataQueries: []interface{}{
//   			&metricDataQueryProperty{
//   				id: jsii.String("id"),
//
//   				// the properties below are optional
//   				accountId: jsii.String("accountId"),
//   				expression: jsii.String("expression"),
//   				label: jsii.String("label"),
//   				metricStat: &metricStatProperty{
//   					metric: &metricProperty{
//   						metricName: jsii.String("metricName"),
//   						namespace: jsii.String("namespace"),
//
//   						// the properties below are optional
//   						dimensions: []interface{}{
//   							&dimensionProperty{
//   								name: jsii.String("name"),
//   								value: jsii.String("value"),
//   							},
//   						},
//   					},
//   					period: jsii.Number(123),
//   					stat: jsii.String("stat"),
//
//   					// the properties below are optional
//   					unit: jsii.String("unit"),
//   				},
//   				period: jsii.Number(123),
//   				returnData: jsii.Boolean(false),
//   			},
//   		},
//   	},
//   	metricName: jsii.String("metricName"),
//   	namespace: jsii.String("namespace"),
//   	singleMetricAnomalyDetector: &singleMetricAnomalyDetectorProperty{
//   		dimensions: []interface{}{
//   			&dimensionProperty{
//   				name: jsii.String("name"),
//   				value: jsii.String("value"),
//   			},
//   		},
//   		metricName: jsii.String("metricName"),
//   		namespace: jsii.String("namespace"),
//   		stat: jsii.String("stat"),
//   	},
//   	stat: jsii.String("stat"),
//   }
//
type CfnAnomalyDetectorProps struct {
	// Specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model.
	//
	// The configuration can also include the time zone to use for the metric.
	Configuration interface{} `json:"configuration" yaml:"configuration"`
	// The dimensions of the metric associated with the anomaly detection band.
	Dimensions interface{} `json:"dimensions" yaml:"dimensions"`
	// The CloudWatch metric math expression for this anomaly detector.
	MetricMathAnomalyDetector interface{} `json:"metricMathAnomalyDetector" yaml:"metricMathAnomalyDetector"`
	// The name of the metric associated with the anomaly detection band.
	MetricName *string `json:"metricName" yaml:"metricName"`
	// The namespace of the metric associated with the anomaly detection band.
	Namespace *string `json:"namespace" yaml:"namespace"`
	// The CloudWatch metric and statistic for this anomaly detector.
	SingleMetricAnomalyDetector interface{} `json:"singleMetricAnomalyDetector" yaml:"singleMetricAnomalyDetector"`
	// The statistic of the metric associated with the anomaly detection band.
	Stat *string `json:"stat" yaml:"stat"`
}

// A CloudFormation `AWS::CloudWatch::CompositeAlarm`.
//
// The `AWS::CloudWatch::CompositeAlarm` type creates or updates a composite alarm. When you create a composite alarm, you specify a rule expression for the alarm that takes into account the alarm states of other alarms that you have created. The composite alarm goes into ALARM state only if all conditions of the rule are met.
//
// The alarms specified in a composite alarm's rule expression can include metric alarms and other composite alarms.
//
// Using composite alarms can reduce alarm noise. You can create multiple metric alarms, and also create a composite alarm and set up alerts only for the composite alarm. For example, you could create a composite alarm that goes into ALARM state only when more than one of the underlying metric alarms are in ALARM state.
//
// Currently, the only alarm actions that can be taken by composite alarms are notifying SNS topics.
//
// When this operation creates an alarm, the alarm state is immediately set to INSUFFICIENT_DATA. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed. For a composite alarm, this initial time after creation is the only time that the alarm can be in INSUFFICIENT_DATA state.
//
// When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   cfnCompositeAlarm := cloudwatch.NewCfnCompositeAlarm(this, jsii.String("MyCfnCompositeAlarm"), &cfnCompositeAlarmProps{
//   	alarmName: jsii.String("alarmName"),
//   	alarmRule: jsii.String("alarmRule"),
//
//   	// the properties below are optional
//   	actionsEnabled: jsii.Boolean(false),
//   	alarmActions: []*string{
//   		jsii.String("alarmActions"),
//   	},
//   	alarmDescription: jsii.String("alarmDescription"),
//   	insufficientDataActions: []*string{
//   		jsii.String("insufficientDataActions"),
//   	},
//   	okActions: []*string{
//   		jsii.String("okActions"),
//   	},
//   })
//
type CfnCompositeAlarm interface {
	awscdk.CfnResource
	awscdk.IInspectable
	// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm.
	//
	// The default is TRUE.
	ActionsEnabled() interface{}
	SetActionsEnabled(val interface{})
	// The actions to execute when this alarm transitions to the ALARM state from any other state.
	//
	// Each action is specified as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .
	AlarmActions() *[]*string
	SetAlarmActions(val *[]*string)
	// The description for the composite alarm.
	AlarmDescription() *string
	SetAlarmDescription(val *string)
	// The name for the composite alarm.
	//
	// This name must be unique within your AWS account.
	AlarmName() *string
	SetAlarmName(val *string)
	// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state.
	//
	// For each alarm that you reference, you designate a function that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the functions in your expression.
	//
	// You can use either alarm names or ARNs to reference the other alarms that are to be evaluated.
	//
	// Functions can include the following:
	//
	// - ALARM("alarm-name or alarm-ARN") is TRUE if the named alarm is in ALARM state.
	// - OK("alarm-name or alarm-ARN") is TRUE if the named alarm is in OK state.
	// - INSUFFICIENT_DATA("alarm-name or alarm-ARN") is TRUE if the named alarm is in INSUFFICIENT_DATA state.
	// - TRUE always evaluates to TRUE.
	// - FALSE always evaluates to FALSE.
	//
	// TRUE and FALSE are useful for testing a complex AlarmRule structure, and for testing your alarm actions.
	//
	// For more information about `AlarmRule` syntax, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .
	AlarmRule() *string
	SetAlarmRule(val *string)
	// The ARN of the composite alarm, such as `arn:aws:cloudwatch:us-west-2:123456789012:alarm/CompositeAlarmName` .
	AttrArn() *string
	// Options for this resource, such as condition, update policy etc.
	// Experimental.
	CfnOptions() awscdk.ICfnResourceOptions
	CfnProperties() *map[string]interface{}
	// AWS resource type.
	// Experimental.
	CfnResourceType() *string
	// Returns: the stack trace of the point where this Resource was created from, sourced
	// from the +metadata+ entry typed +aws:cdk:logicalId+, and with the bottom-most
	// node +internal+ entries filtered.
	// Experimental.
	CreationStack() *[]*string
	// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state.
	//
	// Each action is specified as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .
	InsufficientDataActions() *[]*string
	SetInsufficientDataActions(val *[]*string)
	// The logical ID for this CloudFormation stack element.
	//
	// The logical ID of the element
	// is calculated from the path of the resource node in the construct tree.
	//
	// To override this value, use `overrideLogicalId(newLogicalId)`.
	//
	// Returns: the logical ID as a stringified token. This value will only get
	// resolved during synthesis.
	// Experimental.
	LogicalId() *string
	// The construct tree node associated with this construct.
	// Experimental.
	Node() awscdk.ConstructNode
	// The actions to execute when this alarm transitions to the OK state from any other state.
	//
	// Each action is specified as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .
	OkActions() *[]*string
	SetOkActions(val *[]*string)
	// Return a string that will be resolved to a CloudFormation `{ Ref }` for this element.
	//
	// If, by any chance, the intrinsic reference of a resource is not a string, you could
	// coerce it to an IResolvable through `Lazy.any({ produce: resource.ref })`.
	// Experimental.
	Ref() *string
	// The stack in which this element is defined.
	//
	// CfnElements must be defined within a stack scope (directly or indirectly).
	// Experimental.
	Stack() awscdk.Stack
	// Return properties modified after initiation.
	//
	// Resources that expose mutable properties should override this function to
	// collect and return the properties object for this resource.
	// Experimental.
	UpdatedProperites() *map[string]interface{}
	// Syntactic sugar for `addOverride(path, undefined)`.
	// Experimental.
	AddDeletionOverride(path *string)
	// Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.
	//
	// This can be used for resources across stacks (or nested stack) boundaries
	// and the dependency will automatically be transferred to the relevant scope.
	// Experimental.
	AddDependsOn(target awscdk.CfnResource)
	// Add a value to the CloudFormation Resource Metadata.
	// See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
	//
	// Note that this is a different set of metadata from CDK node metadata; this
	// metadata ends up in the stack template under the resource, whereas CDK
	// node metadata ends up in the Cloud Assembly.
	//
	// Experimental.
	AddMetadata(key *string, value interface{})
	// Adds an override to the synthesized CloudFormation resource.
	//
	// To add a
	// property override, either use `addPropertyOverride` or prefix `path` with
	// "Properties." (i.e. `Properties.TopicName`).
	//
	// If the override is nested, separate each nested level using a dot (.) in the path parameter.
	// If there is an array as part of the nesting, specify the index in the path.
	//
	// To include a literal `.` in the property name, prefix with a `\`. In most
	// programming languages you will need to write this as `"\\."` because the
	// `\` itself will need to be escaped.
	//
	// For example,
	// ```typescript
	// cfnResource.addOverride('Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes', ['myattribute']);
	// cfnResource.addOverride('Properties.GlobalSecondaryIndexes.1.ProjectionType', 'INCLUDE');
	// ```
	// would add the overrides
	// ```json
	// "Properties": {
	//    "GlobalSecondaryIndexes": [
	//      {
	//        "Projection": {
	//          "NonKeyAttributes": [ "myattribute" ]
	//          ...
	//        }
	//        ...
	//      },
	//      {
	//        "ProjectionType": "INCLUDE"
	//        ...
	//      },
	//    ]
	//    ...
	// }
	// ```
	//
	// The `value` argument to `addOverride` will not be processed or translated
	// in any way. Pass raw JSON values in here with the correct capitalization
	// for CloudFormation. If you pass CDK classes or structs, they will be
	// rendered with lowercased key names, and CloudFormation will reject the
	// template.
	// Experimental.
	AddOverride(path *string, value interface{})
	// Adds an override that deletes the value of a property from the resource definition.
	// Experimental.
	AddPropertyDeletionOverride(propertyPath *string)
	// Adds an override to a resource property.
	//
	// Syntactic sugar for `addOverride("Properties.<...>", value)`.
	// Experimental.
	AddPropertyOverride(propertyPath *string, value interface{})
	// Sets the deletion policy of the resource based on the removal policy specified.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy, options *awscdk.RemovalPolicyOptions)
	// Returns a token for an runtime attribute of this resource.
	//
	// Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility
	// in case there is no generated attribute.
	// Experimental.
	GetAtt(attributeName *string) awscdk.Reference
	// Retrieve a value value from the CloudFormation Resource Metadata.
	// See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
	//
	// Note that this is a different set of metadata from CDK node metadata; this
	// metadata ends up in the stack template under the resource, whereas CDK
	// node metadata ends up in the Cloud Assembly.
	//
	// Experimental.
	GetMetadata(key *string) interface{}
	// Examines the CloudFormation resource and discloses attributes.
	Inspect(inspector awscdk.TreeInspector)
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	OnValidate() *[]*string
	// Overrides the auto-generated logical ID with a specific ID.
	// Experimental.
	OverrideLogicalId(newLogicalId *string)
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	Prepare()
	RenderProperties(props *map[string]interface{}) *map[string]interface{}
	// Can be overridden by subclasses to determine if this resource will be rendered into the cloudformation template.
	//
	// Returns: `true` if the resource should be included or `false` is the resource
	// should be omitted.
	// Experimental.
	ShouldSynthesize() *bool
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	Synthesize(session awscdk.ISynthesisSession)
	// Returns a string representation of this construct.
	//
	// Returns: a string representation of this resource.
	// Experimental.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	Validate() *[]*string
	// Experimental.
	ValidateProperties(_properties interface{})
}

// The jsii proxy struct for CfnCompositeAlarm
type jsiiProxy_CfnCompositeAlarm struct {
	internal.Type__awscdkCfnResource
	internal.Type__awscdkIInspectable
}

func (j *jsiiProxy_CfnCompositeAlarm) ActionsEnabled() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"actionsEnabled",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) AlarmActions() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"alarmActions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) AlarmDescription() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alarmDescription",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) AlarmName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alarmName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) AlarmRule() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alarmRule",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) AttrArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"attrArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) CfnOptions() awscdk.ICfnResourceOptions {
	var returns awscdk.ICfnResourceOptions
	_jsii_.Get(
		j,
		"cfnOptions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) CfnProperties() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"cfnProperties",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) CfnResourceType() *string {
	var returns *string
	_jsii_.Get(
		j,
		"cfnResourceType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) CreationStack() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"creationStack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) InsufficientDataActions() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"insufficientDataActions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) LogicalId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"logicalId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) Node() awscdk.ConstructNode {
	var returns awscdk.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) OkActions() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"okActions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) Ref() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ref",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnCompositeAlarm) UpdatedProperites() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"updatedProperites",
		&returns,
	)
	return returns
}


// Create a new `AWS::CloudWatch::CompositeAlarm`.
func NewCfnCompositeAlarm(scope awscdk.Construct, id *string, props *CfnCompositeAlarmProps) CfnCompositeAlarm {
	_init_.Initialize()

	j := jsiiProxy_CfnCompositeAlarm{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.CfnCompositeAlarm",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Create a new `AWS::CloudWatch::CompositeAlarm`.
func NewCfnCompositeAlarm_Override(c CfnCompositeAlarm, scope awscdk.Construct, id *string, props *CfnCompositeAlarmProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.CfnCompositeAlarm",
		[]interface{}{scope, id, props},
		c,
	)
}

func (j *jsiiProxy_CfnCompositeAlarm) SetActionsEnabled(val interface{}) {
	_jsii_.Set(
		j,
		"actionsEnabled",
		val,
	)
}

func (j *jsiiProxy_CfnCompositeAlarm) SetAlarmActions(val *[]*string) {
	_jsii_.Set(
		j,
		"alarmActions",
		val,
	)
}

func (j *jsiiProxy_CfnCompositeAlarm) SetAlarmDescription(val *string) {
	_jsii_.Set(
		j,
		"alarmDescription",
		val,
	)
}

func (j *jsiiProxy_CfnCompositeAlarm) SetAlarmName(val *string) {
	_jsii_.Set(
		j,
		"alarmName",
		val,
	)
}

func (j *jsiiProxy_CfnCompositeAlarm) SetAlarmRule(val *string) {
	_jsii_.Set(
		j,
		"alarmRule",
		val,
	)
}

func (j *jsiiProxy_CfnCompositeAlarm) SetInsufficientDataActions(val *[]*string) {
	_jsii_.Set(
		j,
		"insufficientDataActions",
		val,
	)
}

func (j *jsiiProxy_CfnCompositeAlarm) SetOkActions(val *[]*string) {
	_jsii_.Set(
		j,
		"okActions",
		val,
	)
}

// Returns `true` if a construct is a stack element (i.e. part of the synthesized cloudformation template).
//
// Uses duck-typing instead of `instanceof` to allow stack elements from different
// versions of this library to be included in the same stack.
//
// Returns: The construct as a stack element or undefined if it is not a stack element.
// Experimental.
func CfnCompositeAlarm_IsCfnElement(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnCompositeAlarm",
		"isCfnElement",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a CfnResource.
// Experimental.
func CfnCompositeAlarm_IsCfnResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnCompositeAlarm",
		"isCfnResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Return whether the given object is a Construct.
// Experimental.
func CfnCompositeAlarm_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnCompositeAlarm",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func CfnCompositeAlarm_CFN_RESOURCE_TYPE_NAME() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"monocdk.aws_cloudwatch.CfnCompositeAlarm",
		"CFN_RESOURCE_TYPE_NAME",
		&returns,
	)
	return returns
}

func (c *jsiiProxy_CfnCompositeAlarm) AddDeletionOverride(path *string) {
	_jsii_.InvokeVoid(
		c,
		"addDeletionOverride",
		[]interface{}{path},
	)
}

func (c *jsiiProxy_CfnCompositeAlarm) AddDependsOn(target awscdk.CfnResource) {
	_jsii_.InvokeVoid(
		c,
		"addDependsOn",
		[]interface{}{target},
	)
}

func (c *jsiiProxy_CfnCompositeAlarm) AddMetadata(key *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addMetadata",
		[]interface{}{key, value},
	)
}

func (c *jsiiProxy_CfnCompositeAlarm) AddOverride(path *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addOverride",
		[]interface{}{path, value},
	)
}

func (c *jsiiProxy_CfnCompositeAlarm) AddPropertyDeletionOverride(propertyPath *string) {
	_jsii_.InvokeVoid(
		c,
		"addPropertyDeletionOverride",
		[]interface{}{propertyPath},
	)
}

func (c *jsiiProxy_CfnCompositeAlarm) AddPropertyOverride(propertyPath *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addPropertyOverride",
		[]interface{}{propertyPath, value},
	)
}

func (c *jsiiProxy_CfnCompositeAlarm) ApplyRemovalPolicy(policy awscdk.RemovalPolicy, options *awscdk.RemovalPolicyOptions) {
	_jsii_.InvokeVoid(
		c,
		"applyRemovalPolicy",
		[]interface{}{policy, options},
	)
}

func (c *jsiiProxy_CfnCompositeAlarm) GetAtt(attributeName *string) awscdk.Reference {
	var returns awscdk.Reference

	_jsii_.Invoke(
		c,
		"getAtt",
		[]interface{}{attributeName},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnCompositeAlarm) GetMetadata(key *string) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"getMetadata",
		[]interface{}{key},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnCompositeAlarm) Inspect(inspector awscdk.TreeInspector) {
	_jsii_.InvokeVoid(
		c,
		"inspect",
		[]interface{}{inspector},
	)
}

func (c *jsiiProxy_CfnCompositeAlarm) OnPrepare() {
	_jsii_.InvokeVoid(
		c,
		"onPrepare",
		nil, // no parameters
	)
}

func (c *jsiiProxy_CfnCompositeAlarm) OnSynthesize(session constructs.ISynthesisSession) {
	_jsii_.InvokeVoid(
		c,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (c *jsiiProxy_CfnCompositeAlarm) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		c,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnCompositeAlarm) OverrideLogicalId(newLogicalId *string) {
	_jsii_.InvokeVoid(
		c,
		"overrideLogicalId",
		[]interface{}{newLogicalId},
	)
}

func (c *jsiiProxy_CfnCompositeAlarm) Prepare() {
	_jsii_.InvokeVoid(
		c,
		"prepare",
		nil, // no parameters
	)
}

func (c *jsiiProxy_CfnCompositeAlarm) RenderProperties(props *map[string]interface{}) *map[string]interface{} {
	var returns *map[string]interface{}

	_jsii_.Invoke(
		c,
		"renderProperties",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnCompositeAlarm) ShouldSynthesize() *bool {
	var returns *bool

	_jsii_.Invoke(
		c,
		"shouldSynthesize",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnCompositeAlarm) Synthesize(session awscdk.ISynthesisSession) {
	_jsii_.InvokeVoid(
		c,
		"synthesize",
		[]interface{}{session},
	)
}

func (c *jsiiProxy_CfnCompositeAlarm) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnCompositeAlarm) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		c,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnCompositeAlarm) ValidateProperties(_properties interface{}) {
	_jsii_.InvokeVoid(
		c,
		"validateProperties",
		[]interface{}{_properties},
	)
}

// Properties for defining a `CfnCompositeAlarm`.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   cfnCompositeAlarmProps := &cfnCompositeAlarmProps{
//   	alarmName: jsii.String("alarmName"),
//   	alarmRule: jsii.String("alarmRule"),
//
//   	// the properties below are optional
//   	actionsEnabled: jsii.Boolean(false),
//   	alarmActions: []*string{
//   		jsii.String("alarmActions"),
//   	},
//   	alarmDescription: jsii.String("alarmDescription"),
//   	insufficientDataActions: []*string{
//   		jsii.String("insufficientDataActions"),
//   	},
//   	okActions: []*string{
//   		jsii.String("okActions"),
//   	},
//   }
//
type CfnCompositeAlarmProps struct {
	// The name for the composite alarm.
	//
	// This name must be unique within your AWS account.
	AlarmName *string `json:"alarmName" yaml:"alarmName"`
	// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state.
	//
	// For each alarm that you reference, you designate a function that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the functions in your expression.
	//
	// You can use either alarm names or ARNs to reference the other alarms that are to be evaluated.
	//
	// Functions can include the following:
	//
	// - ALARM("alarm-name or alarm-ARN") is TRUE if the named alarm is in ALARM state.
	// - OK("alarm-name or alarm-ARN") is TRUE if the named alarm is in OK state.
	// - INSUFFICIENT_DATA("alarm-name or alarm-ARN") is TRUE if the named alarm is in INSUFFICIENT_DATA state.
	// - TRUE always evaluates to TRUE.
	// - FALSE always evaluates to FALSE.
	//
	// TRUE and FALSE are useful for testing a complex AlarmRule structure, and for testing your alarm actions.
	//
	// For more information about `AlarmRule` syntax, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .
	AlarmRule *string `json:"alarmRule" yaml:"alarmRule"`
	// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm.
	//
	// The default is TRUE.
	ActionsEnabled interface{} `json:"actionsEnabled" yaml:"actionsEnabled"`
	// The actions to execute when this alarm transitions to the ALARM state from any other state.
	//
	// Each action is specified as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .
	AlarmActions *[]*string `json:"alarmActions" yaml:"alarmActions"`
	// The description for the composite alarm.
	AlarmDescription *string `json:"alarmDescription" yaml:"alarmDescription"`
	// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state.
	//
	// Each action is specified as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .
	InsufficientDataActions *[]*string `json:"insufficientDataActions" yaml:"insufficientDataActions"`
	// The actions to execute when this alarm transitions to the OK state from any other state.
	//
	// Each action is specified as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can specify, see [PutCompositeAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutCompositeAlarm.html) in the *Amazon CloudWatch API Reference* .
	OkActions *[]*string `json:"okActions" yaml:"okActions"`
}

// A CloudFormation `AWS::CloudWatch::Dashboard`.
//
// The `AWS::CloudWatch::Dashboard` resource specifies an Amazon CloudWatch dashboard. A dashboard is a customizable home page in the CloudWatch console that you can use to monitor your AWS resources in a single view.
//
// All dashboards in your account are global, not region-specific.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   cfnDashboard := cloudwatch.NewCfnDashboard(this, jsii.String("MyCfnDashboard"), &cfnDashboardProps{
//   	dashboardBody: jsii.String("dashboardBody"),
//
//   	// the properties below are optional
//   	dashboardName: jsii.String("dashboardName"),
//   })
//
type CfnDashboard interface {
	awscdk.CfnResource
	awscdk.IInspectable
	// Options for this resource, such as condition, update policy etc.
	// Experimental.
	CfnOptions() awscdk.ICfnResourceOptions
	CfnProperties() *map[string]interface{}
	// AWS resource type.
	// Experimental.
	CfnResourceType() *string
	// Returns: the stack trace of the point where this Resource was created from, sourced
	// from the +metadata+ entry typed +aws:cdk:logicalId+, and with the bottom-most
	// node +internal+ entries filtered.
	// Experimental.
	CreationStack() *[]*string
	// The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard.
	//
	// This parameter is required.
	//
	// For more information about the syntax, see [Dashboard Body Structure and Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html) .
	DashboardBody() *string
	SetDashboardBody(val *string)
	// The name of the dashboard.
	//
	// The name must be between 1 and 255 characters. If you do not specify a name, one will be generated automatically.
	DashboardName() *string
	SetDashboardName(val *string)
	// The logical ID for this CloudFormation stack element.
	//
	// The logical ID of the element
	// is calculated from the path of the resource node in the construct tree.
	//
	// To override this value, use `overrideLogicalId(newLogicalId)`.
	//
	// Returns: the logical ID as a stringified token. This value will only get
	// resolved during synthesis.
	// Experimental.
	LogicalId() *string
	// The construct tree node associated with this construct.
	// Experimental.
	Node() awscdk.ConstructNode
	// Return a string that will be resolved to a CloudFormation `{ Ref }` for this element.
	//
	// If, by any chance, the intrinsic reference of a resource is not a string, you could
	// coerce it to an IResolvable through `Lazy.any({ produce: resource.ref })`.
	// Experimental.
	Ref() *string
	// The stack in which this element is defined.
	//
	// CfnElements must be defined within a stack scope (directly or indirectly).
	// Experimental.
	Stack() awscdk.Stack
	// Return properties modified after initiation.
	//
	// Resources that expose mutable properties should override this function to
	// collect and return the properties object for this resource.
	// Experimental.
	UpdatedProperites() *map[string]interface{}
	// Syntactic sugar for `addOverride(path, undefined)`.
	// Experimental.
	AddDeletionOverride(path *string)
	// Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.
	//
	// This can be used for resources across stacks (or nested stack) boundaries
	// and the dependency will automatically be transferred to the relevant scope.
	// Experimental.
	AddDependsOn(target awscdk.CfnResource)
	// Add a value to the CloudFormation Resource Metadata.
	// See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
	//
	// Note that this is a different set of metadata from CDK node metadata; this
	// metadata ends up in the stack template under the resource, whereas CDK
	// node metadata ends up in the Cloud Assembly.
	//
	// Experimental.
	AddMetadata(key *string, value interface{})
	// Adds an override to the synthesized CloudFormation resource.
	//
	// To add a
	// property override, either use `addPropertyOverride` or prefix `path` with
	// "Properties." (i.e. `Properties.TopicName`).
	//
	// If the override is nested, separate each nested level using a dot (.) in the path parameter.
	// If there is an array as part of the nesting, specify the index in the path.
	//
	// To include a literal `.` in the property name, prefix with a `\`. In most
	// programming languages you will need to write this as `"\\."` because the
	// `\` itself will need to be escaped.
	//
	// For example,
	// ```typescript
	// cfnResource.addOverride('Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes', ['myattribute']);
	// cfnResource.addOverride('Properties.GlobalSecondaryIndexes.1.ProjectionType', 'INCLUDE');
	// ```
	// would add the overrides
	// ```json
	// "Properties": {
	//    "GlobalSecondaryIndexes": [
	//      {
	//        "Projection": {
	//          "NonKeyAttributes": [ "myattribute" ]
	//          ...
	//        }
	//        ...
	//      },
	//      {
	//        "ProjectionType": "INCLUDE"
	//        ...
	//      },
	//    ]
	//    ...
	// }
	// ```
	//
	// The `value` argument to `addOverride` will not be processed or translated
	// in any way. Pass raw JSON values in here with the correct capitalization
	// for CloudFormation. If you pass CDK classes or structs, they will be
	// rendered with lowercased key names, and CloudFormation will reject the
	// template.
	// Experimental.
	AddOverride(path *string, value interface{})
	// Adds an override that deletes the value of a property from the resource definition.
	// Experimental.
	AddPropertyDeletionOverride(propertyPath *string)
	// Adds an override to a resource property.
	//
	// Syntactic sugar for `addOverride("Properties.<...>", value)`.
	// Experimental.
	AddPropertyOverride(propertyPath *string, value interface{})
	// Sets the deletion policy of the resource based on the removal policy specified.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy, options *awscdk.RemovalPolicyOptions)
	// Returns a token for an runtime attribute of this resource.
	//
	// Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility
	// in case there is no generated attribute.
	// Experimental.
	GetAtt(attributeName *string) awscdk.Reference
	// Retrieve a value value from the CloudFormation Resource Metadata.
	// See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
	//
	// Note that this is a different set of metadata from CDK node metadata; this
	// metadata ends up in the stack template under the resource, whereas CDK
	// node metadata ends up in the Cloud Assembly.
	//
	// Experimental.
	GetMetadata(key *string) interface{}
	// Examines the CloudFormation resource and discloses attributes.
	Inspect(inspector awscdk.TreeInspector)
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	OnValidate() *[]*string
	// Overrides the auto-generated logical ID with a specific ID.
	// Experimental.
	OverrideLogicalId(newLogicalId *string)
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	Prepare()
	RenderProperties(props *map[string]interface{}) *map[string]interface{}
	// Can be overridden by subclasses to determine if this resource will be rendered into the cloudformation template.
	//
	// Returns: `true` if the resource should be included or `false` is the resource
	// should be omitted.
	// Experimental.
	ShouldSynthesize() *bool
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	Synthesize(session awscdk.ISynthesisSession)
	// Returns a string representation of this construct.
	//
	// Returns: a string representation of this resource.
	// Experimental.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	Validate() *[]*string
	// Experimental.
	ValidateProperties(_properties interface{})
}

// The jsii proxy struct for CfnDashboard
type jsiiProxy_CfnDashboard struct {
	internal.Type__awscdkCfnResource
	internal.Type__awscdkIInspectable
}

func (j *jsiiProxy_CfnDashboard) CfnOptions() awscdk.ICfnResourceOptions {
	var returns awscdk.ICfnResourceOptions
	_jsii_.Get(
		j,
		"cfnOptions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnDashboard) CfnProperties() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"cfnProperties",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnDashboard) CfnResourceType() *string {
	var returns *string
	_jsii_.Get(
		j,
		"cfnResourceType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnDashboard) CreationStack() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"creationStack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnDashboard) DashboardBody() *string {
	var returns *string
	_jsii_.Get(
		j,
		"dashboardBody",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnDashboard) DashboardName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"dashboardName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnDashboard) LogicalId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"logicalId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnDashboard) Node() awscdk.ConstructNode {
	var returns awscdk.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnDashboard) Ref() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ref",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnDashboard) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnDashboard) UpdatedProperites() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"updatedProperites",
		&returns,
	)
	return returns
}


// Create a new `AWS::CloudWatch::Dashboard`.
func NewCfnDashboard(scope awscdk.Construct, id *string, props *CfnDashboardProps) CfnDashboard {
	_init_.Initialize()

	j := jsiiProxy_CfnDashboard{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.CfnDashboard",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Create a new `AWS::CloudWatch::Dashboard`.
func NewCfnDashboard_Override(c CfnDashboard, scope awscdk.Construct, id *string, props *CfnDashboardProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.CfnDashboard",
		[]interface{}{scope, id, props},
		c,
	)
}

func (j *jsiiProxy_CfnDashboard) SetDashboardBody(val *string) {
	_jsii_.Set(
		j,
		"dashboardBody",
		val,
	)
}

func (j *jsiiProxy_CfnDashboard) SetDashboardName(val *string) {
	_jsii_.Set(
		j,
		"dashboardName",
		val,
	)
}

// Returns `true` if a construct is a stack element (i.e. part of the synthesized cloudformation template).
//
// Uses duck-typing instead of `instanceof` to allow stack elements from different
// versions of this library to be included in the same stack.
//
// Returns: The construct as a stack element or undefined if it is not a stack element.
// Experimental.
func CfnDashboard_IsCfnElement(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnDashboard",
		"isCfnElement",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a CfnResource.
// Experimental.
func CfnDashboard_IsCfnResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnDashboard",
		"isCfnResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Return whether the given object is a Construct.
// Experimental.
func CfnDashboard_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnDashboard",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func CfnDashboard_CFN_RESOURCE_TYPE_NAME() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"monocdk.aws_cloudwatch.CfnDashboard",
		"CFN_RESOURCE_TYPE_NAME",
		&returns,
	)
	return returns
}

func (c *jsiiProxy_CfnDashboard) AddDeletionOverride(path *string) {
	_jsii_.InvokeVoid(
		c,
		"addDeletionOverride",
		[]interface{}{path},
	)
}

func (c *jsiiProxy_CfnDashboard) AddDependsOn(target awscdk.CfnResource) {
	_jsii_.InvokeVoid(
		c,
		"addDependsOn",
		[]interface{}{target},
	)
}

func (c *jsiiProxy_CfnDashboard) AddMetadata(key *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addMetadata",
		[]interface{}{key, value},
	)
}

func (c *jsiiProxy_CfnDashboard) AddOverride(path *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addOverride",
		[]interface{}{path, value},
	)
}

func (c *jsiiProxy_CfnDashboard) AddPropertyDeletionOverride(propertyPath *string) {
	_jsii_.InvokeVoid(
		c,
		"addPropertyDeletionOverride",
		[]interface{}{propertyPath},
	)
}

func (c *jsiiProxy_CfnDashboard) AddPropertyOverride(propertyPath *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addPropertyOverride",
		[]interface{}{propertyPath, value},
	)
}

func (c *jsiiProxy_CfnDashboard) ApplyRemovalPolicy(policy awscdk.RemovalPolicy, options *awscdk.RemovalPolicyOptions) {
	_jsii_.InvokeVoid(
		c,
		"applyRemovalPolicy",
		[]interface{}{policy, options},
	)
}

func (c *jsiiProxy_CfnDashboard) GetAtt(attributeName *string) awscdk.Reference {
	var returns awscdk.Reference

	_jsii_.Invoke(
		c,
		"getAtt",
		[]interface{}{attributeName},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnDashboard) GetMetadata(key *string) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"getMetadata",
		[]interface{}{key},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnDashboard) Inspect(inspector awscdk.TreeInspector) {
	_jsii_.InvokeVoid(
		c,
		"inspect",
		[]interface{}{inspector},
	)
}

func (c *jsiiProxy_CfnDashboard) OnPrepare() {
	_jsii_.InvokeVoid(
		c,
		"onPrepare",
		nil, // no parameters
	)
}

func (c *jsiiProxy_CfnDashboard) OnSynthesize(session constructs.ISynthesisSession) {
	_jsii_.InvokeVoid(
		c,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (c *jsiiProxy_CfnDashboard) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		c,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnDashboard) OverrideLogicalId(newLogicalId *string) {
	_jsii_.InvokeVoid(
		c,
		"overrideLogicalId",
		[]interface{}{newLogicalId},
	)
}

func (c *jsiiProxy_CfnDashboard) Prepare() {
	_jsii_.InvokeVoid(
		c,
		"prepare",
		nil, // no parameters
	)
}

func (c *jsiiProxy_CfnDashboard) RenderProperties(props *map[string]interface{}) *map[string]interface{} {
	var returns *map[string]interface{}

	_jsii_.Invoke(
		c,
		"renderProperties",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnDashboard) ShouldSynthesize() *bool {
	var returns *bool

	_jsii_.Invoke(
		c,
		"shouldSynthesize",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnDashboard) Synthesize(session awscdk.ISynthesisSession) {
	_jsii_.InvokeVoid(
		c,
		"synthesize",
		[]interface{}{session},
	)
}

func (c *jsiiProxy_CfnDashboard) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnDashboard) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		c,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnDashboard) ValidateProperties(_properties interface{}) {
	_jsii_.InvokeVoid(
		c,
		"validateProperties",
		[]interface{}{_properties},
	)
}

// Properties for defining a `CfnDashboard`.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   cfnDashboardProps := &cfnDashboardProps{
//   	dashboardBody: jsii.String("dashboardBody"),
//
//   	// the properties below are optional
//   	dashboardName: jsii.String("dashboardName"),
//   }
//
type CfnDashboardProps struct {
	// The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard.
	//
	// This parameter is required.
	//
	// For more information about the syntax, see [Dashboard Body Structure and Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html) .
	DashboardBody *string `json:"dashboardBody" yaml:"dashboardBody"`
	// The name of the dashboard.
	//
	// The name must be between 1 and 255 characters. If you do not specify a name, one will be generated automatically.
	DashboardName *string `json:"dashboardName" yaml:"dashboardName"`
}

// A CloudFormation `AWS::CloudWatch::InsightRule`.
//
// Creates or updates a Contributor Insights rule. Rules evaluate log events in a CloudWatch Logs log group, enabling you to find contributor data for the log events in that log group. For more information, see [Using Contributor Insights to Analyze High-Cardinality Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html) in the *Amazon CloudWatch User Guide* .
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   cfnInsightRule := cloudwatch.NewCfnInsightRule(this, jsii.String("MyCfnInsightRule"), &cfnInsightRuleProps{
//   	ruleBody: jsii.String("ruleBody"),
//   	ruleName: jsii.String("ruleName"),
//   	ruleState: jsii.String("ruleState"),
//
//   	// the properties below are optional
//   	tags: []interface{}{
//   		&cfnTag{
//   			key: jsii.String("key"),
//   			value: jsii.String("value"),
//   		},
//   	},
//   })
//
type CfnInsightRule interface {
	awscdk.CfnResource
	awscdk.IInspectable
	// The ARN of the Contributor Insights rule, such as `arn:aws:cloudwatch:us-west-2:123456789012:insight-rule/MyInsightRuleName` .
	AttrArn() *string
	// The name of the Contributor Insights rule.
	AttrRuleName() *string
	// Options for this resource, such as condition, update policy etc.
	// Experimental.
	CfnOptions() awscdk.ICfnResourceOptions
	CfnProperties() *map[string]interface{}
	// AWS resource type.
	// Experimental.
	CfnResourceType() *string
	// Returns: the stack trace of the point where this Resource was created from, sourced
	// from the +metadata+ entry typed +aws:cdk:logicalId+, and with the bottom-most
	// node +internal+ entries filtered.
	// Experimental.
	CreationStack() *[]*string
	// The logical ID for this CloudFormation stack element.
	//
	// The logical ID of the element
	// is calculated from the path of the resource node in the construct tree.
	//
	// To override this value, use `overrideLogicalId(newLogicalId)`.
	//
	// Returns: the logical ID as a stringified token. This value will only get
	// resolved during synthesis.
	// Experimental.
	LogicalId() *string
	// The construct tree node associated with this construct.
	// Experimental.
	Node() awscdk.ConstructNode
	// Return a string that will be resolved to a CloudFormation `{ Ref }` for this element.
	//
	// If, by any chance, the intrinsic reference of a resource is not a string, you could
	// coerce it to an IResolvable through `Lazy.any({ produce: resource.ref })`.
	// Experimental.
	Ref() *string
	// The definition of the rule, as a JSON object.
	//
	// For details about the syntax, see [Contributor Insights Rule Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html) in the *Amazon CloudWatch User Guide* .
	RuleBody() *string
	SetRuleBody(val *string)
	// The name of the rule.
	RuleName() *string
	SetRuleName(val *string)
	// The current state of the rule.
	//
	// Valid values are `ENABLED` and `DISABLED` .
	RuleState() *string
	SetRuleState(val *string)
	// The stack in which this element is defined.
	//
	// CfnElements must be defined within a stack scope (directly or indirectly).
	// Experimental.
	Stack() awscdk.Stack
	// A list of key-value pairs to associate with the Contributor Insights rule.
	//
	// You can associate as many as 50 tags with a rule.
	//
	// Tags can help you organize and categorize your resources. For more information, see [Tagging Your Amazon CloudWatch Resources](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Tagging.html) .
	//
	// To be able to associate tags with a rule, you must have the `cloudwatch:TagResource` permission in addition to the `cloudwatch:PutInsightRule` permission.
	Tags() awscdk.TagManager
	// Return properties modified after initiation.
	//
	// Resources that expose mutable properties should override this function to
	// collect and return the properties object for this resource.
	// Experimental.
	UpdatedProperites() *map[string]interface{}
	// Syntactic sugar for `addOverride(path, undefined)`.
	// Experimental.
	AddDeletionOverride(path *string)
	// Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.
	//
	// This can be used for resources across stacks (or nested stack) boundaries
	// and the dependency will automatically be transferred to the relevant scope.
	// Experimental.
	AddDependsOn(target awscdk.CfnResource)
	// Add a value to the CloudFormation Resource Metadata.
	// See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
	//
	// Note that this is a different set of metadata from CDK node metadata; this
	// metadata ends up in the stack template under the resource, whereas CDK
	// node metadata ends up in the Cloud Assembly.
	//
	// Experimental.
	AddMetadata(key *string, value interface{})
	// Adds an override to the synthesized CloudFormation resource.
	//
	// To add a
	// property override, either use `addPropertyOverride` or prefix `path` with
	// "Properties." (i.e. `Properties.TopicName`).
	//
	// If the override is nested, separate each nested level using a dot (.) in the path parameter.
	// If there is an array as part of the nesting, specify the index in the path.
	//
	// To include a literal `.` in the property name, prefix with a `\`. In most
	// programming languages you will need to write this as `"\\."` because the
	// `\` itself will need to be escaped.
	//
	// For example,
	// ```typescript
	// cfnResource.addOverride('Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes', ['myattribute']);
	// cfnResource.addOverride('Properties.GlobalSecondaryIndexes.1.ProjectionType', 'INCLUDE');
	// ```
	// would add the overrides
	// ```json
	// "Properties": {
	//    "GlobalSecondaryIndexes": [
	//      {
	//        "Projection": {
	//          "NonKeyAttributes": [ "myattribute" ]
	//          ...
	//        }
	//        ...
	//      },
	//      {
	//        "ProjectionType": "INCLUDE"
	//        ...
	//      },
	//    ]
	//    ...
	// }
	// ```
	//
	// The `value` argument to `addOverride` will not be processed or translated
	// in any way. Pass raw JSON values in here with the correct capitalization
	// for CloudFormation. If you pass CDK classes or structs, they will be
	// rendered with lowercased key names, and CloudFormation will reject the
	// template.
	// Experimental.
	AddOverride(path *string, value interface{})
	// Adds an override that deletes the value of a property from the resource definition.
	// Experimental.
	AddPropertyDeletionOverride(propertyPath *string)
	// Adds an override to a resource property.
	//
	// Syntactic sugar for `addOverride("Properties.<...>", value)`.
	// Experimental.
	AddPropertyOverride(propertyPath *string, value interface{})
	// Sets the deletion policy of the resource based on the removal policy specified.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy, options *awscdk.RemovalPolicyOptions)
	// Returns a token for an runtime attribute of this resource.
	//
	// Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility
	// in case there is no generated attribute.
	// Experimental.
	GetAtt(attributeName *string) awscdk.Reference
	// Retrieve a value value from the CloudFormation Resource Metadata.
	// See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
	//
	// Note that this is a different set of metadata from CDK node metadata; this
	// metadata ends up in the stack template under the resource, whereas CDK
	// node metadata ends up in the Cloud Assembly.
	//
	// Experimental.
	GetMetadata(key *string) interface{}
	// Examines the CloudFormation resource and discloses attributes.
	Inspect(inspector awscdk.TreeInspector)
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	OnValidate() *[]*string
	// Overrides the auto-generated logical ID with a specific ID.
	// Experimental.
	OverrideLogicalId(newLogicalId *string)
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	Prepare()
	RenderProperties(props *map[string]interface{}) *map[string]interface{}
	// Can be overridden by subclasses to determine if this resource will be rendered into the cloudformation template.
	//
	// Returns: `true` if the resource should be included or `false` is the resource
	// should be omitted.
	// Experimental.
	ShouldSynthesize() *bool
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	Synthesize(session awscdk.ISynthesisSession)
	// Returns a string representation of this construct.
	//
	// Returns: a string representation of this resource.
	// Experimental.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	Validate() *[]*string
	// Experimental.
	ValidateProperties(_properties interface{})
}

// The jsii proxy struct for CfnInsightRule
type jsiiProxy_CfnInsightRule struct {
	internal.Type__awscdkCfnResource
	internal.Type__awscdkIInspectable
}

func (j *jsiiProxy_CfnInsightRule) AttrArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"attrArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnInsightRule) AttrRuleName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"attrRuleName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnInsightRule) CfnOptions() awscdk.ICfnResourceOptions {
	var returns awscdk.ICfnResourceOptions
	_jsii_.Get(
		j,
		"cfnOptions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnInsightRule) CfnProperties() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"cfnProperties",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnInsightRule) CfnResourceType() *string {
	var returns *string
	_jsii_.Get(
		j,
		"cfnResourceType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnInsightRule) CreationStack() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"creationStack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnInsightRule) LogicalId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"logicalId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnInsightRule) Node() awscdk.ConstructNode {
	var returns awscdk.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnInsightRule) Ref() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ref",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnInsightRule) RuleBody() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ruleBody",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnInsightRule) RuleName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ruleName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnInsightRule) RuleState() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ruleState",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnInsightRule) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnInsightRule) Tags() awscdk.TagManager {
	var returns awscdk.TagManager
	_jsii_.Get(
		j,
		"tags",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnInsightRule) UpdatedProperites() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"updatedProperites",
		&returns,
	)
	return returns
}


// Create a new `AWS::CloudWatch::InsightRule`.
func NewCfnInsightRule(scope awscdk.Construct, id *string, props *CfnInsightRuleProps) CfnInsightRule {
	_init_.Initialize()

	j := jsiiProxy_CfnInsightRule{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.CfnInsightRule",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Create a new `AWS::CloudWatch::InsightRule`.
func NewCfnInsightRule_Override(c CfnInsightRule, scope awscdk.Construct, id *string, props *CfnInsightRuleProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.CfnInsightRule",
		[]interface{}{scope, id, props},
		c,
	)
}

func (j *jsiiProxy_CfnInsightRule) SetRuleBody(val *string) {
	_jsii_.Set(
		j,
		"ruleBody",
		val,
	)
}

func (j *jsiiProxy_CfnInsightRule) SetRuleName(val *string) {
	_jsii_.Set(
		j,
		"ruleName",
		val,
	)
}

func (j *jsiiProxy_CfnInsightRule) SetRuleState(val *string) {
	_jsii_.Set(
		j,
		"ruleState",
		val,
	)
}

// Returns `true` if a construct is a stack element (i.e. part of the synthesized cloudformation template).
//
// Uses duck-typing instead of `instanceof` to allow stack elements from different
// versions of this library to be included in the same stack.
//
// Returns: The construct as a stack element or undefined if it is not a stack element.
// Experimental.
func CfnInsightRule_IsCfnElement(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnInsightRule",
		"isCfnElement",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a CfnResource.
// Experimental.
func CfnInsightRule_IsCfnResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnInsightRule",
		"isCfnResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Return whether the given object is a Construct.
// Experimental.
func CfnInsightRule_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnInsightRule",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func CfnInsightRule_CFN_RESOURCE_TYPE_NAME() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"monocdk.aws_cloudwatch.CfnInsightRule",
		"CFN_RESOURCE_TYPE_NAME",
		&returns,
	)
	return returns
}

func (c *jsiiProxy_CfnInsightRule) AddDeletionOverride(path *string) {
	_jsii_.InvokeVoid(
		c,
		"addDeletionOverride",
		[]interface{}{path},
	)
}

func (c *jsiiProxy_CfnInsightRule) AddDependsOn(target awscdk.CfnResource) {
	_jsii_.InvokeVoid(
		c,
		"addDependsOn",
		[]interface{}{target},
	)
}

func (c *jsiiProxy_CfnInsightRule) AddMetadata(key *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addMetadata",
		[]interface{}{key, value},
	)
}

func (c *jsiiProxy_CfnInsightRule) AddOverride(path *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addOverride",
		[]interface{}{path, value},
	)
}

func (c *jsiiProxy_CfnInsightRule) AddPropertyDeletionOverride(propertyPath *string) {
	_jsii_.InvokeVoid(
		c,
		"addPropertyDeletionOverride",
		[]interface{}{propertyPath},
	)
}

func (c *jsiiProxy_CfnInsightRule) AddPropertyOverride(propertyPath *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addPropertyOverride",
		[]interface{}{propertyPath, value},
	)
}

func (c *jsiiProxy_CfnInsightRule) ApplyRemovalPolicy(policy awscdk.RemovalPolicy, options *awscdk.RemovalPolicyOptions) {
	_jsii_.InvokeVoid(
		c,
		"applyRemovalPolicy",
		[]interface{}{policy, options},
	)
}

func (c *jsiiProxy_CfnInsightRule) GetAtt(attributeName *string) awscdk.Reference {
	var returns awscdk.Reference

	_jsii_.Invoke(
		c,
		"getAtt",
		[]interface{}{attributeName},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnInsightRule) GetMetadata(key *string) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"getMetadata",
		[]interface{}{key},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnInsightRule) Inspect(inspector awscdk.TreeInspector) {
	_jsii_.InvokeVoid(
		c,
		"inspect",
		[]interface{}{inspector},
	)
}

func (c *jsiiProxy_CfnInsightRule) OnPrepare() {
	_jsii_.InvokeVoid(
		c,
		"onPrepare",
		nil, // no parameters
	)
}

func (c *jsiiProxy_CfnInsightRule) OnSynthesize(session constructs.ISynthesisSession) {
	_jsii_.InvokeVoid(
		c,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (c *jsiiProxy_CfnInsightRule) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		c,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnInsightRule) OverrideLogicalId(newLogicalId *string) {
	_jsii_.InvokeVoid(
		c,
		"overrideLogicalId",
		[]interface{}{newLogicalId},
	)
}

func (c *jsiiProxy_CfnInsightRule) Prepare() {
	_jsii_.InvokeVoid(
		c,
		"prepare",
		nil, // no parameters
	)
}

func (c *jsiiProxy_CfnInsightRule) RenderProperties(props *map[string]interface{}) *map[string]interface{} {
	var returns *map[string]interface{}

	_jsii_.Invoke(
		c,
		"renderProperties",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnInsightRule) ShouldSynthesize() *bool {
	var returns *bool

	_jsii_.Invoke(
		c,
		"shouldSynthesize",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnInsightRule) Synthesize(session awscdk.ISynthesisSession) {
	_jsii_.InvokeVoid(
		c,
		"synthesize",
		[]interface{}{session},
	)
}

func (c *jsiiProxy_CfnInsightRule) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnInsightRule) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		c,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnInsightRule) ValidateProperties(_properties interface{}) {
	_jsii_.InvokeVoid(
		c,
		"validateProperties",
		[]interface{}{_properties},
	)
}

// Properties for defining a `CfnInsightRule`.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   cfnInsightRuleProps := &cfnInsightRuleProps{
//   	ruleBody: jsii.String("ruleBody"),
//   	ruleName: jsii.String("ruleName"),
//   	ruleState: jsii.String("ruleState"),
//
//   	// the properties below are optional
//   	tags: []interface{}{
//   		&cfnTag{
//   			key: jsii.String("key"),
//   			value: jsii.String("value"),
//   		},
//   	},
//   }
//
type CfnInsightRuleProps struct {
	// The definition of the rule, as a JSON object.
	//
	// For details about the syntax, see [Contributor Insights Rule Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html) in the *Amazon CloudWatch User Guide* .
	RuleBody *string `json:"ruleBody" yaml:"ruleBody"`
	// The name of the rule.
	RuleName *string `json:"ruleName" yaml:"ruleName"`
	// The current state of the rule.
	//
	// Valid values are `ENABLED` and `DISABLED` .
	RuleState *string `json:"ruleState" yaml:"ruleState"`
	// A list of key-value pairs to associate with the Contributor Insights rule.
	//
	// You can associate as many as 50 tags with a rule.
	//
	// Tags can help you organize and categorize your resources. For more information, see [Tagging Your Amazon CloudWatch Resources](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Tagging.html) .
	//
	// To be able to associate tags with a rule, you must have the `cloudwatch:TagResource` permission in addition to the `cloudwatch:PutInsightRule` permission.
	Tags interface{} `json:"tags" yaml:"tags"`
}

// A CloudFormation `AWS::CloudWatch::MetricStream`.
//
// Creates or updates a metric stream. Metrics streams can automatically stream CloudWatch metrics to AWS destinations including Amazon S3 and to many third-party solutions. For more information, see [Metric streams](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Metric-Streams.html) .
//
// To create a metric stream, you must be logged on to an account that has the `iam:PassRole` permission and either the *CloudWatchFullAccess* policy or the `cloudwatch:PutMetricStream` permission.
//
// When you create or update a metric stream, you choose one of the following:
//
// - Stream metrics from all metric namespaces in the account.
// - Stream metrics from all metric namespaces in the account, except for the namespaces that you list in `ExcludeFilters` .
// - Stream metrics from only the metric namespaces that you list in `IncludeFilters` .
//
// When you create a metric stream, the stream is created in the `running` state. If you update an existing metric stream, the state does not change.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   cfnMetricStream := cloudwatch.NewCfnMetricStream(this, jsii.String("MyCfnMetricStream"), &cfnMetricStreamProps{
//   	firehoseArn: jsii.String("firehoseArn"),
//   	outputFormat: jsii.String("outputFormat"),
//   	roleArn: jsii.String("roleArn"),
//
//   	// the properties below are optional
//   	excludeFilters: []interface{}{
//   		&metricStreamFilterProperty{
//   			namespace: jsii.String("namespace"),
//   		},
//   	},
//   	includeFilters: []interface{}{
//   		&metricStreamFilterProperty{
//   			namespace: jsii.String("namespace"),
//   		},
//   	},
//   	name: jsii.String("name"),
//   	statisticsConfigurations: []interface{}{
//   		&metricStreamStatisticsConfigurationProperty{
//   			additionalStatistics: []*string{
//   				jsii.String("additionalStatistics"),
//   			},
//   			includeMetrics: []interface{}{
//   				&metricStreamStatisticsMetricProperty{
//   					metricName: jsii.String("metricName"),
//   					namespace: jsii.String("namespace"),
//   				},
//   			},
//   		},
//   	},
//   	tags: []cfnTag{
//   		&cfnTag{
//   			key: jsii.String("key"),
//   			value: jsii.String("value"),
//   		},
//   	},
//   })
//
type CfnMetricStream interface {
	awscdk.CfnResource
	awscdk.IInspectable
	// The ARN of the metric stream.
	AttrArn() *string
	// The date that the metric stream was originally created.
	AttrCreationDate() *string
	// The date that the metric stream was most recently updated.
	AttrLastUpdateDate() *string
	// The state of the metric stream, either `running` or `stopped` .
	AttrState() *string
	// Options for this resource, such as condition, update policy etc.
	// Experimental.
	CfnOptions() awscdk.ICfnResourceOptions
	CfnProperties() *map[string]interface{}
	// AWS resource type.
	// Experimental.
	CfnResourceType() *string
	// Returns: the stack trace of the point where this Resource was created from, sourced
	// from the +metadata+ entry typed +aws:cdk:logicalId+, and with the bottom-most
	// node +internal+ entries filtered.
	// Experimental.
	CreationStack() *[]*string
	// If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here.
	//
	// You cannot specify both `IncludeFilters` and `ExcludeFilters` in the same metric stream.
	//
	// When you modify the `IncludeFilters` or `ExcludeFilters` of an existing metric stream in any way, the metric stream is effectively restarted, so after such a change you will get only the datapoints that have a timestamp after the time of the update.
	ExcludeFilters() interface{}
	SetExcludeFilters(val interface{})
	// The ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream.
	//
	// This Amazon Kinesis Firehose delivery stream must already exist and must be in the same account as the metric stream.
	FirehoseArn() *string
	SetFirehoseArn(val *string)
	// If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here.
	//
	// You cannot specify both `IncludeFilters` and `ExcludeFilters` in the same metric stream.
	//
	// When you modify the `IncludeFilters` or `ExcludeFilters` of an existing metric stream in any way, the metric stream is effectively restarted, so after such a change you will get only the datapoints that have a timestamp after the time of the update.
	IncludeFilters() interface{}
	SetIncludeFilters(val interface{})
	// The logical ID for this CloudFormation stack element.
	//
	// The logical ID of the element
	// is calculated from the path of the resource node in the construct tree.
	//
	// To override this value, use `overrideLogicalId(newLogicalId)`.
	//
	// Returns: the logical ID as a stringified token. This value will only get
	// resolved during synthesis.
	// Experimental.
	LogicalId() *string
	// If you are creating a new metric stream, this is the name for the new stream.
	//
	// The name must be different than the names of other metric streams in this account and Region.
	//
	// If you are updating a metric stream, specify the name of that stream here.
	Name() *string
	SetName(val *string)
	// The construct tree node associated with this construct.
	// Experimental.
	Node() awscdk.ConstructNode
	// The output format for the stream.
	//
	// Valid values are `json` and `opentelemetry0.7` For more information about metric stream output formats, see [Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html) .
	//
	// This parameter is required.
	OutputFormat() *string
	SetOutputFormat(val *string)
	// Return a string that will be resolved to a CloudFormation `{ Ref }` for this element.
	//
	// If, by any chance, the intrinsic reference of a resource is not a string, you could
	// coerce it to an IResolvable through `Lazy.any({ produce: resource.ref })`.
	// Experimental.
	Ref() *string
	// The ARN of an IAM role that this metric stream will use to access Amazon Kinesis Firehose resources.
	//
	// This IAM role must already exist and must be in the same account as the metric stream. This IAM role must include the `firehose:PutRecord` and `firehose:PutRecordBatch` permissions.
	RoleArn() *string
	SetRoleArn(val *string)
	// The stack in which this element is defined.
	//
	// CfnElements must be defined within a stack scope (directly or indirectly).
	// Experimental.
	Stack() awscdk.Stack
	// By default, a metric stream always sends the MAX, MIN, SUM, and SAMPLECOUNT statistics for each metric that is streamed.
	//
	// You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members.
	//
	// For each entry in this array, you specify one or more metrics and the list of additional statistics to stream for those metrics. The additional statistics that you can stream depend on the stream's `OutputFormat` . If the `OutputFormat` is `json` , you can stream any additional statistic that is supported by CloudWatch , listed in [CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html) . If the `OutputFormat` is `opentelemetry0` .7, you can stream percentile statistics *(p??)* .
	StatisticsConfigurations() interface{}
	SetStatisticsConfigurations(val interface{})
	// An array of key-value pairs to apply to the metric stream.
	//
	// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
	Tags() awscdk.TagManager
	// Return properties modified after initiation.
	//
	// Resources that expose mutable properties should override this function to
	// collect and return the properties object for this resource.
	// Experimental.
	UpdatedProperites() *map[string]interface{}
	// Syntactic sugar for `addOverride(path, undefined)`.
	// Experimental.
	AddDeletionOverride(path *string)
	// Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.
	//
	// This can be used for resources across stacks (or nested stack) boundaries
	// and the dependency will automatically be transferred to the relevant scope.
	// Experimental.
	AddDependsOn(target awscdk.CfnResource)
	// Add a value to the CloudFormation Resource Metadata.
	// See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
	//
	// Note that this is a different set of metadata from CDK node metadata; this
	// metadata ends up in the stack template under the resource, whereas CDK
	// node metadata ends up in the Cloud Assembly.
	//
	// Experimental.
	AddMetadata(key *string, value interface{})
	// Adds an override to the synthesized CloudFormation resource.
	//
	// To add a
	// property override, either use `addPropertyOverride` or prefix `path` with
	// "Properties." (i.e. `Properties.TopicName`).
	//
	// If the override is nested, separate each nested level using a dot (.) in the path parameter.
	// If there is an array as part of the nesting, specify the index in the path.
	//
	// To include a literal `.` in the property name, prefix with a `\`. In most
	// programming languages you will need to write this as `"\\."` because the
	// `\` itself will need to be escaped.
	//
	// For example,
	// ```typescript
	// cfnResource.addOverride('Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes', ['myattribute']);
	// cfnResource.addOverride('Properties.GlobalSecondaryIndexes.1.ProjectionType', 'INCLUDE');
	// ```
	// would add the overrides
	// ```json
	// "Properties": {
	//    "GlobalSecondaryIndexes": [
	//      {
	//        "Projection": {
	//          "NonKeyAttributes": [ "myattribute" ]
	//          ...
	//        }
	//        ...
	//      },
	//      {
	//        "ProjectionType": "INCLUDE"
	//        ...
	//      },
	//    ]
	//    ...
	// }
	// ```
	//
	// The `value` argument to `addOverride` will not be processed or translated
	// in any way. Pass raw JSON values in here with the correct capitalization
	// for CloudFormation. If you pass CDK classes or structs, they will be
	// rendered with lowercased key names, and CloudFormation will reject the
	// template.
	// Experimental.
	AddOverride(path *string, value interface{})
	// Adds an override that deletes the value of a property from the resource definition.
	// Experimental.
	AddPropertyDeletionOverride(propertyPath *string)
	// Adds an override to a resource property.
	//
	// Syntactic sugar for `addOverride("Properties.<...>", value)`.
	// Experimental.
	AddPropertyOverride(propertyPath *string, value interface{})
	// Sets the deletion policy of the resource based on the removal policy specified.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy, options *awscdk.RemovalPolicyOptions)
	// Returns a token for an runtime attribute of this resource.
	//
	// Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility
	// in case there is no generated attribute.
	// Experimental.
	GetAtt(attributeName *string) awscdk.Reference
	// Retrieve a value value from the CloudFormation Resource Metadata.
	// See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
	//
	// Note that this is a different set of metadata from CDK node metadata; this
	// metadata ends up in the stack template under the resource, whereas CDK
	// node metadata ends up in the Cloud Assembly.
	//
	// Experimental.
	GetMetadata(key *string) interface{}
	// Examines the CloudFormation resource and discloses attributes.
	Inspect(inspector awscdk.TreeInspector)
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	OnValidate() *[]*string
	// Overrides the auto-generated logical ID with a specific ID.
	// Experimental.
	OverrideLogicalId(newLogicalId *string)
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	Prepare()
	RenderProperties(props *map[string]interface{}) *map[string]interface{}
	// Can be overridden by subclasses to determine if this resource will be rendered into the cloudformation template.
	//
	// Returns: `true` if the resource should be included or `false` is the resource
	// should be omitted.
	// Experimental.
	ShouldSynthesize() *bool
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	Synthesize(session awscdk.ISynthesisSession)
	// Returns a string representation of this construct.
	//
	// Returns: a string representation of this resource.
	// Experimental.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	Validate() *[]*string
	// Experimental.
	ValidateProperties(_properties interface{})
}

// The jsii proxy struct for CfnMetricStream
type jsiiProxy_CfnMetricStream struct {
	internal.Type__awscdkCfnResource
	internal.Type__awscdkIInspectable
}

func (j *jsiiProxy_CfnMetricStream) AttrArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"attrArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) AttrCreationDate() *string {
	var returns *string
	_jsii_.Get(
		j,
		"attrCreationDate",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) AttrLastUpdateDate() *string {
	var returns *string
	_jsii_.Get(
		j,
		"attrLastUpdateDate",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) AttrState() *string {
	var returns *string
	_jsii_.Get(
		j,
		"attrState",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) CfnOptions() awscdk.ICfnResourceOptions {
	var returns awscdk.ICfnResourceOptions
	_jsii_.Get(
		j,
		"cfnOptions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) CfnProperties() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"cfnProperties",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) CfnResourceType() *string {
	var returns *string
	_jsii_.Get(
		j,
		"cfnResourceType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) CreationStack() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"creationStack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) ExcludeFilters() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"excludeFilters",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) FirehoseArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"firehoseArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) IncludeFilters() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"includeFilters",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) LogicalId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"logicalId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) Node() awscdk.ConstructNode {
	var returns awscdk.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) OutputFormat() *string {
	var returns *string
	_jsii_.Get(
		j,
		"outputFormat",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) Ref() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ref",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) RoleArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"roleArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) StatisticsConfigurations() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"statisticsConfigurations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) Tags() awscdk.TagManager {
	var returns awscdk.TagManager
	_jsii_.Get(
		j,
		"tags",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CfnMetricStream) UpdatedProperites() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"updatedProperites",
		&returns,
	)
	return returns
}


// Create a new `AWS::CloudWatch::MetricStream`.
func NewCfnMetricStream(scope awscdk.Construct, id *string, props *CfnMetricStreamProps) CfnMetricStream {
	_init_.Initialize()

	j := jsiiProxy_CfnMetricStream{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.CfnMetricStream",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Create a new `AWS::CloudWatch::MetricStream`.
func NewCfnMetricStream_Override(c CfnMetricStream, scope awscdk.Construct, id *string, props *CfnMetricStreamProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.CfnMetricStream",
		[]interface{}{scope, id, props},
		c,
	)
}

func (j *jsiiProxy_CfnMetricStream) SetExcludeFilters(val interface{}) {
	_jsii_.Set(
		j,
		"excludeFilters",
		val,
	)
}

func (j *jsiiProxy_CfnMetricStream) SetFirehoseArn(val *string) {
	_jsii_.Set(
		j,
		"firehoseArn",
		val,
	)
}

func (j *jsiiProxy_CfnMetricStream) SetIncludeFilters(val interface{}) {
	_jsii_.Set(
		j,
		"includeFilters",
		val,
	)
}

func (j *jsiiProxy_CfnMetricStream) SetName(val *string) {
	_jsii_.Set(
		j,
		"name",
		val,
	)
}

func (j *jsiiProxy_CfnMetricStream) SetOutputFormat(val *string) {
	_jsii_.Set(
		j,
		"outputFormat",
		val,
	)
}

func (j *jsiiProxy_CfnMetricStream) SetRoleArn(val *string) {
	_jsii_.Set(
		j,
		"roleArn",
		val,
	)
}

func (j *jsiiProxy_CfnMetricStream) SetStatisticsConfigurations(val interface{}) {
	_jsii_.Set(
		j,
		"statisticsConfigurations",
		val,
	)
}

// Returns `true` if a construct is a stack element (i.e. part of the synthesized cloudformation template).
//
// Uses duck-typing instead of `instanceof` to allow stack elements from different
// versions of this library to be included in the same stack.
//
// Returns: The construct as a stack element or undefined if it is not a stack element.
// Experimental.
func CfnMetricStream_IsCfnElement(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnMetricStream",
		"isCfnElement",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a CfnResource.
// Experimental.
func CfnMetricStream_IsCfnResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnMetricStream",
		"isCfnResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Return whether the given object is a Construct.
// Experimental.
func CfnMetricStream_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CfnMetricStream",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func CfnMetricStream_CFN_RESOURCE_TYPE_NAME() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"monocdk.aws_cloudwatch.CfnMetricStream",
		"CFN_RESOURCE_TYPE_NAME",
		&returns,
	)
	return returns
}

func (c *jsiiProxy_CfnMetricStream) AddDeletionOverride(path *string) {
	_jsii_.InvokeVoid(
		c,
		"addDeletionOverride",
		[]interface{}{path},
	)
}

func (c *jsiiProxy_CfnMetricStream) AddDependsOn(target awscdk.CfnResource) {
	_jsii_.InvokeVoid(
		c,
		"addDependsOn",
		[]interface{}{target},
	)
}

func (c *jsiiProxy_CfnMetricStream) AddMetadata(key *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addMetadata",
		[]interface{}{key, value},
	)
}

func (c *jsiiProxy_CfnMetricStream) AddOverride(path *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addOverride",
		[]interface{}{path, value},
	)
}

func (c *jsiiProxy_CfnMetricStream) AddPropertyDeletionOverride(propertyPath *string) {
	_jsii_.InvokeVoid(
		c,
		"addPropertyDeletionOverride",
		[]interface{}{propertyPath},
	)
}

func (c *jsiiProxy_CfnMetricStream) AddPropertyOverride(propertyPath *string, value interface{}) {
	_jsii_.InvokeVoid(
		c,
		"addPropertyOverride",
		[]interface{}{propertyPath, value},
	)
}

func (c *jsiiProxy_CfnMetricStream) ApplyRemovalPolicy(policy awscdk.RemovalPolicy, options *awscdk.RemovalPolicyOptions) {
	_jsii_.InvokeVoid(
		c,
		"applyRemovalPolicy",
		[]interface{}{policy, options},
	)
}

func (c *jsiiProxy_CfnMetricStream) GetAtt(attributeName *string) awscdk.Reference {
	var returns awscdk.Reference

	_jsii_.Invoke(
		c,
		"getAtt",
		[]interface{}{attributeName},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnMetricStream) GetMetadata(key *string) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"getMetadata",
		[]interface{}{key},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnMetricStream) Inspect(inspector awscdk.TreeInspector) {
	_jsii_.InvokeVoid(
		c,
		"inspect",
		[]interface{}{inspector},
	)
}

func (c *jsiiProxy_CfnMetricStream) OnPrepare() {
	_jsii_.InvokeVoid(
		c,
		"onPrepare",
		nil, // no parameters
	)
}

func (c *jsiiProxy_CfnMetricStream) OnSynthesize(session constructs.ISynthesisSession) {
	_jsii_.InvokeVoid(
		c,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (c *jsiiProxy_CfnMetricStream) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		c,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnMetricStream) OverrideLogicalId(newLogicalId *string) {
	_jsii_.InvokeVoid(
		c,
		"overrideLogicalId",
		[]interface{}{newLogicalId},
	)
}

func (c *jsiiProxy_CfnMetricStream) Prepare() {
	_jsii_.InvokeVoid(
		c,
		"prepare",
		nil, // no parameters
	)
}

func (c *jsiiProxy_CfnMetricStream) RenderProperties(props *map[string]interface{}) *map[string]interface{} {
	var returns *map[string]interface{}

	_jsii_.Invoke(
		c,
		"renderProperties",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnMetricStream) ShouldSynthesize() *bool {
	var returns *bool

	_jsii_.Invoke(
		c,
		"shouldSynthesize",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnMetricStream) Synthesize(session awscdk.ISynthesisSession) {
	_jsii_.InvokeVoid(
		c,
		"synthesize",
		[]interface{}{session},
	)
}

func (c *jsiiProxy_CfnMetricStream) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnMetricStream) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		c,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CfnMetricStream) ValidateProperties(_properties interface{}) {
	_jsii_.InvokeVoid(
		c,
		"validateProperties",
		[]interface{}{_properties},
	)
}

// This structure contains the name of one of the metric namespaces that is listed in a filter of a metric stream.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   metricStreamFilterProperty := &metricStreamFilterProperty{
//   	namespace: jsii.String("namespace"),
//   }
//
type CfnMetricStream_MetricStreamFilterProperty struct {
	// The name of the metric namespace in the filter.
	Namespace *string `json:"namespace" yaml:"namespace"`
}

// This structure specifies a list of additional statistics to stream, and the metrics to stream those additional statistics for.
//
// All metrics that match the combination of metric name and namespace will be streamed with the additional statistics, no matter their dimensions.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   metricStreamStatisticsConfigurationProperty := &metricStreamStatisticsConfigurationProperty{
//   	additionalStatistics: []*string{
//   		jsii.String("additionalStatistics"),
//   	},
//   	includeMetrics: []interface{}{
//   		&metricStreamStatisticsMetricProperty{
//   			metricName: jsii.String("metricName"),
//   			namespace: jsii.String("namespace"),
//   		},
//   	},
//   }
//
type CfnMetricStream_MetricStreamStatisticsConfigurationProperty struct {
	// The additional statistics to stream for the metrics listed in `IncludeMetrics` .
	AdditionalStatistics *[]*string `json:"additionalStatistics" yaml:"additionalStatistics"`
	// An array that defines the metrics that are to have additional statistics streamed.
	IncludeMetrics interface{} `json:"includeMetrics" yaml:"includeMetrics"`
}

// A structure that specifies the metric name and namespace for one metric that is going to have additional statistics included in the stream.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   metricStreamStatisticsMetricProperty := &metricStreamStatisticsMetricProperty{
//   	metricName: jsii.String("metricName"),
//   	namespace: jsii.String("namespace"),
//   }
//
type CfnMetricStream_MetricStreamStatisticsMetricProperty struct {
	// The name of the metric.
	MetricName *string `json:"metricName" yaml:"metricName"`
	// The namespace of the metric.
	Namespace *string `json:"namespace" yaml:"namespace"`
}

// Properties for defining a `CfnMetricStream`.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   cfnMetricStreamProps := &cfnMetricStreamProps{
//   	firehoseArn: jsii.String("firehoseArn"),
//   	outputFormat: jsii.String("outputFormat"),
//   	roleArn: jsii.String("roleArn"),
//
//   	// the properties below are optional
//   	excludeFilters: []interface{}{
//   		&metricStreamFilterProperty{
//   			namespace: jsii.String("namespace"),
//   		},
//   	},
//   	includeFilters: []interface{}{
//   		&metricStreamFilterProperty{
//   			namespace: jsii.String("namespace"),
//   		},
//   	},
//   	name: jsii.String("name"),
//   	statisticsConfigurations: []interface{}{
//   		&metricStreamStatisticsConfigurationProperty{
//   			additionalStatistics: []*string{
//   				jsii.String("additionalStatistics"),
//   			},
//   			includeMetrics: []interface{}{
//   				&metricStreamStatisticsMetricProperty{
//   					metricName: jsii.String("metricName"),
//   					namespace: jsii.String("namespace"),
//   				},
//   			},
//   		},
//   	},
//   	tags: []cfnTag{
//   		&cfnTag{
//   			key: jsii.String("key"),
//   			value: jsii.String("value"),
//   		},
//   	},
//   }
//
type CfnMetricStreamProps struct {
	// The ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream.
	//
	// This Amazon Kinesis Firehose delivery stream must already exist and must be in the same account as the metric stream.
	FirehoseArn *string `json:"firehoseArn" yaml:"firehoseArn"`
	// The output format for the stream.
	//
	// Valid values are `json` and `opentelemetry0.7` For more information about metric stream output formats, see [Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html) .
	//
	// This parameter is required.
	OutputFormat *string `json:"outputFormat" yaml:"outputFormat"`
	// The ARN of an IAM role that this metric stream will use to access Amazon Kinesis Firehose resources.
	//
	// This IAM role must already exist and must be in the same account as the metric stream. This IAM role must include the `firehose:PutRecord` and `firehose:PutRecordBatch` permissions.
	RoleArn *string `json:"roleArn" yaml:"roleArn"`
	// If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here.
	//
	// You cannot specify both `IncludeFilters` and `ExcludeFilters` in the same metric stream.
	//
	// When you modify the `IncludeFilters` or `ExcludeFilters` of an existing metric stream in any way, the metric stream is effectively restarted, so after such a change you will get only the datapoints that have a timestamp after the time of the update.
	ExcludeFilters interface{} `json:"excludeFilters" yaml:"excludeFilters"`
	// If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here.
	//
	// You cannot specify both `IncludeFilters` and `ExcludeFilters` in the same metric stream.
	//
	// When you modify the `IncludeFilters` or `ExcludeFilters` of an existing metric stream in any way, the metric stream is effectively restarted, so after such a change you will get only the datapoints that have a timestamp after the time of the update.
	IncludeFilters interface{} `json:"includeFilters" yaml:"includeFilters"`
	// If you are creating a new metric stream, this is the name for the new stream.
	//
	// The name must be different than the names of other metric streams in this account and Region.
	//
	// If you are updating a metric stream, specify the name of that stream here.
	Name *string `json:"name" yaml:"name"`
	// By default, a metric stream always sends the MAX, MIN, SUM, and SAMPLECOUNT statistics for each metric that is streamed.
	//
	// You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members.
	//
	// For each entry in this array, you specify one or more metrics and the list of additional statistics to stream for those metrics. The additional statistics that you can stream depend on the stream's `OutputFormat` . If the `OutputFormat` is `json` , you can stream any additional statistic that is supported by CloudWatch , listed in [CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html) . If the `OutputFormat` is `opentelemetry0` .7, you can stream percentile statistics *(p??)* .
	StatisticsConfigurations interface{} `json:"statisticsConfigurations" yaml:"statisticsConfigurations"`
	// An array of key-value pairs to apply to the metric stream.
	//
	// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
	Tags *[]*awscdk.CfnTag `json:"tags" yaml:"tags"`
}

// A set of standard colours that can be used in annotations in a GraphWidget.
//
// Example:
//   var dashboard dashboard
//   var executionCountMetric metric
//   var errorCountMetric metric
//
//   dashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{
//   	title: jsii.String("Executions vs error rate"),
//
//   	left: []iMetric{
//   		executionCountMetric,
//   	},
//
//   	right: []*iMetric{
//   		errorCountMetric.with(&metricOptions{
//   			statistic: jsii.String("average"),
//   			label: jsii.String("Error rate"),
//   			color: cloudwatch.color_GREEN(),
//   		}),
//   	},
//   }))
//
// Experimental.
type Color interface {
}

// The jsii proxy struct for Color
type jsiiProxy_Color struct {
	_ byte // padding
}

func Color_BLUE() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"monocdk.aws_cloudwatch.Color",
		"BLUE",
		&returns,
	)
	return returns
}

func Color_BROWN() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"monocdk.aws_cloudwatch.Color",
		"BROWN",
		&returns,
	)
	return returns
}

func Color_GREEN() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"monocdk.aws_cloudwatch.Color",
		"GREEN",
		&returns,
	)
	return returns
}

func Color_GREY() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"monocdk.aws_cloudwatch.Color",
		"GREY",
		&returns,
	)
	return returns
}

func Color_ORANGE() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"monocdk.aws_cloudwatch.Color",
		"ORANGE",
		&returns,
	)
	return returns
}

func Color_PINK() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"monocdk.aws_cloudwatch.Color",
		"PINK",
		&returns,
	)
	return returns
}

func Color_PURPLE() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"monocdk.aws_cloudwatch.Color",
		"PURPLE",
		&returns,
	)
	return returns
}

func Color_RED() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"monocdk.aws_cloudwatch.Color",
		"RED",
		&returns,
	)
	return returns
}

// A widget that contains other widgets in a vertical column.
//
// Widgets will be laid out next to each other.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//
//   var widget iWidget
//   column := cloudwatch.NewColumn(widget)
//
// Experimental.
type Column interface {
	IWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// List of contained widgets.
	// Experimental.
	Widgets() *[]IWidget
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for Column
type jsiiProxy_Column struct {
	jsiiProxy_IWidget
}

func (j *jsiiProxy_Column) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Column) Widgets() *[]IWidget {
	var returns *[]IWidget
	_jsii_.Get(
		j,
		"widgets",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Column) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}


// Experimental.
func NewColumn(widgets ...IWidget) Column {
	_init_.Initialize()

	args := []interface{}{}
	for _, a := range widgets {
		args = append(args, a)
	}

	j := jsiiProxy_Column{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.Column",
		args,
		&j,
	)

	return &j
}

// Experimental.
func NewColumn_Override(c Column, widgets ...IWidget) {
	_init_.Initialize()

	args := []interface{}{}
	for _, a := range widgets {
		args = append(args, a)
	}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.Column",
		args,
		c,
	)
}

func (c *jsiiProxy_Column) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		c,
		"position",
		[]interface{}{x, y},
	)
}

func (c *jsiiProxy_Column) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		c,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Options shared by most methods accepting metric options.
//
// Example:
//   import monocdk "github.com/aws/aws-cdk-go/awscdk"import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//
//   var dimensions interface{}
//   var duration duration
//   commonMetricOptions := &commonMetricOptions{
//   	account: jsii.String("account"),
//   	color: jsii.String("color"),
//   	dimensions: map[string]interface{}{
//   		"dimensionsKey": dimensions,
//   	},
//   	dimensionsMap: map[string]*string{
//   		"dimensionsMapKey": jsii.String("dimensionsMap"),
//   	},
//   	label: jsii.String("label"),
//   	period: duration,
//   	region: jsii.String("region"),
//   	statistic: jsii.String("statistic"),
//   	unit: cloudwatch.unit_SECONDS,
//   }
//
// Experimental.
type CommonMetricOptions struct {
	// Account which this metric comes from.
	// Experimental.
	Account *string `json:"account" yaml:"account"`
	// The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The `Color` class has a set of standard colors that can be used here.
	// Experimental.
	Color *string `json:"color" yaml:"color"`
	// Dimensions of the metric.
	// Deprecated: Use 'dimensionsMap' instead.
	Dimensions *map[string]interface{} `json:"dimensions" yaml:"dimensions"`
	// Dimensions of the metric.
	// Experimental.
	DimensionsMap *map[string]*string `json:"dimensionsMap" yaml:"dimensionsMap"`
	// Label for this metric when added to a Graph in a Dashboard.
	//
	// You can use [dynamic labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html)
	// to show summary information about the entire displayed time series
	// in the legend. For example, if you use:
	//
	// ```
	// [max: ${MAX}] MyMetric
	// ```
	//
	// As the metric label, the maximum value in the visible range will
	// be shown next to the time series name in the graph's legend.
	// Experimental.
	Label *string `json:"label" yaml:"label"`
	// The period over which the specified statistic is applied.
	// Experimental.
	Period awscdk.Duration `json:"period" yaml:"period"`
	// Region which this metric comes from.
	// Experimental.
	Region *string `json:"region" yaml:"region"`
	// What function to use for aggregating.
	//
	// Can be one of the following:
	//
	// - "Minimum" | "min"
	// - "Maximum" | "max"
	// - "Average" | "avg"
	// - "Sum" | "sum"
	// - "SampleCount | "n"
	// - "pNN.NN"
	// Experimental.
	Statistic *string `json:"statistic" yaml:"statistic"`
	// Unit used to filter the metric stream.
	//
	// Only refer to datums emitted to the metric stream with the given unit and
	// ignore all others. Only useful when datums are being emitted to the same
	// metric stream under different units.
	//
	// The default is to use all matric datums in the stream, regardless of unit,
	// which is recommended in nearly all cases.
	//
	// CloudWatch does not honor this property for graphs.
	// Experimental.
	Unit Unit `json:"unit" yaml:"unit"`
}

// Comparison operator for evaluating alarms.
//
// Example:
//   import cloudwatch "github.com/aws/aws-cdk-go/awscdk"
//
//   var myHostedZone hostedZone
//   certificate := acm.NewCertificate(this, jsii.String("Certificate"), &certificateProps{
//   	domainName: jsii.String("hello.example.com"),
//   	validation: acm.certificateValidation.fromDns(myHostedZone),
//   })
//   certificate.metricDaysToExpiry().createAlarm(this, jsii.String("Alarm"), &createAlarmOptions{
//   	comparisonOperator: cloudwatch.comparisonOperator_LESS_THAN_THRESHOLD,
//   	evaluationPeriods: jsii.Number(1),
//   	threshold: jsii.Number(45),
//   })
//
// Experimental.
type ComparisonOperator string

const (
	// Specified statistic is greater than or equal to the threshold.
	// Experimental.
	ComparisonOperator_GREATER_THAN_OR_EQUAL_TO_THRESHOLD ComparisonOperator = "GREATER_THAN_OR_EQUAL_TO_THRESHOLD"
	// Specified statistic is strictly greater than the threshold.
	// Experimental.
	ComparisonOperator_GREATER_THAN_THRESHOLD ComparisonOperator = "GREATER_THAN_THRESHOLD"
	// Specified statistic is strictly less than the threshold.
	// Experimental.
	ComparisonOperator_LESS_THAN_THRESHOLD ComparisonOperator = "LESS_THAN_THRESHOLD"
	// Specified statistic is less than or equal to the threshold.
	// Experimental.
	ComparisonOperator_LESS_THAN_OR_EQUAL_TO_THRESHOLD ComparisonOperator = "LESS_THAN_OR_EQUAL_TO_THRESHOLD"
	// Specified statistic is lower than or greater than the anomaly model band.
	//
	// Used only for alarms based on anomaly detection models.
	// Experimental.
	ComparisonOperator_LESS_THAN_LOWER_OR_GREATER_THAN_UPPER_THRESHOLD ComparisonOperator = "LESS_THAN_LOWER_OR_GREATER_THAN_UPPER_THRESHOLD"
	// Specified statistic is greater than the anomaly model band.
	//
	// Used only for alarms based on anomaly detection models.
	// Experimental.
	ComparisonOperator_GREATER_THAN_UPPER_THRESHOLD ComparisonOperator = "GREATER_THAN_UPPER_THRESHOLD"
	// Specified statistic is lower than the anomaly model band.
	//
	// Used only for alarms based on anomaly detection models.
	// Experimental.
	ComparisonOperator_LESS_THAN_LOWER_THRESHOLD ComparisonOperator = "LESS_THAN_LOWER_THRESHOLD"
)

// A Composite Alarm based on Alarm Rule.
//
// Example:
//   var alarm1 alarm
//   var alarm2 alarm
//   var alarm3 alarm
//   var alarm4 alarm
//
//   alarmRule := cloudwatch.alarmRule.anyOf(cloudwatch.alarmRule.allOf(cloudwatch.alarmRule.anyOf(alarm1, cloudwatch.alarmRule.fromAlarm(alarm2, cloudwatch.alarmState_OK), alarm3), cloudwatch.alarmRule.not(cloudwatch.alarmRule.fromAlarm(alarm4, cloudwatch.alarmState_INSUFFICIENT_DATA))), cloudwatch.alarmRule.fromBoolean(jsii.Boolean(false)))
//
//   cloudwatch.NewCompositeAlarm(this, jsii.String("MyAwesomeCompositeAlarm"), &compositeAlarmProps{
//   	alarmRule: alarmRule,
//   })
//
// Experimental.
type CompositeAlarm interface {
	AlarmBase
	// Experimental.
	AlarmActionArns() *[]*string
	// Experimental.
	SetAlarmActionArns(val *[]*string)
	// ARN of this alarm.
	// Experimental.
	AlarmArn() *string
	// Name of this alarm.
	// Experimental.
	AlarmName() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// Experimental.
	InsufficientDataActionArns() *[]*string
	// Experimental.
	SetInsufficientDataActionArns(val *[]*string)
	// The construct tree node associated with this construct.
	// Experimental.
	Node() awscdk.ConstructNode
	// Experimental.
	OkActionArns() *[]*string
	// Experimental.
	SetOkActionArns(val *[]*string)
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Trigger this action if the alarm fires.
	//
	// Typically the ARN of an SNS topic or ARN of an AutoScaling policy.
	// Experimental.
	AddAlarmAction(actions ...IAlarmAction)
	// Trigger this action if there is insufficient data to evaluate the alarm.
	//
	// Typically the ARN of an SNS topic or ARN of an AutoScaling policy.
	// Experimental.
	AddInsufficientDataAction(actions ...IAlarmAction)
	// Trigger this action if the alarm returns from breaching state into ok state.
	//
	// Typically the ARN of an SNS topic or ARN of an AutoScaling policy.
	// Experimental.
	AddOkAction(actions ...IAlarmAction)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	OnValidate() *[]*string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	Prepare()
	// AlarmRule indicating ALARM state for Alarm.
	// Experimental.
	RenderAlarmRule() *string
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	Synthesize(session awscdk.ISynthesisSession)
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	Validate() *[]*string
}

// The jsii proxy struct for CompositeAlarm
type jsiiProxy_CompositeAlarm struct {
	jsiiProxy_AlarmBase
}

func (j *jsiiProxy_CompositeAlarm) AlarmActionArns() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"alarmActionArns",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CompositeAlarm) AlarmArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alarmArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CompositeAlarm) AlarmName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alarmName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CompositeAlarm) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CompositeAlarm) InsufficientDataActionArns() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"insufficientDataActionArns",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CompositeAlarm) Node() awscdk.ConstructNode {
	var returns awscdk.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CompositeAlarm) OkActionArns() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"okActionArns",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CompositeAlarm) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CompositeAlarm) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Experimental.
func NewCompositeAlarm(scope constructs.Construct, id *string, props *CompositeAlarmProps) CompositeAlarm {
	_init_.Initialize()

	j := jsiiProxy_CompositeAlarm{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.CompositeAlarm",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewCompositeAlarm_Override(c CompositeAlarm, scope constructs.Construct, id *string, props *CompositeAlarmProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.CompositeAlarm",
		[]interface{}{scope, id, props},
		c,
	)
}

func (j *jsiiProxy_CompositeAlarm) SetAlarmActionArns(val *[]*string) {
	_jsii_.Set(
		j,
		"alarmActionArns",
		val,
	)
}

func (j *jsiiProxy_CompositeAlarm) SetInsufficientDataActionArns(val *[]*string) {
	_jsii_.Set(
		j,
		"insufficientDataActionArns",
		val,
	)
}

func (j *jsiiProxy_CompositeAlarm) SetOkActionArns(val *[]*string) {
	_jsii_.Set(
		j,
		"okActionArns",
		val,
	)
}

// Import an existing CloudWatch composite alarm provided an ARN.
// Experimental.
func CompositeAlarm_FromCompositeAlarmArn(scope constructs.Construct, id *string, compositeAlarmArn *string) IAlarm {
	_init_.Initialize()

	var returns IAlarm

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CompositeAlarm",
		"fromCompositeAlarmArn",
		[]interface{}{scope, id, compositeAlarmArn},
		&returns,
	)

	return returns
}

// Import an existing CloudWatch composite alarm provided an Name.
// Experimental.
func CompositeAlarm_FromCompositeAlarmName(scope constructs.Construct, id *string, compositeAlarmName *string) IAlarm {
	_init_.Initialize()

	var returns IAlarm

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CompositeAlarm",
		"fromCompositeAlarmName",
		[]interface{}{scope, id, compositeAlarmName},
		&returns,
	)

	return returns
}

// Return whether the given object is a Construct.
// Experimental.
func CompositeAlarm_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CompositeAlarm",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func CompositeAlarm_IsResource(construct awscdk.IConstruct) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.CompositeAlarm",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CompositeAlarm) AddAlarmAction(actions ...IAlarmAction) {
	args := []interface{}{}
	for _, a := range actions {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		c,
		"addAlarmAction",
		args,
	)
}

func (c *jsiiProxy_CompositeAlarm) AddInsufficientDataAction(actions ...IAlarmAction) {
	args := []interface{}{}
	for _, a := range actions {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		c,
		"addInsufficientDataAction",
		args,
	)
}

func (c *jsiiProxy_CompositeAlarm) AddOkAction(actions ...IAlarmAction) {
	args := []interface{}{}
	for _, a := range actions {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		c,
		"addOkAction",
		args,
	)
}

func (c *jsiiProxy_CompositeAlarm) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	_jsii_.InvokeVoid(
		c,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (c *jsiiProxy_CompositeAlarm) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CompositeAlarm) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CompositeAlarm) GetResourceNameAttribute(nameAttr *string) *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CompositeAlarm) OnPrepare() {
	_jsii_.InvokeVoid(
		c,
		"onPrepare",
		nil, // no parameters
	)
}

func (c *jsiiProxy_CompositeAlarm) OnSynthesize(session constructs.ISynthesisSession) {
	_jsii_.InvokeVoid(
		c,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (c *jsiiProxy_CompositeAlarm) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		c,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CompositeAlarm) Prepare() {
	_jsii_.InvokeVoid(
		c,
		"prepare",
		nil, // no parameters
	)
}

func (c *jsiiProxy_CompositeAlarm) RenderAlarmRule() *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"renderAlarmRule",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CompositeAlarm) Synthesize(session awscdk.ISynthesisSession) {
	_jsii_.InvokeVoid(
		c,
		"synthesize",
		[]interface{}{session},
	)
}

func (c *jsiiProxy_CompositeAlarm) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CompositeAlarm) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		c,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Properties for creating a Composite Alarm.
//
// Example:
//   var alarm1 alarm
//   var alarm2 alarm
//   var alarm3 alarm
//   var alarm4 alarm
//
//   alarmRule := cloudwatch.alarmRule.anyOf(cloudwatch.alarmRule.allOf(cloudwatch.alarmRule.anyOf(alarm1, cloudwatch.alarmRule.fromAlarm(alarm2, cloudwatch.alarmState_OK), alarm3), cloudwatch.alarmRule.not(cloudwatch.alarmRule.fromAlarm(alarm4, cloudwatch.alarmState_INSUFFICIENT_DATA))), cloudwatch.alarmRule.fromBoolean(jsii.Boolean(false)))
//
//   cloudwatch.NewCompositeAlarm(this, jsii.String("MyAwesomeCompositeAlarm"), &compositeAlarmProps{
//   	alarmRule: alarmRule,
//   })
//
// Experimental.
type CompositeAlarmProps struct {
	// Expression that specifies which other alarms are to be evaluated to determine this composite alarm's state.
	// Experimental.
	AlarmRule IAlarmRule `json:"alarmRule" yaml:"alarmRule"`
	// Whether the actions for this alarm are enabled.
	// Experimental.
	ActionsEnabled *bool `json:"actionsEnabled" yaml:"actionsEnabled"`
	// Description for the alarm.
	// Experimental.
	AlarmDescription *string `json:"alarmDescription" yaml:"alarmDescription"`
	// Name of the alarm.
	// Experimental.
	CompositeAlarmName *string `json:"compositeAlarmName" yaml:"compositeAlarmName"`
}

// A real CloudWatch widget that has its own fixed size and remembers its position.
//
// This is in contrast to other widgets which exist for layout purposes.
// Experimental.
type ConcreteWidget interface {
	IWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// Any warnings that are produced as a result of putting together this widget.
	// Experimental.
	Warnings() *[]*string
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Copy the warnings from the given metric.
	// Experimental.
	CopyMetricWarnings(ms ...IMetric)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for ConcreteWidget
type jsiiProxy_ConcreteWidget struct {
	jsiiProxy_IWidget
}

func (j *jsiiProxy_ConcreteWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ConcreteWidget) Warnings() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"warnings",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ConcreteWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ConcreteWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ConcreteWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewConcreteWidget_Override(c ConcreteWidget, width *float64, height *float64) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.ConcreteWidget",
		[]interface{}{width, height},
		c,
	)
}

func (j *jsiiProxy_ConcreteWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_ConcreteWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (c *jsiiProxy_ConcreteWidget) CopyMetricWarnings(ms ...IMetric) {
	args := []interface{}{}
	for _, a := range ms {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		c,
		"copyMetricWarnings",
		args,
	)
}

func (c *jsiiProxy_ConcreteWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		c,
		"position",
		[]interface{}{x, y},
	)
}

func (c *jsiiProxy_ConcreteWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		c,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Properties needed to make an alarm from a metric.
//
// Example:
//   import cloudwatch "github.com/aws/aws-cdk-go/awscdk"
//
//   var myHostedZone hostedZone
//   certificate := acm.NewCertificate(this, jsii.String("Certificate"), &certificateProps{
//   	domainName: jsii.String("hello.example.com"),
//   	validation: acm.certificateValidation.fromDns(myHostedZone),
//   })
//   certificate.metricDaysToExpiry().createAlarm(this, jsii.String("Alarm"), &createAlarmOptions{
//   	comparisonOperator: cloudwatch.comparisonOperator_LESS_THAN_THRESHOLD,
//   	evaluationPeriods: jsii.Number(1),
//   	threshold: jsii.Number(45),
//   })
//
// Experimental.
type CreateAlarmOptions struct {
	// The number of periods over which data is compared to the specified threshold.
	// Experimental.
	EvaluationPeriods *float64 `json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// The value against which the specified statistic is compared.
	// Experimental.
	Threshold *float64 `json:"threshold" yaml:"threshold"`
	// Whether the actions for this alarm are enabled.
	// Experimental.
	ActionsEnabled *bool `json:"actionsEnabled" yaml:"actionsEnabled"`
	// Description for the alarm.
	// Experimental.
	AlarmDescription *string `json:"alarmDescription" yaml:"alarmDescription"`
	// Name of the alarm.
	// Experimental.
	AlarmName *string `json:"alarmName" yaml:"alarmName"`
	// Comparison to use to check if metric is breaching.
	// Experimental.
	ComparisonOperator ComparisonOperator `json:"comparisonOperator" yaml:"comparisonOperator"`
	// The number of datapoints that must be breaching to trigger the alarm.
	//
	// This is used only if you are setting an "M
	// out of N" alarm. In that case, this value is the M. For more information, see Evaluating an Alarm in the Amazon
	// CloudWatch User Guide.
	// See: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation
	//
	// Experimental.
	DatapointsToAlarm *float64 `json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// Specifies whether to evaluate the data and potentially change the alarm state if there are too few data points to be statistically significant.
	//
	// Used only for alarms that are based on percentiles.
	// Experimental.
	EvaluateLowSampleCountPercentile *string `json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// The period over which the specified statistic is applied.
	//
	// Cannot be used with `MathExpression` objects.
	// Deprecated: Use `metric.with({ period: ... })` to encode the period into the Metric object
	Period awscdk.Duration `json:"period" yaml:"period"`
	// What function to use for aggregating.
	//
	// Can be one of the following:
	//
	// - "Minimum" | "min"
	// - "Maximum" | "max"
	// - "Average" | "avg"
	// - "Sum" | "sum"
	// - "SampleCount | "n"
	// - "pNN.NN"
	//
	// Cannot be used with `MathExpression` objects.
	// Deprecated: Use `metric.with({ statistic: ... })` to encode the period into the Metric object
	Statistic *string `json:"statistic" yaml:"statistic"`
	// Sets how this alarm is to handle missing data points.
	// Experimental.
	TreatMissingData TreatMissingData `json:"treatMissingData" yaml:"treatMissingData"`
}

// A CloudWatch dashboard.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//
//   var widget iWidget
//   dashboard := cloudwatch.NewDashboard(this, jsii.String("MyDashboard"), &dashboardProps{
//   	dashboardName: jsii.String("dashboardName"),
//   	end: jsii.String("end"),
//   	periodOverride: cloudwatch.periodOverride_AUTO,
//   	start: jsii.String("start"),
//   	widgets: [][]*iWidget{
//   		[]*iWidget{
//   			widget,
//   		},
//   	},
//   })
//
// Experimental.
type Dashboard interface {
	awscdk.Resource
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The construct tree node associated with this construct.
	// Experimental.
	Node() awscdk.ConstructNode
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Add a widget to the dashboard.
	//
	// Widgets given in multiple calls to add() will be laid out stacked on
	// top of each other.
	//
	// Multiple widgets added in the same call to add() will be laid out next
	// to each other.
	// Experimental.
	AddWidgets(widgets ...IWidget)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	OnValidate() *[]*string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	Prepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	Synthesize(session awscdk.ISynthesisSession)
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	Validate() *[]*string
}

// The jsii proxy struct for Dashboard
type jsiiProxy_Dashboard struct {
	internal.Type__awscdkResource
}

func (j *jsiiProxy_Dashboard) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Dashboard) Node() awscdk.ConstructNode {
	var returns awscdk.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Dashboard) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Dashboard) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Experimental.
func NewDashboard(scope constructs.Construct, id *string, props *DashboardProps) Dashboard {
	_init_.Initialize()

	j := jsiiProxy_Dashboard{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.Dashboard",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewDashboard_Override(d Dashboard, scope constructs.Construct, id *string, props *DashboardProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.Dashboard",
		[]interface{}{scope, id, props},
		d,
	)
}

// Return whether the given object is a Construct.
// Experimental.
func Dashboard_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.Dashboard",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func Dashboard_IsResource(construct awscdk.IConstruct) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.Dashboard",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_Dashboard) AddWidgets(widgets ...IWidget) {
	args := []interface{}{}
	for _, a := range widgets {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		d,
		"addWidgets",
		args,
	)
}

func (d *jsiiProxy_Dashboard) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	_jsii_.InvokeVoid(
		d,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (d *jsiiProxy_Dashboard) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_Dashboard) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_Dashboard) GetResourceNameAttribute(nameAttr *string) *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_Dashboard) OnPrepare() {
	_jsii_.InvokeVoid(
		d,
		"onPrepare",
		nil, // no parameters
	)
}

func (d *jsiiProxy_Dashboard) OnSynthesize(session constructs.ISynthesisSession) {
	_jsii_.InvokeVoid(
		d,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (d *jsiiProxy_Dashboard) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		d,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_Dashboard) Prepare() {
	_jsii_.InvokeVoid(
		d,
		"prepare",
		nil, // no parameters
	)
}

func (d *jsiiProxy_Dashboard) Synthesize(session awscdk.ISynthesisSession) {
	_jsii_.InvokeVoid(
		d,
		"synthesize",
		[]interface{}{session},
	)
}

func (d *jsiiProxy_Dashboard) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_Dashboard) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		d,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Properties for defining a CloudWatch Dashboard.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//
//   var widget iWidget
//   dashboardProps := &dashboardProps{
//   	dashboardName: jsii.String("dashboardName"),
//   	end: jsii.String("end"),
//   	periodOverride: cloudwatch.periodOverride_AUTO,
//   	start: jsii.String("start"),
//   	widgets: [][]*iWidget{
//   		[]*iWidget{
//   			widget,
//   		},
//   	},
//   }
//
// Experimental.
type DashboardProps struct {
	// Name of the dashboard.
	//
	// If set, must only contain alphanumerics, dash (-) and underscore (_).
	// Experimental.
	DashboardName *string `json:"dashboardName" yaml:"dashboardName"`
	// The end of the time range to use for each widget on the dashboard when the dashboard loads.
	//
	// If you specify a value for end, you must also specify a value for start.
	// Specify an absolute time in the ISO 8601 format. For example, 2018-12-17T06:00:00.000Z.
	// Experimental.
	End *string `json:"end" yaml:"end"`
	// Use this field to specify the period for the graphs when the dashboard loads.
	//
	// Specifying `Auto` causes the period of all graphs on the dashboard to automatically adapt to the time range of the dashboard.
	// Specifying `Inherit` ensures that the period set for each graph is always obeyed.
	// Experimental.
	PeriodOverride PeriodOverride `json:"periodOverride" yaml:"periodOverride"`
	// The start of the time range to use for each widget on the dashboard.
	//
	// You can specify start without specifying end to specify a relative time range that ends with the current time.
	// In this case, the value of start must begin with -P, and you can use M, H, D, W and M as abbreviations for
	// minutes, hours, days, weeks and months. For example, -PT8H shows the last 8 hours and -P3M shows the last three months.
	// You can also use start along with an end field, to specify an absolute time range.
	// When specifying an absolute time range, use the ISO 8601 format. For example, 2018-12-17T06:00:00.000Z.
	// Experimental.
	Start *string `json:"start" yaml:"start"`
	// Initial set of widgets on the dashboard.
	//
	// One array represents a row of widgets.
	// Experimental.
	Widgets *[]*[]IWidget `json:"widgets" yaml:"widgets"`
}

// Metric dimension.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//
//   var value interface{}
//   dimension := &dimension{
//   	name: jsii.String("name"),
//   	value: value,
//   }
//
// See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-dimension.html
//
// Experimental.
type Dimension struct {
	// Name of the dimension.
	// Experimental.
	Name *string `json:"name" yaml:"name"`
	// Value of the dimension.
	// Experimental.
	Value interface{} `json:"value" yaml:"value"`
}

// A dashboard widget that displays metrics.
//
// Example:
//   var dashboard dashboard
//
//   dashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{
//   	// ...
//
//   	legendPosition: cloudwatch.legendPosition_RIGHT,
//   }))
//
// Experimental.
type GraphWidget interface {
	ConcreteWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// Any warnings that are produced as a result of putting together this widget.
	// Experimental.
	Warnings() *[]*string
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Add another metric to the left Y axis of the GraphWidget.
	// Experimental.
	AddLeftMetric(metric IMetric)
	// Add another metric to the right Y axis of the GraphWidget.
	// Experimental.
	AddRightMetric(metric IMetric)
	// Copy the warnings from the given metric.
	// Experimental.
	CopyMetricWarnings(ms ...IMetric)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for GraphWidget
type jsiiProxy_GraphWidget struct {
	jsiiProxy_ConcreteWidget
}

func (j *jsiiProxy_GraphWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GraphWidget) Warnings() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"warnings",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GraphWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GraphWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GraphWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewGraphWidget(props *GraphWidgetProps) GraphWidget {
	_init_.Initialize()

	j := jsiiProxy_GraphWidget{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.GraphWidget",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewGraphWidget_Override(g GraphWidget, props *GraphWidgetProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.GraphWidget",
		[]interface{}{props},
		g,
	)
}

func (j *jsiiProxy_GraphWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_GraphWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (g *jsiiProxy_GraphWidget) AddLeftMetric(metric IMetric) {
	_jsii_.InvokeVoid(
		g,
		"addLeftMetric",
		[]interface{}{metric},
	)
}

func (g *jsiiProxy_GraphWidget) AddRightMetric(metric IMetric) {
	_jsii_.InvokeVoid(
		g,
		"addRightMetric",
		[]interface{}{metric},
	)
}

func (g *jsiiProxy_GraphWidget) CopyMetricWarnings(ms ...IMetric) {
	args := []interface{}{}
	for _, a := range ms {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		g,
		"copyMetricWarnings",
		args,
	)
}

func (g *jsiiProxy_GraphWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		g,
		"position",
		[]interface{}{x, y},
	)
}

func (g *jsiiProxy_GraphWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		g,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Properties for a GraphWidget.
//
// Example:
//   var dashboard dashboard
//
//   dashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{
//   	// ...
//
//   	legendPosition: cloudwatch.legendPosition_RIGHT,
//   }))
//
// Experimental.
type GraphWidgetProps struct {
	// Height of the widget.
	// Experimental.
	Height *float64 `json:"height" yaml:"height"`
	// The region the metrics of this graph should be taken from.
	// Experimental.
	Region *string `json:"region" yaml:"region"`
	// Title for the graph.
	// Experimental.
	Title *string `json:"title" yaml:"title"`
	// Width of the widget, in a grid of 24 units wide.
	// Experimental.
	Width *float64 `json:"width" yaml:"width"`
	// Metrics to display on left Y axis.
	// Experimental.
	Left *[]IMetric `json:"left" yaml:"left"`
	// Annotations for the left Y axis.
	// Experimental.
	LeftAnnotations *[]*HorizontalAnnotation `json:"leftAnnotations" yaml:"leftAnnotations"`
	// Left Y axis.
	// Experimental.
	LeftYAxis *YAxisProps `json:"leftYAxis" yaml:"leftYAxis"`
	// Position of the legend.
	// Experimental.
	LegendPosition LegendPosition `json:"legendPosition" yaml:"legendPosition"`
	// Whether the graph should show live data.
	// Experimental.
	LiveData *bool `json:"liveData" yaml:"liveData"`
	// The default period for all metrics in this widget.
	//
	// The period is the length of time represented by one data point on the graph.
	// This default can be overridden within each metric definition.
	// Experimental.
	Period awscdk.Duration `json:"period" yaml:"period"`
	// Metrics to display on right Y axis.
	// Experimental.
	Right *[]IMetric `json:"right" yaml:"right"`
	// Annotations for the right Y axis.
	// Experimental.
	RightAnnotations *[]*HorizontalAnnotation `json:"rightAnnotations" yaml:"rightAnnotations"`
	// Right Y axis.
	// Experimental.
	RightYAxis *YAxisProps `json:"rightYAxis" yaml:"rightYAxis"`
	// Whether to show the value from the entire time range. Only applicable for Bar and Pie charts.
	//
	// If false, values will be from the most recent period of your chosen time range;
	// if true, shows the value from the entire time range.
	// Experimental.
	SetPeriodToTimeRange *bool `json:"setPeriodToTimeRange" yaml:"setPeriodToTimeRange"`
	// Whether the graph should be shown as stacked lines.
	// Experimental.
	Stacked *bool `json:"stacked" yaml:"stacked"`
	// The default statistic to be displayed for each metric.
	//
	// This default can be overridden within the definition of each individual metric.
	// Experimental.
	Statistic *string `json:"statistic" yaml:"statistic"`
	// Display this metric.
	// Experimental.
	View GraphWidgetView `json:"view" yaml:"view"`
}

// Types of view.
//
// Example:
//   var dashboard dashboard
//
//   dashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{
//   	// ...
//
//   	view: cloudwatch.graphWidgetView_BAR,
//   }))
//
// Experimental.
type GraphWidgetView string

const (
	// Display as a line graph.
	// Experimental.
	GraphWidgetView_TIME_SERIES GraphWidgetView = "TIME_SERIES"
	// Display as a bar graph.
	// Experimental.
	GraphWidgetView_BAR GraphWidgetView = "BAR"
	// Display as a pie graph.
	// Experimental.
	GraphWidgetView_PIE GraphWidgetView = "PIE"
)

// Horizontal annotation to be added to a graph.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   horizontalAnnotation := &horizontalAnnotation{
//   	value: jsii.Number(123),
//
//   	// the properties below are optional
//   	color: jsii.String("color"),
//   	fill: cloudwatch.shading_NONE,
//   	label: jsii.String("label"),
//   	visible: jsii.Boolean(false),
//   }
//
// Experimental.
type HorizontalAnnotation struct {
	// The value of the annotation.
	// Experimental.
	Value *float64 `json:"value" yaml:"value"`
	// The hex color code, prefixed with '#' (e.g. '#00ff00'), to be used for the annotation. The `Color` class has a set of standard colors that can be used here.
	// Experimental.
	Color *string `json:"color" yaml:"color"`
	// Add shading above or below the annotation.
	// Experimental.
	Fill Shading `json:"fill" yaml:"fill"`
	// Label for the annotation.
	// Experimental.
	Label *string `json:"label" yaml:"label"`
	// Whether the annotation is visible.
	// Experimental.
	Visible *bool `json:"visible" yaml:"visible"`
}

// Represents a CloudWatch Alarm.
// Experimental.
type IAlarm interface {
	IAlarmRule
	awscdk.IResource
	// Alarm ARN (i.e. arn:aws:cloudwatch:<region>:<account-id>:alarm:Foo).
	// Experimental.
	AlarmArn() *string
	// Name of the alarm.
	// Experimental.
	AlarmName() *string
}

// The jsii proxy for IAlarm
type jsiiProxy_IAlarm struct {
	jsiiProxy_IAlarmRule
	internal.Type__awscdkIResource
}

func (i *jsiiProxy_IAlarm) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	_jsii_.InvokeVoid(
		i,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (i *jsiiProxy_IAlarm) RenderAlarmRule() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"renderAlarmRule",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (j *jsiiProxy_IAlarm) AlarmArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alarmArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IAlarm) AlarmName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alarmName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IAlarm) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IAlarm) Node() awscdk.ConstructNode {
	var returns awscdk.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IAlarm) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

// Interface for objects that can be the targets of CloudWatch alarm actions.
// Experimental.
type IAlarmAction interface {
	// Return the properties required to send alarm actions to this CloudWatch alarm.
	// Experimental.
	Bind(scope awscdk.Construct, alarm IAlarm) *AlarmActionConfig
}

// The jsii proxy for IAlarmAction
type jsiiProxy_IAlarmAction struct {
	_ byte // padding
}

func (i *jsiiProxy_IAlarmAction) Bind(scope awscdk.Construct, alarm IAlarm) *AlarmActionConfig {
	var returns *AlarmActionConfig

	_jsii_.Invoke(
		i,
		"bind",
		[]interface{}{scope, alarm},
		&returns,
	)

	return returns
}

// Interface for Alarm Rule.
// Experimental.
type IAlarmRule interface {
	// serialized representation of Alarm Rule to be used when building the Composite Alarm resource.
	// Experimental.
	RenderAlarmRule() *string
}

// The jsii proxy for IAlarmRule
type jsiiProxy_IAlarmRule struct {
	_ byte // padding
}

func (i *jsiiProxy_IAlarmRule) RenderAlarmRule() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"renderAlarmRule",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Interface for metrics.
// Experimental.
type IMetric interface {
	// Turn this metric object into an alarm configuration.
	// Deprecated: Use `toMetricConfig()` instead.
	ToAlarmConfig() *MetricAlarmConfig
	// Turn this metric object into a graph configuration.
	// Deprecated: Use `toMetricConfig()` instead.
	ToGraphConfig() *MetricGraphConfig
	// Inspect the details of the metric object.
	// Experimental.
	ToMetricConfig() *MetricConfig
	// Any warnings related to this metric.
	//
	// Should be attached to the consuming construct.
	// Experimental.
	Warnings() *[]*string
}

// The jsii proxy for IMetric
type jsiiProxy_IMetric struct {
	_ byte // padding
}

func (i *jsiiProxy_IMetric) ToAlarmConfig() *MetricAlarmConfig {
	var returns *MetricAlarmConfig

	_jsii_.Invoke(
		i,
		"toAlarmConfig",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_IMetric) ToGraphConfig() *MetricGraphConfig {
	var returns *MetricGraphConfig

	_jsii_.Invoke(
		i,
		"toGraphConfig",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_IMetric) ToMetricConfig() *MetricConfig {
	var returns *MetricConfig

	_jsii_.Invoke(
		i,
		"toMetricConfig",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (j *jsiiProxy_IMetric) Warnings() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"warnings",
		&returns,
	)
	return returns
}

// A single dashboard widget.
// Experimental.
type IWidget interface {
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// Any warnings that are produced as a result of putting together this widget.
	// Experimental.
	Warnings() *[]*string
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
}

// The jsii proxy for IWidget
type jsiiProxy_IWidget struct {
	_ byte // padding
}

func (i *jsiiProxy_IWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		i,
		"position",
		[]interface{}{x, y},
	)
}

func (i *jsiiProxy_IWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		i,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (j *jsiiProxy_IWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IWidget) Warnings() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"warnings",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

// The position of the legend on a GraphWidget.
//
// Example:
//   var dashboard dashboard
//
//   dashboard.addWidgets(cloudwatch.NewGraphWidget(&graphWidgetProps{
//   	// ...
//
//   	legendPosition: cloudwatch.legendPosition_RIGHT,
//   }))
//
// Experimental.
type LegendPosition string

const (
	// Legend appears below the graph (default).
	// Experimental.
	LegendPosition_BOTTOM LegendPosition = "BOTTOM"
	// Add shading above the annotation.
	// Experimental.
	LegendPosition_RIGHT LegendPosition = "RIGHT"
	// Add shading below the annotation.
	// Experimental.
	LegendPosition_HIDDEN LegendPosition = "HIDDEN"
)

// Types of view.
//
// Example:
//   var dashboard dashboard
//
//   dashboard.addWidgets(cloudwatch.NewLogQueryWidget(&logQueryWidgetProps{
//   	logGroupNames: []*string{
//   		jsii.String("my-log-group"),
//   	},
//   	view: cloudwatch.logQueryVisualizationType_TABLE,
//   	// The lines will be automatically combined using '\n|'.
//   	queryLines: []*string{
//   		jsii.String("fields @message"),
//   		jsii.String("filter @message like /Error/"),
//   	},
//   }))
//
// Experimental.
type LogQueryVisualizationType string

const (
	// Table view.
	// Experimental.
	LogQueryVisualizationType_TABLE LogQueryVisualizationType = "TABLE"
	// Line view.
	// Experimental.
	LogQueryVisualizationType_LINE LogQueryVisualizationType = "LINE"
	// Stacked area view.
	// Experimental.
	LogQueryVisualizationType_STACKEDAREA LogQueryVisualizationType = "STACKEDAREA"
	// Bar view.
	// Experimental.
	LogQueryVisualizationType_BAR LogQueryVisualizationType = "BAR"
	// Pie view.
	// Experimental.
	LogQueryVisualizationType_PIE LogQueryVisualizationType = "PIE"
)

// Display query results from Logs Insights.
//
// Example:
//   var dashboard dashboard
//
//   dashboard.addWidgets(cloudwatch.NewLogQueryWidget(&logQueryWidgetProps{
//   	logGroupNames: []*string{
//   		jsii.String("my-log-group"),
//   	},
//   	view: cloudwatch.logQueryVisualizationType_TABLE,
//   	// The lines will be automatically combined using '\n|'.
//   	queryLines: []*string{
//   		jsii.String("fields @message"),
//   		jsii.String("filter @message like /Error/"),
//   	},
//   }))
//
// Experimental.
type LogQueryWidget interface {
	ConcreteWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// Any warnings that are produced as a result of putting together this widget.
	// Experimental.
	Warnings() *[]*string
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Copy the warnings from the given metric.
	// Experimental.
	CopyMetricWarnings(ms ...IMetric)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for LogQueryWidget
type jsiiProxy_LogQueryWidget struct {
	jsiiProxy_ConcreteWidget
}

func (j *jsiiProxy_LogQueryWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LogQueryWidget) Warnings() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"warnings",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LogQueryWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LogQueryWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LogQueryWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewLogQueryWidget(props *LogQueryWidgetProps) LogQueryWidget {
	_init_.Initialize()

	j := jsiiProxy_LogQueryWidget{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.LogQueryWidget",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewLogQueryWidget_Override(l LogQueryWidget, props *LogQueryWidgetProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.LogQueryWidget",
		[]interface{}{props},
		l,
	)
}

func (j *jsiiProxy_LogQueryWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_LogQueryWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (l *jsiiProxy_LogQueryWidget) CopyMetricWarnings(ms ...IMetric) {
	args := []interface{}{}
	for _, a := range ms {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		l,
		"copyMetricWarnings",
		args,
	)
}

func (l *jsiiProxy_LogQueryWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		l,
		"position",
		[]interface{}{x, y},
	)
}

func (l *jsiiProxy_LogQueryWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		l,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Properties for a Query widget.
//
// Example:
//   var dashboard dashboard
//
//   dashboard.addWidgets(cloudwatch.NewLogQueryWidget(&logQueryWidgetProps{
//   	logGroupNames: []*string{
//   		jsii.String("my-log-group"),
//   	},
//   	view: cloudwatch.logQueryVisualizationType_TABLE,
//   	// The lines will be automatically combined using '\n|'.
//   	queryLines: []*string{
//   		jsii.String("fields @message"),
//   		jsii.String("filter @message like /Error/"),
//   	},
//   }))
//
// Experimental.
type LogQueryWidgetProps struct {
	// Names of log groups to query.
	// Experimental.
	LogGroupNames *[]*string `json:"logGroupNames" yaml:"logGroupNames"`
	// Height of the widget.
	// Experimental.
	Height *float64 `json:"height" yaml:"height"`
	// A sequence of lines to use to build the query.
	//
	// The query will be built by joining the lines together using `\n|`.
	// Experimental.
	QueryLines *[]*string `json:"queryLines" yaml:"queryLines"`
	// Full query string for log insights.
	//
	// Be sure to prepend every new line with a newline and pipe character
	// (`\n|`).
	// Experimental.
	QueryString *string `json:"queryString" yaml:"queryString"`
	// The region the metrics of this widget should be taken from.
	// Experimental.
	Region *string `json:"region" yaml:"region"`
	// Title for the widget.
	// Experimental.
	Title *string `json:"title" yaml:"title"`
	// The type of view to use.
	// Experimental.
	View LogQueryVisualizationType `json:"view" yaml:"view"`
	// Width of the widget, in a grid of 24 units wide.
	// Experimental.
	Width *float64 `json:"width" yaml:"width"`
}

// A math expression built with metric(s) emitted by a service.
//
// The math expression is a combination of an expression (x+y) and metrics to apply expression on.
// It also contains metadata which is used only in graphs, such as color and label.
// It makes sense to embed this in here, so that compound constructs can attach
// that metadata to metrics they expose.
//
// MathExpression can also be used for search expressions. In this case,
// it also optionally accepts a searchRegion and searchAccount property for cross-environment
// search expressions.
//
// This class does not represent a resource, so hence is not a construct. Instead,
// MathExpression is an abstraction that makes it easy to specify metrics for use in both
// alarms and graphs.
//
// Example:
//   var fn function
//
//   allProblems := cloudwatch.NewMathExpression(&mathExpressionProps{
//   	expression: jsii.String("errors + throttles"),
//   	usingMetrics: map[string]iMetric{
//   		"errors": fn.metricErrors(),
//   		"faults": fn.metricThrottles(),
//   	},
//   })
//
// Experimental.
type MathExpression interface {
	IMetric
	// The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The `Color` class has a set of standard colors that can be used here.
	// Experimental.
	Color() *string
	// The expression defining the metric.
	// Experimental.
	Expression() *string
	// Label for this metric when added to a Graph.
	// Experimental.
	Label() *string
	// Aggregation period of this metric.
	// Experimental.
	Period() awscdk.Duration
	// Account to evaluate search expressions within.
	// Experimental.
	SearchAccount() *string
	// Region to evaluate search expressions within.
	// Experimental.
	SearchRegion() *string
	// The metrics used in the expression as KeyValuePair <id, metric>.
	// Experimental.
	UsingMetrics() *map[string]IMetric
	// Warnings generated by this math expression.
	// Experimental.
	Warnings() *[]*string
	// Make a new Alarm for this metric.
	//
	// Combines both properties that may adjust the metric (aggregation) as well
	// as alarm properties.
	// Experimental.
	CreateAlarm(scope awscdk.Construct, id *string, props *CreateAlarmOptions) Alarm
	// Turn this metric object into an alarm configuration.
	// Deprecated: use toMetricConfig().
	ToAlarmConfig() *MetricAlarmConfig
	// Turn this metric object into a graph configuration.
	// Deprecated: use toMetricConfig().
	ToGraphConfig() *MetricGraphConfig
	// Inspect the details of the metric object.
	// Experimental.
	ToMetricConfig() *MetricConfig
	// Returns a string representation of an object.
	// Experimental.
	ToString() *string
	// Return a copy of Metric with properties changed.
	//
	// All properties except namespace and metricName can be changed.
	// Experimental.
	With(props *MathExpressionOptions) MathExpression
}

// The jsii proxy struct for MathExpression
type jsiiProxy_MathExpression struct {
	jsiiProxy_IMetric
}

func (j *jsiiProxy_MathExpression) Color() *string {
	var returns *string
	_jsii_.Get(
		j,
		"color",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MathExpression) Expression() *string {
	var returns *string
	_jsii_.Get(
		j,
		"expression",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MathExpression) Label() *string {
	var returns *string
	_jsii_.Get(
		j,
		"label",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MathExpression) Period() awscdk.Duration {
	var returns awscdk.Duration
	_jsii_.Get(
		j,
		"period",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MathExpression) SearchAccount() *string {
	var returns *string
	_jsii_.Get(
		j,
		"searchAccount",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MathExpression) SearchRegion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"searchRegion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MathExpression) UsingMetrics() *map[string]IMetric {
	var returns *map[string]IMetric
	_jsii_.Get(
		j,
		"usingMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MathExpression) Warnings() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"warnings",
		&returns,
	)
	return returns
}


// Experimental.
func NewMathExpression(props *MathExpressionProps) MathExpression {
	_init_.Initialize()

	j := jsiiProxy_MathExpression{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.MathExpression",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewMathExpression_Override(m MathExpression, props *MathExpressionProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.MathExpression",
		[]interface{}{props},
		m,
	)
}

func (m *jsiiProxy_MathExpression) CreateAlarm(scope awscdk.Construct, id *string, props *CreateAlarmOptions) Alarm {
	var returns Alarm

	_jsii_.Invoke(
		m,
		"createAlarm",
		[]interface{}{scope, id, props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MathExpression) ToAlarmConfig() *MetricAlarmConfig {
	var returns *MetricAlarmConfig

	_jsii_.Invoke(
		m,
		"toAlarmConfig",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MathExpression) ToGraphConfig() *MetricGraphConfig {
	var returns *MetricGraphConfig

	_jsii_.Invoke(
		m,
		"toGraphConfig",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MathExpression) ToMetricConfig() *MetricConfig {
	var returns *MetricConfig

	_jsii_.Invoke(
		m,
		"toMetricConfig",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MathExpression) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		m,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MathExpression) With(props *MathExpressionOptions) MathExpression {
	var returns MathExpression

	_jsii_.Invoke(
		m,
		"with",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Configurable options for MathExpressions.
//
// Example:
//   import monocdk "github.com/aws/aws-cdk-go/awscdk"import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//
//   var duration duration
//   mathExpressionOptions := &mathExpressionOptions{
//   	color: jsii.String("color"),
//   	label: jsii.String("label"),
//   	period: duration,
//   	searchAccount: jsii.String("searchAccount"),
//   	searchRegion: jsii.String("searchRegion"),
//   }
//
// Experimental.
type MathExpressionOptions struct {
	// Color for this metric when added to a Graph in a Dashboard.
	// Experimental.
	Color *string `json:"color" yaml:"color"`
	// Label for this expression when added to a Graph in a Dashboard.
	//
	// If this expression evaluates to more than one time series (for
	// example, through the use of `METRICS()` or `SEARCH()` expressions),
	// each time series will appear in the graph using a combination of the
	// expression label and the individual metric label. Specify the empty
	// string (`''`) to suppress the expression label and only keep the
	// metric label.
	//
	// You can use [dynamic labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html)
	// to show summary information about the displayed time series
	// in the legend. For example, if you use:
	//
	// ```
	// [max: ${MAX}] MyMetric
	// ```
	//
	// As the metric label, the maximum value in the visible range will
	// be shown next to the time series name in the graph's legend. If the
	// math expression produces more than one time series, the maximum
	// will be shown for each individual time series produce by this
	// math expression.
	// Experimental.
	Label *string `json:"label" yaml:"label"`
	// The period over which the expression's statistics are applied.
	//
	// This period overrides all periods in the metrics used in this
	// math expression.
	// Experimental.
	Period awscdk.Duration `json:"period" yaml:"period"`
	// Account to evaluate search expressions within.
	//
	// Specifying a searchAccount has no effect to the account used
	// for metrics within the expression (passed via usingMetrics).
	// Experimental.
	SearchAccount *string `json:"searchAccount" yaml:"searchAccount"`
	// Region to evaluate search expressions within.
	//
	// Specifying a searchRegion has no effect to the region used
	// for metrics within the expression (passed via usingMetrics).
	// Experimental.
	SearchRegion *string `json:"searchRegion" yaml:"searchRegion"`
}

// Properties for a MathExpression.
//
// Example:
//   var fn function
//
//   allProblems := cloudwatch.NewMathExpression(&mathExpressionProps{
//   	expression: jsii.String("errors + throttles"),
//   	usingMetrics: map[string]iMetric{
//   		"errors": fn.metricErrors(),
//   		"faults": fn.metricThrottles(),
//   	},
//   })
//
// Experimental.
type MathExpressionProps struct {
	// Color for this metric when added to a Graph in a Dashboard.
	// Experimental.
	Color *string `json:"color" yaml:"color"`
	// Label for this expression when added to a Graph in a Dashboard.
	//
	// If this expression evaluates to more than one time series (for
	// example, through the use of `METRICS()` or `SEARCH()` expressions),
	// each time series will appear in the graph using a combination of the
	// expression label and the individual metric label. Specify the empty
	// string (`''`) to suppress the expression label and only keep the
	// metric label.
	//
	// You can use [dynamic labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html)
	// to show summary information about the displayed time series
	// in the legend. For example, if you use:
	//
	// ```
	// [max: ${MAX}] MyMetric
	// ```
	//
	// As the metric label, the maximum value in the visible range will
	// be shown next to the time series name in the graph's legend. If the
	// math expression produces more than one time series, the maximum
	// will be shown for each individual time series produce by this
	// math expression.
	// Experimental.
	Label *string `json:"label" yaml:"label"`
	// The period over which the expression's statistics are applied.
	//
	// This period overrides all periods in the metrics used in this
	// math expression.
	// Experimental.
	Period awscdk.Duration `json:"period" yaml:"period"`
	// Account to evaluate search expressions within.
	//
	// Specifying a searchAccount has no effect to the account used
	// for metrics within the expression (passed via usingMetrics).
	// Experimental.
	SearchAccount *string `json:"searchAccount" yaml:"searchAccount"`
	// Region to evaluate search expressions within.
	//
	// Specifying a searchRegion has no effect to the region used
	// for metrics within the expression (passed via usingMetrics).
	// Experimental.
	SearchRegion *string `json:"searchRegion" yaml:"searchRegion"`
	// The expression defining the metric.
	//
	// When an expression contains a SEARCH function, it cannot be used
	// within an Alarm.
	// Experimental.
	Expression *string `json:"expression" yaml:"expression"`
	// The metrics used in the expression, in a map.
	//
	// The key is the identifier that represents the given metric in the
	// expression, and the value is the actual Metric object.
	// Experimental.
	UsingMetrics *map[string]IMetric `json:"usingMetrics" yaml:"usingMetrics"`
}

// A metric emitted by a service.
//
// The metric is a combination of a metric identifier (namespace, name and dimensions)
// and an aggregation function (statistic, period and unit).
//
// It also contains metadata which is used only in graphs, such as color and label.
// It makes sense to embed this in here, so that compound constructs can attach
// that metadata to metrics they expose.
//
// This class does not represent a resource, so hence is not a construct. Instead,
// Metric is an abstraction that makes it easy to specify metrics for use in both
// alarms and graphs.
//
// Example:
//   var fn function
//
//   minuteErrorRate := fn.metricErrors(&metricOptions{
//   	statistic: jsii.String("avg"),
//   	period: duration.minutes(jsii.Number(1)),
//   	label: jsii.String("Lambda failure rate"),
//   })
//
// Experimental.
type Metric interface {
	IMetric
	// Account which this metric comes from.
	// Experimental.
	Account() *string
	// The hex color code used when this metric is rendered on a graph.
	// Experimental.
	Color() *string
	// Dimensions of this metric.
	// Experimental.
	Dimensions() *map[string]interface{}
	// Label for this metric when added to a Graph in a Dashboard.
	// Experimental.
	Label() *string
	// Name of this metric.
	// Experimental.
	MetricName() *string
	// Namespace of this metric.
	// Experimental.
	Namespace() *string
	// Period of this metric.
	// Experimental.
	Period() awscdk.Duration
	// Region which this metric comes from.
	// Experimental.
	Region() *string
	// Statistic of this metric.
	// Experimental.
	Statistic() *string
	// Unit of the metric.
	// Experimental.
	Unit() Unit
	// Attach the metric object to the given construct scope.
	//
	// Returns a Metric object that uses the account and region from the Stack
	// the given construct is defined in. If the metric is subsequently used
	// in a Dashboard or Alarm in a different Stack defined in a different
	// account or region, the appropriate 'region' and 'account' fields
	// will be added to it.
	//
	// If the scope we attach to is in an environment-agnostic stack,
	// nothing is done and the same Metric object is returned.
	// Experimental.
	AttachTo(scope constructs.IConstruct) Metric
	// Make a new Alarm for this metric.
	//
	// Combines both properties that may adjust the metric (aggregation) as well
	// as alarm properties.
	// Experimental.
	CreateAlarm(scope awscdk.Construct, id *string, props *CreateAlarmOptions) Alarm
	// Turn this metric object into an alarm configuration.
	// Deprecated: use toMetricConfig().
	ToAlarmConfig() *MetricAlarmConfig
	// Turn this metric object into a graph configuration.
	// Deprecated: use toMetricConfig().
	ToGraphConfig() *MetricGraphConfig
	// Inspect the details of the metric object.
	// Experimental.
	ToMetricConfig() *MetricConfig
	// Returns a string representation of an object.
	// Experimental.
	ToString() *string
	// Return a copy of Metric `with` properties changed.
	//
	// All properties except namespace and metricName can be changed.
	// Experimental.
	With(props *MetricOptions) Metric
}

// The jsii proxy struct for Metric
type jsiiProxy_Metric struct {
	jsiiProxy_IMetric
}

func (j *jsiiProxy_Metric) Account() *string {
	var returns *string
	_jsii_.Get(
		j,
		"account",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Metric) Color() *string {
	var returns *string
	_jsii_.Get(
		j,
		"color",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Metric) Dimensions() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"dimensions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Metric) Label() *string {
	var returns *string
	_jsii_.Get(
		j,
		"label",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Metric) MetricName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"metricName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Metric) Namespace() *string {
	var returns *string
	_jsii_.Get(
		j,
		"namespace",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Metric) Period() awscdk.Duration {
	var returns awscdk.Duration
	_jsii_.Get(
		j,
		"period",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Metric) Region() *string {
	var returns *string
	_jsii_.Get(
		j,
		"region",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Metric) Statistic() *string {
	var returns *string
	_jsii_.Get(
		j,
		"statistic",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Metric) Unit() Unit {
	var returns Unit
	_jsii_.Get(
		j,
		"unit",
		&returns,
	)
	return returns
}


// Experimental.
func NewMetric(props *MetricProps) Metric {
	_init_.Initialize()

	j := jsiiProxy_Metric{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.Metric",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewMetric_Override(m Metric, props *MetricProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.Metric",
		[]interface{}{props},
		m,
	)
}

// Grant permissions to the given identity to write metrics.
// Experimental.
func Metric_GrantPutMetricData(grantee awsiam.IGrantable) awsiam.Grant {
	_init_.Initialize()

	var returns awsiam.Grant

	_jsii_.StaticInvoke(
		"monocdk.aws_cloudwatch.Metric",
		"grantPutMetricData",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_Metric) AttachTo(scope constructs.IConstruct) Metric {
	var returns Metric

	_jsii_.Invoke(
		m,
		"attachTo",
		[]interface{}{scope},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_Metric) CreateAlarm(scope awscdk.Construct, id *string, props *CreateAlarmOptions) Alarm {
	var returns Alarm

	_jsii_.Invoke(
		m,
		"createAlarm",
		[]interface{}{scope, id, props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_Metric) ToAlarmConfig() *MetricAlarmConfig {
	var returns *MetricAlarmConfig

	_jsii_.Invoke(
		m,
		"toAlarmConfig",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_Metric) ToGraphConfig() *MetricGraphConfig {
	var returns *MetricGraphConfig

	_jsii_.Invoke(
		m,
		"toGraphConfig",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_Metric) ToMetricConfig() *MetricConfig {
	var returns *MetricConfig

	_jsii_.Invoke(
		m,
		"toMetricConfig",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_Metric) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		m,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_Metric) With(props *MetricOptions) Metric {
	var returns Metric

	_jsii_.Invoke(
		m,
		"with",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Properties used to construct the Metric identifying part of an Alarm.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//
//   var value interface{}
//   metricAlarmConfig := &metricAlarmConfig{
//   	metricName: jsii.String("metricName"),
//   	namespace: jsii.String("namespace"),
//   	period: jsii.Number(123),
//
//   	// the properties below are optional
//   	dimensions: []dimension{
//   		&dimension{
//   			name: jsii.String("name"),
//   			value: value,
//   		},
//   	},
//   	extendedStatistic: jsii.String("extendedStatistic"),
//   	statistic: cloudwatch.statistic_SAMPLE_COUNT,
//   	unit: cloudwatch.unit_SECONDS,
//   }
//
// Deprecated: Replaced by MetricConfig.
type MetricAlarmConfig struct {
	// Name of the metric.
	// Deprecated: Replaced by MetricConfig.
	MetricName *string `json:"metricName" yaml:"metricName"`
	// Namespace of the metric.
	// Deprecated: Replaced by MetricConfig.
	Namespace *string `json:"namespace" yaml:"namespace"`
	// How many seconds to aggregate over.
	// Deprecated: Replaced by MetricConfig.
	Period *float64 `json:"period" yaml:"period"`
	// The dimensions to apply to the alarm.
	// Deprecated: Replaced by MetricConfig.
	Dimensions *[]*Dimension `json:"dimensions" yaml:"dimensions"`
	// Percentile aggregation function to use.
	// Deprecated: Replaced by MetricConfig.
	ExtendedStatistic *string `json:"extendedStatistic" yaml:"extendedStatistic"`
	// Simple aggregation function to use.
	// Deprecated: Replaced by MetricConfig.
	Statistic Statistic `json:"statistic" yaml:"statistic"`
	// The unit of the alarm.
	// Deprecated: Replaced by MetricConfig.
	Unit Unit `json:"unit" yaml:"unit"`
}

// Properties of a rendered metric.
//
// Example:
//   import monocdk "github.com/aws/aws-cdk-go/awscdk"import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//
//   var duration duration
//   var metric metric
//   var renderingProperties interface{}
//   var value interface{}
//   metricConfig := &metricConfig{
//   	mathExpression: &metricExpressionConfig{
//   		expression: jsii.String("expression"),
//   		period: jsii.Number(123),
//   		usingMetrics: map[string]iMetric{
//   			"usingMetricsKey": metric,
//   		},
//
//   		// the properties below are optional
//   		searchAccount: jsii.String("searchAccount"),
//   		searchRegion: jsii.String("searchRegion"),
//   	},
//   	metricStat: &metricStatConfig{
//   		metricName: jsii.String("metricName"),
//   		namespace: jsii.String("namespace"),
//   		period: duration,
//   		statistic: jsii.String("statistic"),
//
//   		// the properties below are optional
//   		account: jsii.String("account"),
//   		dimensions: []dimension{
//   			&dimension{
//   				name: jsii.String("name"),
//   				value: value,
//   			},
//   		},
//   		region: jsii.String("region"),
//   		unitFilter: cloudwatch.unit_SECONDS,
//   	},
//   	renderingProperties: map[string]interface{}{
//   		"renderingPropertiesKey": renderingProperties,
//   	},
//   }
//
// Experimental.
type MetricConfig struct {
	// In case the metric is a math expression, the details of the math expression.
	// Experimental.
	MathExpression *MetricExpressionConfig `json:"mathExpression" yaml:"mathExpression"`
	// In case the metric represents a query, the details of the query.
	// Experimental.
	MetricStat *MetricStatConfig `json:"metricStat" yaml:"metricStat"`
	// Additional properties which will be rendered if the metric is used in a dashboard.
	//
	// Examples are 'label' and 'color', but any key in here will be
	// added to dashboard graphs.
	// Experimental.
	RenderingProperties *map[string]interface{} `json:"renderingProperties" yaml:"renderingProperties"`
}

// Properties for a concrete metric.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//
//   var metric metric
//   metricExpressionConfig := &metricExpressionConfig{
//   	expression: jsii.String("expression"),
//   	period: jsii.Number(123),
//   	usingMetrics: map[string]iMetric{
//   		"usingMetricsKey": metric,
//   	},
//
//   	// the properties below are optional
//   	searchAccount: jsii.String("searchAccount"),
//   	searchRegion: jsii.String("searchRegion"),
//   }
//
// Experimental.
type MetricExpressionConfig struct {
	// Math expression for the metric.
	// Experimental.
	Expression *string `json:"expression" yaml:"expression"`
	// How many seconds to aggregate over.
	// Experimental.
	Period *float64 `json:"period" yaml:"period"`
	// Metrics used in the math expression.
	// Experimental.
	UsingMetrics *map[string]IMetric `json:"usingMetrics" yaml:"usingMetrics"`
	// Account to evaluate search expressions within.
	// Experimental.
	SearchAccount *string `json:"searchAccount" yaml:"searchAccount"`
	// Region to evaluate search expressions within.
	// Experimental.
	SearchRegion *string `json:"searchRegion" yaml:"searchRegion"`
}

// Properties used to construct the Metric identifying part of a Graph.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//
//   var value interface{}
//   metricGraphConfig := &metricGraphConfig{
//   	metricName: jsii.String("metricName"),
//   	namespace: jsii.String("namespace"),
//   	period: jsii.Number(123),
//   	renderingProperties: &metricRenderingProperties{
//   		period: jsii.Number(123),
//
//   		// the properties below are optional
//   		color: jsii.String("color"),
//   		label: jsii.String("label"),
//   		stat: jsii.String("stat"),
//   	},
//
//   	// the properties below are optional
//   	color: jsii.String("color"),
//   	dimensions: []dimension{
//   		&dimension{
//   			name: jsii.String("name"),
//   			value: value,
//   		},
//   	},
//   	label: jsii.String("label"),
//   	statistic: jsii.String("statistic"),
//   	unit: cloudwatch.unit_SECONDS,
//   }
//
// Deprecated: Replaced by MetricConfig.
type MetricGraphConfig struct {
	// Name of the metric.
	// Deprecated: Replaced by MetricConfig.
	MetricName *string `json:"metricName" yaml:"metricName"`
	// Namespace of the metric.
	// Deprecated: Replaced by MetricConfig.
	Namespace *string `json:"namespace" yaml:"namespace"`
	// How many seconds to aggregate over.
	// Deprecated: Use `period` in `renderingProperties`.
	Period *float64 `json:"period" yaml:"period"`
	// Rendering properties override yAxis parameter of the widget object.
	// Deprecated: Replaced by MetricConfig.
	RenderingProperties *MetricRenderingProperties `json:"renderingProperties" yaml:"renderingProperties"`
	// Color for the graph line.
	// Deprecated: Use `color` in `renderingProperties`.
	Color *string `json:"color" yaml:"color"`
	// The dimensions to apply to the alarm.
	// Deprecated: Replaced by MetricConfig.
	Dimensions *[]*Dimension `json:"dimensions" yaml:"dimensions"`
	// Label for the metric.
	// Deprecated: Use `label` in `renderingProperties`.
	Label *string `json:"label" yaml:"label"`
	// Aggregation function to use (can be either simple or a percentile).
	// Deprecated: Use `stat` in `renderingProperties`.
	Statistic *string `json:"statistic" yaml:"statistic"`
	// The unit of the alarm.
	// Deprecated: not used in dashboard widgets.
	Unit Unit `json:"unit" yaml:"unit"`
}

// Properties of a metric that can be changed.
//
// Example:
//   import cloudwatch "github.com/aws/aws-cdk-go/awscdk"
//   var deliveryStream deliveryStream
//
//   // Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit
//   incomingBytesPercentOfLimit := cloudwatch.NewMathExpression(&mathExpressionProps{
//   	expression: jsii.String("incomingBytes / 300 / bytePerSecLimit"),
//   	usingMetrics: map[string]iMetric{
//   		"incomingBytes": deliveryStream.metricIncomingBytes(&MetricOptions{
//   			"statistic": cloudwatch.Statistic_SUM,
//   		}),
//   		"bytePerSecLimit": deliveryStream.metric(jsii.String("BytesPerSecondLimit")),
//   	},
//   })
//
//   cloudwatch.NewAlarm(this, jsii.String("Alarm"), &alarmProps{
//   	metric: incomingBytesPercentOfLimit,
//   	threshold: jsii.Number(0.9),
//   	evaluationPeriods: jsii.Number(3),
//   })
//
// Experimental.
type MetricOptions struct {
	// Account which this metric comes from.
	// Experimental.
	Account *string `json:"account" yaml:"account"`
	// The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The `Color` class has a set of standard colors that can be used here.
	// Experimental.
	Color *string `json:"color" yaml:"color"`
	// Dimensions of the metric.
	// Deprecated: Use 'dimensionsMap' instead.
	Dimensions *map[string]interface{} `json:"dimensions" yaml:"dimensions"`
	// Dimensions of the metric.
	// Experimental.
	DimensionsMap *map[string]*string `json:"dimensionsMap" yaml:"dimensionsMap"`
	// Label for this metric when added to a Graph in a Dashboard.
	//
	// You can use [dynamic labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html)
	// to show summary information about the entire displayed time series
	// in the legend. For example, if you use:
	//
	// ```
	// [max: ${MAX}] MyMetric
	// ```
	//
	// As the metric label, the maximum value in the visible range will
	// be shown next to the time series name in the graph's legend.
	// Experimental.
	Label *string `json:"label" yaml:"label"`
	// The period over which the specified statistic is applied.
	// Experimental.
	Period awscdk.Duration `json:"period" yaml:"period"`
	// Region which this metric comes from.
	// Experimental.
	Region *string `json:"region" yaml:"region"`
	// What function to use for aggregating.
	//
	// Can be one of the following:
	//
	// - "Minimum" | "min"
	// - "Maximum" | "max"
	// - "Average" | "avg"
	// - "Sum" | "sum"
	// - "SampleCount | "n"
	// - "pNN.NN"
	// Experimental.
	Statistic *string `json:"statistic" yaml:"statistic"`
	// Unit used to filter the metric stream.
	//
	// Only refer to datums emitted to the metric stream with the given unit and
	// ignore all others. Only useful when datums are being emitted to the same
	// metric stream under different units.
	//
	// The default is to use all matric datums in the stream, regardless of unit,
	// which is recommended in nearly all cases.
	//
	// CloudWatch does not honor this property for graphs.
	// Experimental.
	Unit Unit `json:"unit" yaml:"unit"`
}

// Properties for a metric.
//
// Example:
//   hostedZone := route53.NewHostedZone(this, jsii.String("MyHostedZone"), &hostedZoneProps{
//   	zoneName: jsii.String("example.org"),
//   })
//   metric := cloudwatch.NewMetric(&metricProps{
//   	namespace: jsii.String("AWS/Route53"),
//   	metricName: jsii.String("DNSQueries"),
//   	dimensionsMap: map[string]*string{
//   		"HostedZoneId": hostedZone.hostedZoneId,
//   	},
//   })
//
// Experimental.
type MetricProps struct {
	// Account which this metric comes from.
	// Experimental.
	Account *string `json:"account" yaml:"account"`
	// The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The `Color` class has a set of standard colors that can be used here.
	// Experimental.
	Color *string `json:"color" yaml:"color"`
	// Dimensions of the metric.
	// Deprecated: Use 'dimensionsMap' instead.
	Dimensions *map[string]interface{} `json:"dimensions" yaml:"dimensions"`
	// Dimensions of the metric.
	// Experimental.
	DimensionsMap *map[string]*string `json:"dimensionsMap" yaml:"dimensionsMap"`
	// Label for this metric when added to a Graph in a Dashboard.
	//
	// You can use [dynamic labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html)
	// to show summary information about the entire displayed time series
	// in the legend. For example, if you use:
	//
	// ```
	// [max: ${MAX}] MyMetric
	// ```
	//
	// As the metric label, the maximum value in the visible range will
	// be shown next to the time series name in the graph's legend.
	// Experimental.
	Label *string `json:"label" yaml:"label"`
	// The period over which the specified statistic is applied.
	// Experimental.
	Period awscdk.Duration `json:"period" yaml:"period"`
	// Region which this metric comes from.
	// Experimental.
	Region *string `json:"region" yaml:"region"`
	// What function to use for aggregating.
	//
	// Can be one of the following:
	//
	// - "Minimum" | "min"
	// - "Maximum" | "max"
	// - "Average" | "avg"
	// - "Sum" | "sum"
	// - "SampleCount | "n"
	// - "pNN.NN"
	// Experimental.
	Statistic *string `json:"statistic" yaml:"statistic"`
	// Unit used to filter the metric stream.
	//
	// Only refer to datums emitted to the metric stream with the given unit and
	// ignore all others. Only useful when datums are being emitted to the same
	// metric stream under different units.
	//
	// The default is to use all matric datums in the stream, regardless of unit,
	// which is recommended in nearly all cases.
	//
	// CloudWatch does not honor this property for graphs.
	// Experimental.
	Unit Unit `json:"unit" yaml:"unit"`
	// Name of the metric.
	// Experimental.
	MetricName *string `json:"metricName" yaml:"metricName"`
	// Namespace of the metric.
	// Experimental.
	Namespace *string `json:"namespace" yaml:"namespace"`
}

// Custom rendering properties that override the default rendering properties specified in the yAxis parameter of the widget object.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   metricRenderingProperties := &metricRenderingProperties{
//   	period: jsii.Number(123),
//
//   	// the properties below are optional
//   	color: jsii.String("color"),
//   	label: jsii.String("label"),
//   	stat: jsii.String("stat"),
//   }
//
// Deprecated: Replaced by MetricConfig.
type MetricRenderingProperties struct {
	// How many seconds to aggregate over.
	// Deprecated: Replaced by MetricConfig.
	Period *float64 `json:"period" yaml:"period"`
	// The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The `Color` class has a set of standard colors that can be used here.
	// Deprecated: Replaced by MetricConfig.
	Color *string `json:"color" yaml:"color"`
	// Label for the metric.
	// Deprecated: Replaced by MetricConfig.
	Label *string `json:"label" yaml:"label"`
	// Aggregation function to use (can be either simple or a percentile).
	// Deprecated: Replaced by MetricConfig.
	Stat *string `json:"stat" yaml:"stat"`
}

// Properties for a concrete metric.
//
// NOTE: `unit` is no longer on this object since it is only used for `Alarms`, and doesn't mean what one
// would expect it to mean there anyway. It is most likely to be misused.
//
// Example:
//   import monocdk "github.com/aws/aws-cdk-go/awscdk"import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//
//   var duration duration
//   var value interface{}
//   metricStatConfig := &metricStatConfig{
//   	metricName: jsii.String("metricName"),
//   	namespace: jsii.String("namespace"),
//   	period: duration,
//   	statistic: jsii.String("statistic"),
//
//   	// the properties below are optional
//   	account: jsii.String("account"),
//   	dimensions: []dimension{
//   		&dimension{
//   			name: jsii.String("name"),
//   			value: value,
//   		},
//   	},
//   	region: jsii.String("region"),
//   	unitFilter: cloudwatch.unit_SECONDS,
//   }
//
// Experimental.
type MetricStatConfig struct {
	// Name of the metric.
	// Experimental.
	MetricName *string `json:"metricName" yaml:"metricName"`
	// Namespace of the metric.
	// Experimental.
	Namespace *string `json:"namespace" yaml:"namespace"`
	// How many seconds to aggregate over.
	// Experimental.
	Period awscdk.Duration `json:"period" yaml:"period"`
	// Aggregation function to use (can be either simple or a percentile).
	// Experimental.
	Statistic *string `json:"statistic" yaml:"statistic"`
	// Account which this metric comes from.
	// Experimental.
	Account *string `json:"account" yaml:"account"`
	// The dimensions to apply to the alarm.
	// Experimental.
	Dimensions *[]*Dimension `json:"dimensions" yaml:"dimensions"`
	// Region which this metric comes from.
	// Experimental.
	Region *string `json:"region" yaml:"region"`
	// Unit used to filter the metric stream.
	//
	// Only refer to datums emitted to the metric stream with the given unit and
	// ignore all others. Only useful when datums are being emitted to the same
	// metric stream under different units.
	//
	// This field has been renamed from plain `unit` to clearly communicate
	// its purpose.
	// Experimental.
	UnitFilter Unit `json:"unitFilter" yaml:"unitFilter"`
}

// Basic properties for widgets that display metrics.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   metricWidgetProps := &metricWidgetProps{
//   	height: jsii.Number(123),
//   	region: jsii.String("region"),
//   	title: jsii.String("title"),
//   	width: jsii.Number(123),
//   }
//
// Experimental.
type MetricWidgetProps struct {
	// Height of the widget.
	// Experimental.
	Height *float64 `json:"height" yaml:"height"`
	// The region the metrics of this graph should be taken from.
	// Experimental.
	Region *string `json:"region" yaml:"region"`
	// Title for the graph.
	// Experimental.
	Title *string `json:"title" yaml:"title"`
	// Width of the widget, in a grid of 24 units wide.
	// Experimental.
	Width *float64 `json:"width" yaml:"width"`
}

// Specify the period for graphs when the CloudWatch dashboard loads.
// Experimental.
type PeriodOverride string

const (
	// Period of all graphs on the dashboard automatically adapt to the time range of the dashboard.
	// Experimental.
	PeriodOverride_AUTO PeriodOverride = "AUTO"
	// Period set for each graph will be used.
	// Experimental.
	PeriodOverride_INHERIT PeriodOverride = "INHERIT"
)

// A widget that contains other widgets in a horizontal row.
//
// Widgets will be laid out next to each other.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//
//   var widget iWidget
//   row := cloudwatch.NewRow(widget)
//
// Experimental.
type Row interface {
	IWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// List of contained widgets.
	// Experimental.
	Widgets() *[]IWidget
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for Row
type jsiiProxy_Row struct {
	jsiiProxy_IWidget
}

func (j *jsiiProxy_Row) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Row) Widgets() *[]IWidget {
	var returns *[]IWidget
	_jsii_.Get(
		j,
		"widgets",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Row) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}


// Experimental.
func NewRow(widgets ...IWidget) Row {
	_init_.Initialize()

	args := []interface{}{}
	for _, a := range widgets {
		args = append(args, a)
	}

	j := jsiiProxy_Row{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.Row",
		args,
		&j,
	)

	return &j
}

// Experimental.
func NewRow_Override(r Row, widgets ...IWidget) {
	_init_.Initialize()

	args := []interface{}{}
	for _, a := range widgets {
		args = append(args, a)
	}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.Row",
		args,
		r,
	)
}

func (r *jsiiProxy_Row) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		r,
		"position",
		[]interface{}{x, y},
	)
}

func (r *jsiiProxy_Row) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		r,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Fill shading options that will be used with an annotation.
// Experimental.
type Shading string

const (
	// Don't add shading.
	// Experimental.
	Shading_NONE Shading = "NONE"
	// Add shading above the annotation.
	// Experimental.
	Shading_ABOVE Shading = "ABOVE"
	// Add shading below the annotation.
	// Experimental.
	Shading_BELOW Shading = "BELOW"
)

// A dashboard widget that displays the most recent value for every metric.
//
// Example:
//   var dashboard dashboard
//   var visitorCount metric
//   var purchaseCount metric
//
//   dashboard.addWidgets(cloudwatch.NewSingleValueWidget(&singleValueWidgetProps{
//   	metrics: []iMetric{
//   		visitorCount,
//   		purchaseCount,
//   	},
//   }))
//
// Experimental.
type SingleValueWidget interface {
	ConcreteWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// Any warnings that are produced as a result of putting together this widget.
	// Experimental.
	Warnings() *[]*string
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Copy the warnings from the given metric.
	// Experimental.
	CopyMetricWarnings(ms ...IMetric)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for SingleValueWidget
type jsiiProxy_SingleValueWidget struct {
	jsiiProxy_ConcreteWidget
}

func (j *jsiiProxy_SingleValueWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SingleValueWidget) Warnings() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"warnings",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SingleValueWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SingleValueWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SingleValueWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewSingleValueWidget(props *SingleValueWidgetProps) SingleValueWidget {
	_init_.Initialize()

	j := jsiiProxy_SingleValueWidget{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.SingleValueWidget",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewSingleValueWidget_Override(s SingleValueWidget, props *SingleValueWidgetProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.SingleValueWidget",
		[]interface{}{props},
		s,
	)
}

func (j *jsiiProxy_SingleValueWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_SingleValueWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (s *jsiiProxy_SingleValueWidget) CopyMetricWarnings(ms ...IMetric) {
	args := []interface{}{}
	for _, a := range ms {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		s,
		"copyMetricWarnings",
		args,
	)
}

func (s *jsiiProxy_SingleValueWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		s,
		"position",
		[]interface{}{x, y},
	)
}

func (s *jsiiProxy_SingleValueWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		s,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Properties for a SingleValueWidget.
//
// Example:
//   var dashboard dashboard
//   var visitorCount metric
//   var purchaseCount metric
//
//   dashboard.addWidgets(cloudwatch.NewSingleValueWidget(&singleValueWidgetProps{
//   	metrics: []iMetric{
//   		visitorCount,
//   		purchaseCount,
//   	},
//   }))
//
// Experimental.
type SingleValueWidgetProps struct {
	// Height of the widget.
	// Experimental.
	Height *float64 `json:"height" yaml:"height"`
	// The region the metrics of this graph should be taken from.
	// Experimental.
	Region *string `json:"region" yaml:"region"`
	// Title for the graph.
	// Experimental.
	Title *string `json:"title" yaml:"title"`
	// Width of the widget, in a grid of 24 units wide.
	// Experimental.
	Width *float64 `json:"width" yaml:"width"`
	// Metrics to display.
	// Experimental.
	Metrics *[]IMetric `json:"metrics" yaml:"metrics"`
	// Whether to show as many digits as can fit, before rounding.
	// Experimental.
	FullPrecision *bool `json:"fullPrecision" yaml:"fullPrecision"`
	// Whether to show the value from the entire time range.
	// Experimental.
	SetPeriodToTimeRange *bool `json:"setPeriodToTimeRange" yaml:"setPeriodToTimeRange"`
}

// A widget that doesn't display anything but takes up space.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   spacer := cloudwatch.NewSpacer(&spacerProps{
//   	height: jsii.Number(123),
//   	width: jsii.Number(123),
//   })
//
// Experimental.
type Spacer interface {
	IWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Place the widget at a given position.
	// Experimental.
	Position(_x *float64, _y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for Spacer
type jsiiProxy_Spacer struct {
	jsiiProxy_IWidget
}

func (j *jsiiProxy_Spacer) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Spacer) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}


// Experimental.
func NewSpacer(props *SpacerProps) Spacer {
	_init_.Initialize()

	j := jsiiProxy_Spacer{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.Spacer",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewSpacer_Override(s Spacer, props *SpacerProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.Spacer",
		[]interface{}{props},
		s,
	)
}

func (s *jsiiProxy_Spacer) Position(_x *float64, _y *float64) {
	_jsii_.InvokeVoid(
		s,
		"position",
		[]interface{}{_x, _y},
	)
}

func (s *jsiiProxy_Spacer) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		s,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Props of the spacer.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   spacerProps := &spacerProps{
//   	height: jsii.Number(123),
//   	width: jsii.Number(123),
//   }
//
// Experimental.
type SpacerProps struct {
	// Height of the spacer.
	// Experimental.
	Height *float64 `json:"height" yaml:"height"`
	// Width of the spacer.
	// Experimental.
	Width *float64 `json:"width" yaml:"width"`
}

// Statistic to use over the aggregation period.
//
// Example:
//   import cloudwatch "github.com/aws/aws-cdk-go/awscdk"
//   var deliveryStream deliveryStream
//
//   // Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit
//   incomingBytesPercentOfLimit := cloudwatch.NewMathExpression(&mathExpressionProps{
//   	expression: jsii.String("incomingBytes / 300 / bytePerSecLimit"),
//   	usingMetrics: map[string]iMetric{
//   		"incomingBytes": deliveryStream.metricIncomingBytes(&MetricOptions{
//   			"statistic": cloudwatch.Statistic_SUM,
//   		}),
//   		"bytePerSecLimit": deliveryStream.metric(jsii.String("BytesPerSecondLimit")),
//   	},
//   })
//
//   cloudwatch.NewAlarm(this, jsii.String("Alarm"), &alarmProps{
//   	metric: incomingBytesPercentOfLimit,
//   	threshold: jsii.Number(0.9),
//   	evaluationPeriods: jsii.Number(3),
//   })
//
// Experimental.
type Statistic string

const (
	// The count (number) of data points used for the statistical calculation.
	// Experimental.
	Statistic_SAMPLE_COUNT Statistic = "SAMPLE_COUNT"
	// The value of Sum / SampleCount during the specified period.
	// Experimental.
	Statistic_AVERAGE Statistic = "AVERAGE"
	// All values submitted for the matching metric added together.
	//
	// This statistic can be useful for determining the total volume of a metric.
	// Experimental.
	Statistic_SUM Statistic = "SUM"
	// The lowest value observed during the specified period.
	//
	// You can use this value to determine low volumes of activity for your application.
	// Experimental.
	Statistic_MINIMUM Statistic = "MINIMUM"
	// The highest value observed during the specified period.
	//
	// You can use this value to determine high volumes of activity for your application.
	// Experimental.
	Statistic_MAXIMUM Statistic = "MAXIMUM"
)

// A dashboard widget that displays MarkDown.
//
// Example:
//   var dashboard dashboard
//
//   dashboard.addWidgets(cloudwatch.NewTextWidget(&textWidgetProps{
//   	markdown: jsii.String("# Key Performance Indicators"),
//   }))
//
// Experimental.
type TextWidget interface {
	ConcreteWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// Any warnings that are produced as a result of putting together this widget.
	// Experimental.
	Warnings() *[]*string
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Copy the warnings from the given metric.
	// Experimental.
	CopyMetricWarnings(ms ...IMetric)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for TextWidget
type jsiiProxy_TextWidget struct {
	jsiiProxy_ConcreteWidget
}

func (j *jsiiProxy_TextWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TextWidget) Warnings() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"warnings",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TextWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TextWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TextWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewTextWidget(props *TextWidgetProps) TextWidget {
	_init_.Initialize()

	j := jsiiProxy_TextWidget{}

	_jsii_.Create(
		"monocdk.aws_cloudwatch.TextWidget",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewTextWidget_Override(t TextWidget, props *TextWidgetProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_cloudwatch.TextWidget",
		[]interface{}{props},
		t,
	)
}

func (j *jsiiProxy_TextWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_TextWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (t *jsiiProxy_TextWidget) CopyMetricWarnings(ms ...IMetric) {
	args := []interface{}{}
	for _, a := range ms {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		t,
		"copyMetricWarnings",
		args,
	)
}

func (t *jsiiProxy_TextWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		t,
		"position",
		[]interface{}{x, y},
	)
}

func (t *jsiiProxy_TextWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		t,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Properties for a Text widget.
//
// Example:
//   var dashboard dashboard
//
//   dashboard.addWidgets(cloudwatch.NewTextWidget(&textWidgetProps{
//   	markdown: jsii.String("# Key Performance Indicators"),
//   }))
//
// Experimental.
type TextWidgetProps struct {
	// The text to display, in MarkDown format.
	// Experimental.
	Markdown *string `json:"markdown" yaml:"markdown"`
	// Height of the widget.
	// Experimental.
	Height *float64 `json:"height" yaml:"height"`
	// Width of the widget, in a grid of 24 units wide.
	// Experimental.
	Width *float64 `json:"width" yaml:"width"`
}

// Specify how missing data points are treated during alarm evaluation.
//
// Example:
//   import cdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk"
//
//   fn := lambda.NewFunction(this, jsii.String("MyFunction"), &functionProps{
//   	runtime: lambda.runtime_NODEJS_12_X(),
//   	handler: jsii.String("index.handler"),
//   	code: lambda.code.fromAsset(path.join(__dirname, jsii.String("lambda-handler"))),
//   	timeout: cdk.duration.minutes(jsii.Number(5)),
//   })
//
//   if fn.timeout {
//   	cloudwatch.NewAlarm(this, jsii.String("MyAlarm"), &alarmProps{
//   		metric: fn.metricDuration().with(&metricOptions{
//   			statistic: jsii.String("Maximum"),
//   		}),
//   		evaluationPeriods: jsii.Number(1),
//   		datapointsToAlarm: jsii.Number(1),
//   		threshold: fn.timeout.toMilliseconds(),
//   		treatMissingData: cloudwatch.treatMissingData_IGNORE,
//   		alarmName: jsii.String("My Lambda Timeout"),
//   	})
//   }
//
// Experimental.
type TreatMissingData string

const (
	// Missing data points are treated as breaching the threshold.
	// Experimental.
	TreatMissingData_BREACHING TreatMissingData = "BREACHING"
	// Missing data points are treated as being within the threshold.
	// Experimental.
	TreatMissingData_NOT_BREACHING TreatMissingData = "NOT_BREACHING"
	// The current alarm state is maintained.
	// Experimental.
	TreatMissingData_IGNORE TreatMissingData = "IGNORE"
	// The alarm does not consider missing data points when evaluating whether to change state.
	// Experimental.
	TreatMissingData_MISSING TreatMissingData = "MISSING"
)

// Unit for metric.
// Experimental.
type Unit string

const (
	// Seconds.
	// Experimental.
	Unit_SECONDS Unit = "SECONDS"
	// Microseconds.
	// Experimental.
	Unit_MICROSECONDS Unit = "MICROSECONDS"
	// Milliseconds.
	// Experimental.
	Unit_MILLISECONDS Unit = "MILLISECONDS"
	// Bytes.
	// Experimental.
	Unit_BYTES Unit = "BYTES"
	// Kilobytes.
	// Experimental.
	Unit_KILOBYTES Unit = "KILOBYTES"
	// Megabytes.
	// Experimental.
	Unit_MEGABYTES Unit = "MEGABYTES"
	// Gigabytes.
	// Experimental.
	Unit_GIGABYTES Unit = "GIGABYTES"
	// Terabytes.
	// Experimental.
	Unit_TERABYTES Unit = "TERABYTES"
	// Bits.
	// Experimental.
	Unit_BITS Unit = "BITS"
	// Kilobits.
	// Experimental.
	Unit_KILOBITS Unit = "KILOBITS"
	// Megabits.
	// Experimental.
	Unit_MEGABITS Unit = "MEGABITS"
	// Gigabits.
	// Experimental.
	Unit_GIGABITS Unit = "GIGABITS"
	// Terabits.
	// Experimental.
	Unit_TERABITS Unit = "TERABITS"
	// Percent.
	// Experimental.
	Unit_PERCENT Unit = "PERCENT"
	// Count.
	// Experimental.
	Unit_COUNT Unit = "COUNT"
	// Bytes/second (B/s).
	// Experimental.
	Unit_BYTES_PER_SECOND Unit = "BYTES_PER_SECOND"
	// Kilobytes/second (kB/s).
	// Experimental.
	Unit_KILOBYTES_PER_SECOND Unit = "KILOBYTES_PER_SECOND"
	// Megabytes/second (MB/s).
	// Experimental.
	Unit_MEGABYTES_PER_SECOND Unit = "MEGABYTES_PER_SECOND"
	// Gigabytes/second (GB/s).
	// Experimental.
	Unit_GIGABYTES_PER_SECOND Unit = "GIGABYTES_PER_SECOND"
	// Terabytes/second (TB/s).
	// Experimental.
	Unit_TERABYTES_PER_SECOND Unit = "TERABYTES_PER_SECOND"
	// Bits/second (b/s).
	// Experimental.
	Unit_BITS_PER_SECOND Unit = "BITS_PER_SECOND"
	// Kilobits/second (kb/s).
	// Experimental.
	Unit_KILOBITS_PER_SECOND Unit = "KILOBITS_PER_SECOND"
	// Megabits/second (Mb/s).
	// Experimental.
	Unit_MEGABITS_PER_SECOND Unit = "MEGABITS_PER_SECOND"
	// Gigabits/second (Gb/s).
	// Experimental.
	Unit_GIGABITS_PER_SECOND Unit = "GIGABITS_PER_SECOND"
	// Terabits/second (Tb/s).
	// Experimental.
	Unit_TERABITS_PER_SECOND Unit = "TERABITS_PER_SECOND"
	// Count/second.
	// Experimental.
	Unit_COUNT_PER_SECOND Unit = "COUNT_PER_SECOND"
	// No unit.
	// Experimental.
	Unit_NONE Unit = "NONE"
)

// Properties for a Y-Axis.
//
// Example:
//   import awscdk "github.com/aws/aws-cdk-go/awscdk"import cloudwatch "github.com/aws/aws-cdk-go/awscdk/aws_cloudwatch"
//   yAxisProps := &yAxisProps{
//   	label: jsii.String("label"),
//   	max: jsii.Number(123),
//   	min: jsii.Number(123),
//   	showUnits: jsii.Boolean(false),
//   }
//
// Experimental.
type YAxisProps struct {
	// The label.
	// Experimental.
	Label *string `json:"label" yaml:"label"`
	// The max value.
	// Experimental.
	Max *float64 `json:"max" yaml:"max"`
	// The min value.
	// Experimental.
	Min *float64 `json:"min" yaml:"min"`
	// Whether to show units.
	// Experimental.
	ShowUnits *bool `json:"showUnits" yaml:"showUnits"`
}

